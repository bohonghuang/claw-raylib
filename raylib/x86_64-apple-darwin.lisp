;; Generated by :claw at 2024-07-21T10:06:31.353190Z
(uiop:define-package :raylib (:use))
(uiop:define-package :claw-raylib.raylib~pristine (:use :cl))
(common-lisp:in-package :claw-raylib.raylib~pristine)

(defparameter raylib::+beige+ nil)

(defparameter raylib::+black+ nil)

(defparameter raylib::+blank+ nil)

(defparameter raylib::+blue+ nil)

(defparameter raylib::+brown+ nil)

(defparameter raylib::+camera-cull-distance-far+ nil)

(defparameter raylib::+camera-cull-distance-near+ nil)

(defparameter raylib::+darkblue+ nil)

(defparameter raylib::+darkbrown+ nil)

(defparameter raylib::+darkgray+ nil)

(defparameter raylib::+darkgreen+ nil)

(defparameter raylib::+darkpurple+ nil)

(defparameter raylib::+deg2rad+ 0.01745329238474369D0)

(defparameter raylib::+epsilon+ 9.999999974752427D-7)

(defparameter raylib::+fp-ilogb0+ -2147483648)

(defparameter raylib::+fp-ilogbnan+ -2147483648)

(defparameter raylib::+fp-infinite+ 1)

(defparameter raylib::+fp-nan+ 0)

(defparameter raylib::+fp-normal+ 4)

(defparameter raylib::+fp-subnormal+ 3)

(defparameter raylib::+fp-zero+ 2)

(defparameter raylib::+gold+ nil)

(defparameter raylib::+gray+ nil)

(defparameter raylib::+green+ nil)

(defparameter raylib::+huge-val+ :short-float-positive-infinity)

(defparameter raylib::+huge-valf+ :short-float-positive-infinity)

(defparameter raylib::+huge-vall+ :short-float-positive-infinity)

(defparameter raylib::+infinity+ :short-float-positive-infinity)

(defparameter raylib::+lightgray+ nil)

(defparameter raylib::+lime+ nil)

(defparameter raylib::+magenta+ nil)

(defparameter raylib::+maroon+ nil)

(defparameter raylib::+material-map-diffuse+ 0)

(defparameter raylib::+material-map-specular+ 1)

(defparameter raylib::+math-errexcept+ 2)

(defparameter raylib::+math-errno+ 1)

(defparameter raylib::+mouse-left-button+ 0)

(defparameter raylib::+mouse-middle-button+ 2)

(defparameter raylib::+mouse-right-button+ 1)

(defparameter raylib::+m-1-pi+ nil)

(defparameter raylib::+m-2-pi+ nil)

(defparameter raylib::+m-2-sqrtpi+ nil)

(defparameter raylib::+m-e+ nil)

(defparameter raylib::+m-ln10+ nil)

(defparameter raylib::+m-ln2+ nil)

(defparameter raylib::+m-log10e+ nil)

(defparameter raylib::+m-log2e+ nil)

(defparameter raylib::+m-pi+ nil)

(defparameter raylib::+m-pi-2+ nil)

(defparameter raylib::+m-pi-4+ nil)

(defparameter raylib::+m-sqrt1-2+ nil)

(defparameter raylib::+m-sqrt2+ nil)

(defparameter raylib::+nan+ :double-nan)

(defparameter raylib::+orange+ nil)

(defparameter raylib::+pi+ 3.1415927410125732D0)

(defparameter raylib::+pink+ nil)

(defparameter raylib::+purple+ nil)

(defparameter raylib::+rad2deg+ 57.2957763671875D0)

(defparameter raylib::+raylib-h+ nil)

(defparameter raylib::+raylib-version+ "5.0")

(defparameter raylib::+raylib-version-major+ 5)

(defparameter raylib::+raylib-version-minor+ 0)

(defparameter raylib::+raylib-version-patch+ 0)

(defparameter raylib::+raymath-h+ nil)

(defparameter raylib::+raywhite+ nil)

(defparameter raylib::+rcamera-h+ nil)

(defparameter raylib::+red+ nil)

(defparameter raylib::+rlapi+ nil)

(defparameter raylib::+rl-color-type+ nil)

(defparameter raylib::+rl-matrix-type+ nil)

(defparameter raylib::+rl-quaternion-type+ nil)

(defparameter raylib::+rl-rectangle-type+ nil)

(defparameter raylib::+rl-vector2-type+ nil)

(defparameter raylib::+rl-vector3-type+ nil)

(defparameter raylib::+rl-vector4-type+ nil)

(defparameter raylib::+rmapi+ nil)

(defparameter raylib::+shader-loc-map-diffuse+ 15)

(defparameter raylib::+shader-loc-map-specular+ 16)

(defparameter raylib::+skyblue+ nil)

(defparameter raylib::+violet+ nil)

(defparameter raylib::+white+ nil)

(defparameter raylib::+yellow+ nil)

(defparameter raylib::+%atfile-source+ nil)

(defparameter raylib::+%bits-floatn-common-h+ nil)

(defparameter raylib::+%bits-floatn-h+ nil)

(defparameter raylib::+%bits-libm-simd-decl-stubs-h+ 1)

(defparameter raylib::+%bits-time64-h+ 1)

(defparameter raylib::+%bits-typesizes-h+ 1)

(defparameter raylib::+%bits-types-h+ 1)

(defparameter raylib::+%default-source+ nil)

(defparameter raylib::+%features-h+ 1)

(defparameter raylib::+%lp64+ 1)

(defparameter raylib::+%math-h+ 1)

(defparameter raylib::+%mdouble-+ nil)

(defparameter raylib::+%posix-c-source+ nil)

(defparameter raylib::+%posix-source+ nil)

(defparameter raylib::+%stdc-predef-h+ 1)

(defparameter raylib::+%sys-cdefs-h+ 1)

(defparameter raylib::+%va-list+ nil)

(defparameter raylib::+bool+ nil)

(defparameter raylib::+false+ 0)

(defparameter raylib::+math-errhandling+ 3)

(defparameter raylib::+true+ 1)

(cffi:defcenum (raylib::|C:@EA@BLEND-MODE| :unsigned-int)
               "/usr/include/raylib.h:883:9"
               (:alpha 0)
               (:additive 1)
               (:multiplied 2)
               (:add-colors 3)
               (:subtract-colors 4)
               (:alpha-premultiply 5)
               (:custom 6)
               (:custom-separate 7))

(cffi:defcenum (raylib::|C:@EA@CAMERA-MODE| :unsigned-int)
               "/usr/include/raylib.h:911:9"
               (:custom 0)
               (:free 1)
               (:orbital 2)
               (:first-person 3)
               (:third-person 4))

(cffi:defcenum (raylib::|C:@EA@CAMERA-PROJECTION| :unsigned-int)
               "/usr/include/raylib.h:920:9"
               (:perspective 0)
               (:orthographic 1))

(cffi:defbitfield (raylib::|C:@EA@CONFIG-FLAGS| :unsigned-int)
                  "/usr/include/raylib.h:529:9"
                  (:vsync-hint 64)
                  (:fullscreen-mode 2)
                  (:window-resizable 4)
                  (:window-undecorated 8)
                  (:window-hidden 128)
                  (:window-minimized 512)
                  (:window-maximized 1024)
                  (:window-unfocused 2048)
                  (:window-topmost 4096)
                  (:window-always-run 256)
                  (:window-transparent 16)
                  (:window-highdpi 8192)
                  (:window-mouse-passthrough 16384)
                  (:borderless-windowed-mode 32768)
                  (:msaa-4x-hint 32)
                  (:interlaced-hint 65536))

(cffi:defcenum (raylib::|C:@EA@CUBEMAP-LAYOUT| :unsigned-int)
               "/usr/include/raylib.h:866:9"
               (:auto-detect 0)
               (:line-vertical 1)
               (:line-horizontal 2)
               (:cross-three-by-four 3)
               (:cross-four-by-three 4)
               (:panorama 5))

(cffi:defcenum (raylib::|C:@EA@FONT-TYPE| :unsigned-int)
               "/usr/include/raylib.h:876:9"
               (:default 0)
               (:bitmap 1)
               (:sdf 2))

(cffi:defcenum (raylib::|C:@EA@GAMEPAD-AXIS| :unsigned-int)
               "/usr/include/raylib.h:735:9"
               (:left-x 0)
               (:left-y 1)
               (:right-x 2)
               (:right-y 3)
               (:left-trigger 4)
               (:right-trigger 5))

(cffi:defcenum (raylib::|C:@EA@GAMEPAD-BUTTON| :unsigned-int)
               "/usr/include/raylib.h:713:9"
               (:unknown 0)
               (:left-face-up 1)
               (:left-face-right 2)
               (:left-face-down 3)
               (:left-face-left 4)
               (:right-face-up 5)
               (:right-face-right 6)
               (:right-face-down 7)
               (:right-face-left 8)
               (:left-trigger-1 9)
               (:left-trigger-2 10)
               (:right-trigger-1 11)
               (:right-trigger-2 12)
               (:middle-left 13)
               (:middle 14)
               (:middle-right 15)
               (:left-thumb 16)
               (:right-thumb 17))

(cffi:defcenum (raylib::|C:@EA@GESTURE| :unsigned-int)
               "/usr/include/raylib.h:896:9"
               (:none 0)
               (:tap 1)
               (:doubletap 2)
               (:hold 4)
               (:drag 8)
               (:swipe-right 16)
               (:swipe-left 32)
               (:swipe-up 64)
               (:swipe-down 128)
               (:pinch-in 256)
               (:pinch-out 512))

(cffi:defcenum (raylib::|C:@EA@KEYBOARD-KEY| :unsigned-int)
               "/usr/include/raylib.h:564:9"
               (:null 0)
               (:apostrophe 39)
               (:comma 44)
               (:minus 45)
               (:period 46)
               (:slash 47)
               (:zero 48)
               (:one 49)
               (:two 50)
               (:three 51)
               (:four 52)
               (:five 53)
               (:six 54)
               (:seven 55)
               (:eight 56)
               (:nine 57)
               (:semicolon 59)
               (:equal 61)
               (:a 65)
               (:b 66)
               (:c 67)
               (:d 68)
               (:e 69)
               (:f 70)
               (:g 71)
               (:h 72)
               (:i 73)
               (:j 74)
               (:k 75)
               (:l 76)
               (:m 77)
               (:n 78)
               (:o 79)
               (:p 80)
               (:q 81)
               (:r 82)
               (:s 83)
               (:t 84)
               (:u 85)
               (:v 86)
               (:w 87)
               (:x 88)
               (:y 89)
               (:z 90)
               (:left-bracket 91)
               (:backslash 92)
               (:right-bracket 93)
               (:grave 96)
               (:space 32)
               (:escape 256)
               (:enter 257)
               (:tab 258)
               (:backspace 259)
               (:insert 260)
               (:delete 261)
               (:right 262)
               (:left 263)
               (:down 264)
               (:up 265)
               (:page-up 266)
               (:page-down 267)
               (:home 268)
               (:end 269)
               (:caps-lock 280)
               (:scroll-lock 281)
               (:num-lock 282)
               (:print-screen 283)
               (:pause 284)
               (:f1 290)
               (:f2 291)
               (:f3 292)
               (:f4 293)
               (:f5 294)
               (:f6 295)
               (:f7 296)
               (:f8 297)
               (:f9 298)
               (:f10 299)
               (:f11 300)
               (:f12 301)
               (:left-shift 340)
               (:left-control 341)
               (:left-alt 342)
               (:left-super 343)
               (:right-shift 344)
               (:right-control 345)
               (:right-alt 346)
               (:right-super 347)
               (:kb-menu 348)
               (:kp-0 320)
               (:kp-1 321)
               (:kp-2 322)
               (:kp-3 323)
               (:kp-4 324)
               (:kp-5 325)
               (:kp-6 326)
               (:kp-7 327)
               (:kp-8 328)
               (:kp-9 329)
               (:kp-decimal 330)
               (:kp-divide 331)
               (:kp-multiply 332)
               (:kp-subtract 333)
               (:kp-add 334)
               (:kp-enter 335)
               (:kp-equal 336)
               (:back 4)
               (:menu 82)
               (:volume-up 24)
               (:volume-down 25))

(cffi:defcenum (raylib::|C:@EA@MATERIAL-MAP-INDEX| :unsigned-int)
               "/usr/include/raylib.h:745:9"
               (:albedo 0)
               (:metalness 1)
               (:normal 2)
               (:roughness 3)
               (:occlusion 4)
               (:emission 5)
               (:height 6)
               (:cubemap 7)
               (:irradiance 8)
               (:prefilter 9)
               (:brdf 10))

(cffi:defcenum (raylib::|C:@EA@MOUSE-BUTTON| :unsigned-int)
               "/usr/include/raylib.h:687:9"
               (:left 0)
               (:right 1)
               (:middle 2)
               (:side 3)
               (:extra 4)
               (:forward 5)
               (:back 6))

(cffi:defcenum (raylib::|C:@EA@MOUSE-CURSOR| :unsigned-int)
               "/usr/include/raylib.h:698:9"
               (:default 0)
               (:arrow 1)
               (:ibeam 2)
               (:crosshair 3)
               (:pointing-hand 4)
               (:resize-ew 5)
               (:resize-ns 6)
               (:resize-nwse 7)
               (:resize-nesw 8)
               (:resize-all 9)
               (:not-allowed 10))

(cffi:defcenum (raylib::|C:@EA@N-PATCH-LAYOUT| :unsigned-int)
               "/usr/include/raylib.h:926:9"
               (:nine-patch 0)
               (:three-patch-vertical 1)
               (:three-patch-horizontal 2))

(cffi:defcenum (raylib::|C:@EA@PIXEL-FORMAT| :unsigned-int)
               "/usr/include/raylib.h:818:9"
               (:uncompressed-grayscale 1)
               (:uncompressed-gray-alpha 2)
               (:uncompressed-r5g6b5 3)
               (:uncompressed-r8g8b8 4)
               (:uncompressed-r5g5b5a1 5)
               (:uncompressed-r4g4b4a4 6)
               (:uncompressed-r8g8b8a8 7)
               (:uncompressed-r32 8)
               (:uncompressed-r32g32b32 9)
               (:uncompressed-r32g32b32a32 10)
               (:uncompressed-r16 11)
               (:uncompressed-r16g16b16 12)
               (:uncompressed-r16g16b16a16 13)
               (:compressed-dxt1-rgb 14)
               (:compressed-dxt1-rgba 15)
               (:compressed-dxt3-rgba 16)
               (:compressed-dxt5-rgba 17)
               (:compressed-etc1-rgb 18)
               (:compressed-etc2-rgb 19)
               (:compressed-etc2-eac-rgba 20)
               (:compressed-pvrt-rgb 21)
               (:compressed-pvrt-rgba 22)
               (:compressed-astc-4x4-rgba 23)
               (:compressed-astc-8x8-rgba 24))

(cffi:defcenum (raylib::|C:@EA@SHADER-ATTRIBUTE-DATA-TYPE|
                :unsigned-int)
               "/usr/include/raylib.h:809:9"
               (:float 0)
               (:vec2 1)
               (:vec3 2)
               (:vec4 3))

(cffi:defcenum (raylib::|C:@EA@SHADER-LOCATION-INDEX| :unsigned-int)
               "/usr/include/raylib.h:763:9"
               (:vertex-position 0)
               (:vertex-texcoord01 1)
               (:vertex-texcoord02 2)
               (:vertex-normal 3)
               (:vertex-tangent 4)
               (:vertex-color 5)
               (:matrix-mvp 6)
               (:matrix-view 7)
               (:matrix-projection 8)
               (:matrix-model 9)
               (:matrix-normal 10)
               (:vector-view 11)
               (:color-diffuse 12)
               (:color-specular 13)
               (:color-ambient 14)
               (:map-albedo 15)
               (:map-metalness 16)
               (:map-normal 17)
               (:map-roughness 18)
               (:map-occlusion 19)
               (:map-emission 20)
               (:map-height 21)
               (:map-cubemap 22)
               (:map-irradiance 23)
               (:map-prefilter 24)
               (:map-brdf 25))

(cffi:defcenum (raylib::|C:@EA@SHADER-UNIFORM-DATA-TYPE|
                :unsigned-int)
               "/usr/include/raylib.h:796:9"
               (:float 0)
               (:vec2 1)
               (:vec3 2)
               (:vec4 3)
               (:int 4)
               (:ivec2 5)
               (:ivec3 6)
               (:ivec4 7)
               (:sampler2d 8))

(cffi:defcenum (raylib::|C:@EA@TEXTURE-FILTER| :unsigned-int)
               "/usr/include/raylib.h:848:9"
               (:point 0)
               (:bilinear 1)
               (:trilinear 2)
               (:anisotropic-4x 3)
               (:anisotropic-8x 4)
               (:anisotropic-16x 5))

(cffi:defcenum (raylib::|C:@EA@TEXTURE-WRAP| :unsigned-int)
               "/usr/include/raylib.h:858:9"
               (:repeat 0)
               (:clamp 1)
               (:mirror-repeat 2)
               (:mirror-clamp 3))

(cffi:defcenum (raylib::|C:@EA@TRACE-LOG-LEVEL| :unsigned-int)
               "/usr/include/raylib.h:550:9"
               (:all 0)
               (:trace 1)
               (:debug 2)
               (:info 3)
               (:warning 4)
               (:error 5)
               (:fatal 6)
               (:none 7))

(defparameter raylib::+fp-nan+ 0)

(defparameter raylib::+fp-infinite+ 1)

(defparameter raylib::+fp-zero+ 2)

(defparameter raylib::+fp-subnormal+ 3)

(defparameter raylib::+fp-normal+ 4)

(cffi:defctype raylib::audio-callback (:pointer :void))

(declaim (inline raylib::attach-audio-mixed-processor))

(cffi:defcfun ("AttachAudioMixedProcessor"
               raylib::attach-audio-mixed-processor)
              :void
              (raylib::processor raylib::audio-callback))

(cffi:defcstruct (raylib::r-audio-buffer :size 0))

(cffi:defctype raylib::r-audio-buffer
               (:struct raylib::r-audio-buffer))

(cffi:defcstruct (raylib::r-audio-processor :size 0))

(cffi:defctype raylib::r-audio-processor
               (:struct raylib::r-audio-processor))

(cffi:defcstruct (raylib::audio-stream :size 32)
                 (raylib::buffer (:pointer raylib::r-audio-buffer)
                  :offset 0)
                 (raylib::processor
                  (:pointer raylib::r-audio-processor) :offset 8)
                 (raylib::sample-rate :unsigned-int :offset 16)
                 (raylib::sample-size :unsigned-int :offset 20)
                 (raylib::channels :unsigned-int :offset 24))

(cffi:defctype raylib::audio-stream (:struct raylib::audio-stream))

(declaim (inline raylib::attach-audio-stream-processor))

(cffi:defcfun ("__claw__AttachAudioStreamProcessor"
               raylib::attach-audio-stream-processor)
              :void
              (raylib::stream (:pointer raylib::audio-stream))
              (raylib::processor raylib::audio-callback))

(declaim (inline raylib::begin-blend-mode))

(cffi:defcfun ("BeginBlendMode" raylib::begin-blend-mode)
              :void
              (raylib::mode :int))

(declaim (inline raylib::begin-drawing))

(cffi:defcfun ("BeginDrawing" raylib::begin-drawing) :void)

(cffi:defcstruct (raylib::vector2 :size 8)
                 (raylib::x :float :offset 0)
                 (raylib::y :float :offset 4))

(cffi:defctype raylib::vector2 (:struct raylib::vector2))

(cffi:defcstruct (raylib::camera-2d :size 24)
                 (raylib::offset raylib::vector2 :offset 0)
                 (raylib::target raylib::vector2 :offset 8)
                 (raylib::rotation :float :offset 16)
                 (raylib::zoom :float :offset 20))

(cffi:defctype raylib::camera-2d (:struct raylib::camera-2d))

(declaim (inline raylib::begin-mode-2d))

(cffi:defcfun ("__claw__BeginMode2D" raylib::begin-mode-2d)
              :void
              (raylib::camera (:pointer raylib::camera-2d)))

(cffi:defcstruct (raylib::vector3 :size 12)
                 (raylib::x :float :offset 0)
                 (raylib::y :float :offset 4)
                 (raylib::z :float :offset 8))

(cffi:defctype raylib::vector3 (:struct raylib::vector3))

(cffi:defcstruct (raylib::camera-3d :size 44)
                 (raylib::position raylib::vector3 :offset 0)
                 (raylib::target raylib::vector3 :offset 12)
                 (raylib::up raylib::vector3 :offset 24)
                 (raylib::fovy :float :offset 36)
                 (raylib::projection :int :offset 40))

(cffi:defctype raylib::camera-3d (:struct raylib::camera-3d))

(declaim (inline raylib::begin-mode-3d))

(cffi:defcfun ("__claw__BeginMode3D" raylib::begin-mode-3d)
              :void
              (raylib::camera (:pointer raylib::camera-3d)))

(declaim (inline raylib::begin-scissor-mode))

(cffi:defcfun ("BeginScissorMode" raylib::begin-scissor-mode)
              :void
              (raylib::x :int)
              (raylib::y :int)
              (raylib::width :int)
              (raylib::height :int))

(cffi:defcstruct (raylib::shader :size 16)
                 (raylib::id :unsigned-int :offset 0)
                 (raylib::locs (:pointer :int) :offset 8))

(cffi:defctype raylib::shader (:struct raylib::shader))

(declaim (inline raylib::begin-shader-mode))

(cffi:defcfun ("__claw__BeginShaderMode" raylib::begin-shader-mode)
              :void
              (raylib::shader (:pointer raylib::shader)))

(cffi:defcstruct (raylib::texture :size 20)
                 (raylib::id :unsigned-int :offset 0)
                 (raylib::width :int :offset 4)
                 (raylib::height :int :offset 8)
                 (raylib::mipmaps :int :offset 12)
                 (raylib::format :int :offset 16))

(cffi:defctype raylib::texture (:struct raylib::texture))

(cffi:defcstruct (raylib::render-texture :size 44)
                 (raylib::id :unsigned-int :offset 0)
                 (raylib::texture raylib::texture :offset 4)
                 (raylib::depth raylib::texture :offset 24))

(cffi:defctype raylib::render-texture-2d
               (:struct raylib::render-texture))

(declaim (inline raylib::begin-texture-mode))

(cffi:defcfun ("__claw__BeginTextureMode" raylib::begin-texture-mode)
              :void
              (raylib::target (:pointer raylib::render-texture-2d)))

(cffi:defcstruct (raylib::matrix :size 64)
                 (raylib::m0 :float :offset 0)
                 (raylib::m4 :float :offset 4)
                 (raylib::m8 :float :offset 8)
                 (raylib::m12 :float :offset 12)
                 (raylib::m1 :float :offset 16)
                 (raylib::m5 :float :offset 20)
                 (raylib::m9 :float :offset 24)
                 (raylib::m13 :float :offset 28)
                 (raylib::m2 :float :offset 32)
                 (raylib::m6 :float :offset 36)
                 (raylib::m10 :float :offset 40)
                 (raylib::m14 :float :offset 44)
                 (raylib::m3 :float :offset 48)
                 (raylib::m7 :float :offset 52)
                 (raylib::m11 :float :offset 56)
                 (raylib::m15 :float :offset 60))

(cffi:defctype raylib::matrix (:struct raylib::matrix))

(cffi:defcstruct (raylib::vr-stereo-config :size 304)
                 (raylib::projection raylib::matrix :count 2 :offset
                  0)
                 (raylib::view-offset raylib::matrix :count 2 :offset
                  128)
                 (raylib::left-lens-center :float :count 2 :offset
                  256)
                 (raylib::right-lens-center :float :count 2 :offset
                  264)
                 (raylib::left-screen-center :float :count 2 :offset
                  272)
                 (raylib::right-screen-center :float :count 2 :offset
                  280)
                 (raylib::scale :float :count 2 :offset 288)
                 (raylib::scale-in :float :count 2 :offset 296))

(cffi:defctype raylib::vr-stereo-config
               (:struct raylib::vr-stereo-config))

(declaim (inline raylib::begin-vr-stereo-mode))

(cffi:defcfun ("__claw__BeginVrStereoMode"
               raylib::begin-vr-stereo-mode)
              :void
              (raylib::config (:pointer raylib::vr-stereo-config)))

(cffi:defctype raylib::camera (:struct raylib::camera-3d))

(declaim (inline raylib::camera-move-forward))

(cffi:defcfun ("CameraMoveForward" raylib::camera-move-forward)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::distance :float)
              (raylib::move-in-world-plane :bool))

(declaim (inline raylib::camera-move-right))

(cffi:defcfun ("CameraMoveRight" raylib::camera-move-right)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::distance :float)
              (raylib::move-in-world-plane :bool))

(declaim (inline raylib::camera-move-to-target))

(cffi:defcfun ("CameraMoveToTarget" raylib::camera-move-to-target)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::delta :float))

(declaim (inline raylib::camera-move-up))

(cffi:defcfun ("CameraMoveUp" raylib::camera-move-up)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::distance :float))

(declaim (inline raylib::camera-pitch))

(cffi:defcfun ("CameraPitch" raylib::camera-pitch)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::angle :float)
              (raylib::lock-view :bool)
              (raylib::rotate-around-target :bool)
              (raylib::rotate-up :bool))

(declaim (inline raylib::camera-roll))

(cffi:defcfun ("CameraRoll" raylib::camera-roll)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::angle :float))

(declaim (inline raylib::camera-yaw))

(cffi:defcfun ("CameraYaw" raylib::camera-yaw)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::angle :float)
              (raylib::rotate-around-target :bool))

(declaim (inline raylib::change-directory))

(cffi:defcfun ("ChangeDirectory" raylib::change-directory)
              :bool
              (raylib::dir :string))

(cffi:defcstruct (raylib::bounding-box :size 24)
                 (raylib::min raylib::vector3 :offset 0)
                 (raylib::max raylib::vector3 :offset 12))

(cffi:defctype raylib::bounding-box (:struct raylib::bounding-box))

(declaim (inline raylib::check-collision-box-sphere))

(cffi:defcfun ("__claw__CheckCollisionBoxSphere"
               raylib::check-collision-box-sphere)
              :bool
              (raylib::box (:pointer raylib::bounding-box))
              (raylib::center (:pointer raylib::vector3))
              (raylib::radius :float))

(declaim (inline raylib::check-collision-boxes))

(cffi:defcfun ("__claw__CheckCollisionBoxes"
               raylib::check-collision-boxes)
              :bool
              (raylib::box1 (:pointer raylib::bounding-box))
              (raylib::box2 (:pointer raylib::bounding-box)))

(cffi:defcstruct (raylib::rectangle :size 16)
                 (raylib::x :float :offset 0)
                 (raylib::y :float :offset 4)
                 (raylib::width :float :offset 8)
                 (raylib::height :float :offset 12))

(cffi:defctype raylib::rectangle (:struct raylib::rectangle))

(declaim (inline raylib::check-collision-circle-rec))

(cffi:defcfun ("__claw__CheckCollisionCircleRec"
               raylib::check-collision-circle-rec)
              :bool
              (raylib::center (:pointer raylib::vector2))
              (raylib::radius :float)
              (raylib::rec (:pointer raylib::rectangle)))

(declaim (inline raylib::check-collision-circles))

(cffi:defcfun ("__claw__CheckCollisionCircles"
               raylib::check-collision-circles)
              :bool
              (raylib::center1 (:pointer raylib::vector2))
              (raylib::radius1 :float)
              (raylib::center2 (:pointer raylib::vector2))
              (raylib::radius2 :float))

(declaim (inline raylib::check-collision-lines))

(cffi:defcfun ("__claw__CheckCollisionLines"
               raylib::check-collision-lines)
              :bool
              (raylib::start-pos1 (:pointer raylib::vector2))
              (raylib::end-pos1 (:pointer raylib::vector2))
              (raylib::start-pos2 (:pointer raylib::vector2))
              (raylib::end-pos2 (:pointer raylib::vector2))
              (raylib::collision-point (:pointer raylib::vector2)))

(declaim (inline raylib::check-collision-point-circle))

(cffi:defcfun ("__claw__CheckCollisionPointCircle"
               raylib::check-collision-point-circle)
              :bool
              (raylib::point (:pointer raylib::vector2))
              (raylib::center (:pointer raylib::vector2))
              (raylib::radius :float))

(declaim (inline raylib::check-collision-point-line))

(cffi:defcfun ("__claw__CheckCollisionPointLine"
               raylib::check-collision-point-line)
              :bool
              (raylib::point (:pointer raylib::vector2))
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::p2 (:pointer raylib::vector2))
              (raylib::threshold :int))

(declaim (inline raylib::check-collision-point-poly))

(cffi:defcfun ("__claw__CheckCollisionPointPoly"
               raylib::check-collision-point-poly)
              :bool
              (raylib::point (:pointer raylib::vector2))
              (raylib::points (:pointer raylib::vector2))
              (raylib::point-count :int))

(declaim (inline raylib::check-collision-point-rec))

(cffi:defcfun ("__claw__CheckCollisionPointRec"
               raylib::check-collision-point-rec)
              :bool
              (raylib::point (:pointer raylib::vector2))
              (raylib::rec (:pointer raylib::rectangle)))

(declaim (inline raylib::check-collision-point-triangle))

(cffi:defcfun ("__claw__CheckCollisionPointTriangle"
               raylib::check-collision-point-triangle)
              :bool
              (raylib::point (:pointer raylib::vector2))
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::p2 (:pointer raylib::vector2))
              (raylib::p3 (:pointer raylib::vector2)))

(declaim (inline raylib::check-collision-recs))

(cffi:defcfun ("__claw__CheckCollisionRecs"
               raylib::check-collision-recs)
              :bool
              (raylib::rec1 (:pointer raylib::rectangle))
              (raylib::rec2 (:pointer raylib::rectangle)))

(declaim (inline raylib::check-collision-spheres))

(cffi:defcfun ("__claw__CheckCollisionSpheres"
               raylib::check-collision-spheres)
              :bool
              (raylib::center1 (:pointer raylib::vector3))
              (raylib::radius1 :float)
              (raylib::center2 (:pointer raylib::vector3))
              (raylib::radius2 :float))

(declaim (inline raylib::clamp))

(cffi:defcfun ("__claw__Clamp" raylib::clamp)
              :float
              (raylib::value :float)
              (raylib::min :float)
              (raylib::max :float))

(cffi:defcstruct (raylib::color :size 4)
                 (raylib::r :unsigned-char :offset 0)
                 (raylib::g :unsigned-char :offset 1)
                 (raylib::b :unsigned-char :offset 2)
                 (raylib::a :unsigned-char :offset 3))

(cffi:defctype raylib::color (:struct raylib::color))

(declaim (inline raylib::clear-background))

(cffi:defcfun ("__claw__ClearBackground" raylib::clear-background)
              :void
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::clear-window-state))

(cffi:defcfun ("ClearWindowState" raylib::clear-window-state)
              :void
              (raylib::flags :unsigned-int))

(declaim (inline raylib::close-audio-device))

(cffi:defcfun ("CloseAudioDevice" raylib::close-audio-device) :void)

(declaim (inline raylib::close-window))

(cffi:defcfun ("CloseWindow" raylib::close-window) :void)

(declaim (inline raylib::codepoint-to-utf8))

(cffi:defcfun ("CodepointToUTF8" raylib::codepoint-to-utf8)
              :string
              (raylib::codepoint :int)
              (raylib::utf8size (:pointer :int)))

(declaim (inline raylib::color-alpha))

(cffi:defcfun ("__claw__ColorAlpha" raylib::color-alpha)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::color (:pointer raylib::color))
              (raylib::alpha :float))

(declaim (inline raylib::color-alpha-blend))

(cffi:defcfun ("__claw__ColorAlphaBlend" raylib::color-alpha-blend)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::dst (:pointer raylib::color))
              (raylib::src (:pointer raylib::color))
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::color-brightness))

(cffi:defcfun ("__claw__ColorBrightness" raylib::color-brightness)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::color (:pointer raylib::color))
              (raylib::factor :float))

(declaim (inline raylib::color-contrast))

(cffi:defcfun ("__claw__ColorContrast" raylib::color-contrast)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::color (:pointer raylib::color))
              (raylib::contrast :float))

(declaim (inline raylib::color-from-hsv))

(cffi:defcfun ("__claw__ColorFromHSV" raylib::color-from-hsv)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::hue :float)
              (raylib::saturation :float)
              (raylib::value :float))

(cffi:defcstruct (raylib::vector4 :size 16)
                 (raylib::x :float :offset 0)
                 (raylib::y :float :offset 4)
                 (raylib::z :float :offset 8)
                 (raylib::w :float :offset 12))

(cffi:defctype raylib::vector4 (:struct raylib::vector4))

(declaim (inline raylib::color-from-normalized))

(cffi:defcfun ("__claw__ColorFromNormalized"
               raylib::color-from-normalized)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::normalized (:pointer raylib::vector4)))

(declaim (inline raylib::color-normalize))

(cffi:defcfun ("__claw__ColorNormalize" raylib::color-normalize)
              (:pointer raylib::vector4)
              (raylib::%%claw-result- (:pointer raylib::vector4))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::color-tint))

(cffi:defcfun ("__claw__ColorTint" raylib::color-tint)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::color (:pointer raylib::color))
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::color-to-hsv))

(cffi:defcfun ("__claw__ColorToHSV" raylib::color-to-hsv)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::color-to-int))

(cffi:defcfun ("__claw__ColorToInt" raylib::color-to-int)
              :int
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::compress-data))

(cffi:defcfun ("CompressData" raylib::compress-data)
              (:pointer :unsigned-char)
              (raylib::data (:pointer :unsigned-char))
              (raylib::data-size :int)
              (raylib::comp-data-size (:pointer :int)))

(declaim (inline raylib::decode-data-base64))

(cffi:defcfun ("DecodeDataBase64" raylib::decode-data-base64)
              (:pointer :unsigned-char)
              (raylib::data (:pointer :unsigned-char))
              (raylib::output-size (:pointer :int)))

(declaim (inline raylib::decompress-data))

(cffi:defcfun ("DecompressData" raylib::decompress-data)
              (:pointer :unsigned-char)
              (raylib::comp-data (:pointer :unsigned-char))
              (raylib::comp-data-size :int)
              (raylib::data-size (:pointer :int)))

(declaim (inline raylib::detach-audio-mixed-processor))

(cffi:defcfun ("DetachAudioMixedProcessor"
               raylib::detach-audio-mixed-processor)
              :void
              (raylib::processor raylib::audio-callback))

(declaim (inline raylib::detach-audio-stream-processor))

(cffi:defcfun ("__claw__DetachAudioStreamProcessor"
               raylib::detach-audio-stream-processor)
              :void
              (raylib::stream (:pointer raylib::audio-stream))
              (raylib::processor raylib::audio-callback))

(declaim (inline raylib::directory-exists))

(cffi:defcfun ("DirectoryExists" raylib::directory-exists)
              :bool
              (raylib::dir-path :string))

(declaim (inline raylib::disable-cursor))

(cffi:defcfun ("DisableCursor" raylib::disable-cursor) :void)

(declaim (inline raylib::disable-event-waiting))

(cffi:defcfun ("DisableEventWaiting" raylib::disable-event-waiting)
              :void)

(cffi:defctype raylib::texture-2d (:struct raylib::texture))

(declaim (inline raylib::draw-billboard))

(cffi:defcfun ("__claw__DrawBillboard" raylib::draw-billboard)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::position (:pointer raylib::vector3))
              (raylib::size :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-billboard-pro))

(cffi:defcfun ("__claw__DrawBillboardPro" raylib::draw-billboard-pro)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::source (:pointer raylib::rectangle))
              (raylib::position (:pointer raylib::vector3))
              (raylib::up (:pointer raylib::vector3))
              (raylib::size (:pointer raylib::vector2))
              (raylib::origin (:pointer raylib::vector2))
              (raylib::rotation :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-billboard-rec))

(cffi:defcfun ("__claw__DrawBillboardRec" raylib::draw-billboard-rec)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::source (:pointer raylib::rectangle))
              (raylib::position (:pointer raylib::vector3))
              (raylib::size (:pointer raylib::vector2))
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-bounding-box))

(cffi:defcfun ("__claw__DrawBoundingBox" raylib::draw-bounding-box)
              :void
              (raylib::box (:pointer raylib::bounding-box))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-capsule))

(cffi:defcfun ("__claw__DrawCapsule" raylib::draw-capsule)
              :void
              (raylib::start-pos (:pointer raylib::vector3))
              (raylib::end-pos (:pointer raylib::vector3))
              (raylib::radius :float)
              (raylib::slices :int)
              (raylib::rings :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-capsule-wires))

(cffi:defcfun ("__claw__DrawCapsuleWires" raylib::draw-capsule-wires)
              :void
              (raylib::start-pos (:pointer raylib::vector3))
              (raylib::end-pos (:pointer raylib::vector3))
              (raylib::radius :float)
              (raylib::slices :int)
              (raylib::rings :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-circle))

(cffi:defcfun ("__claw__DrawCircle" raylib::draw-circle)
              :void
              (raylib::center-x :int)
              (raylib::center-y :int)
              (raylib::radius :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-circle-3d))

(cffi:defcfun ("__claw__DrawCircle3D" raylib::draw-circle-3d)
              :void
              (raylib::center (:pointer raylib::vector3))
              (raylib::radius :float)
              (raylib::rotation-axis (:pointer raylib::vector3))
              (raylib::rotation-angle :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-circle-gradient))

(cffi:defcfun ("__claw__DrawCircleGradient"
               raylib::draw-circle-gradient)
              :void
              (raylib::center-x :int)
              (raylib::center-y :int)
              (raylib::radius :float)
              (raylib::color1 (:pointer raylib::color))
              (raylib::color2 (:pointer raylib::color)))

(declaim (inline raylib::draw-circle-lines))

(cffi:defcfun ("__claw__DrawCircleLines" raylib::draw-circle-lines)
              :void
              (raylib::center-x :int)
              (raylib::center-y :int)
              (raylib::radius :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-circle-lines-v))

(cffi:defcfun ("__claw__DrawCircleLinesV"
               raylib::draw-circle-lines-v)
              :void
              (raylib::center (:pointer raylib::vector2))
              (raylib::radius :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-circle-sector))

(cffi:defcfun ("__claw__DrawCircleSector" raylib::draw-circle-sector)
              :void
              (raylib::center (:pointer raylib::vector2))
              (raylib::radius :float)
              (raylib::start-angle :float)
              (raylib::end-angle :float)
              (raylib::segments :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-circle-sector-lines))

(cffi:defcfun ("__claw__DrawCircleSectorLines"
               raylib::draw-circle-sector-lines)
              :void
              (raylib::center (:pointer raylib::vector2))
              (raylib::radius :float)
              (raylib::start-angle :float)
              (raylib::end-angle :float)
              (raylib::segments :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-circle-v))

(cffi:defcfun ("__claw__DrawCircleV" raylib::draw-circle-v)
              :void
              (raylib::center (:pointer raylib::vector2))
              (raylib::radius :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-cube))

(cffi:defcfun ("__claw__DrawCube" raylib::draw-cube)
              :void
              (raylib::position (:pointer raylib::vector3))
              (raylib::width :float)
              (raylib::height :float)
              (raylib::length :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-cube-v))

(cffi:defcfun ("__claw__DrawCubeV" raylib::draw-cube-v)
              :void
              (raylib::position (:pointer raylib::vector3))
              (raylib::size (:pointer raylib::vector3))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-cube-wires))

(cffi:defcfun ("__claw__DrawCubeWires" raylib::draw-cube-wires)
              :void
              (raylib::position (:pointer raylib::vector3))
              (raylib::width :float)
              (raylib::height :float)
              (raylib::length :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-cube-wires-v))

(cffi:defcfun ("__claw__DrawCubeWiresV" raylib::draw-cube-wires-v)
              :void
              (raylib::position (:pointer raylib::vector3))
              (raylib::size (:pointer raylib::vector3))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-cylinder))

(cffi:defcfun ("__claw__DrawCylinder" raylib::draw-cylinder)
              :void
              (raylib::position (:pointer raylib::vector3))
              (raylib::radius-top :float)
              (raylib::radius-bottom :float)
              (raylib::height :float)
              (raylib::slices :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-cylinder-ex))

(cffi:defcfun ("__claw__DrawCylinderEx" raylib::draw-cylinder-ex)
              :void
              (raylib::start-pos (:pointer raylib::vector3))
              (raylib::end-pos (:pointer raylib::vector3))
              (raylib::start-radius :float)
              (raylib::end-radius :float)
              (raylib::sides :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-cylinder-wires))

(cffi:defcfun ("__claw__DrawCylinderWires"
               raylib::draw-cylinder-wires)
              :void
              (raylib::position (:pointer raylib::vector3))
              (raylib::radius-top :float)
              (raylib::radius-bottom :float)
              (raylib::height :float)
              (raylib::slices :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-cylinder-wires-ex))

(cffi:defcfun ("__claw__DrawCylinderWiresEx"
               raylib::draw-cylinder-wires-ex)
              :void
              (raylib::start-pos (:pointer raylib::vector3))
              (raylib::end-pos (:pointer raylib::vector3))
              (raylib::start-radius :float)
              (raylib::end-radius :float)
              (raylib::sides :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-ellipse))

(cffi:defcfun ("__claw__DrawEllipse" raylib::draw-ellipse)
              :void
              (raylib::center-x :int)
              (raylib::center-y :int)
              (raylib::radius-h :float)
              (raylib::radius-v :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-ellipse-lines))

(cffi:defcfun ("__claw__DrawEllipseLines" raylib::draw-ellipse-lines)
              :void
              (raylib::center-x :int)
              (raylib::center-y :int)
              (raylib::radius-h :float)
              (raylib::radius-v :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-fps))

(cffi:defcfun ("DrawFPS" raylib::draw-fps)
              :void
              (raylib::pos-x :int)
              (raylib::pos-y :int))

(declaim (inline raylib::draw-grid))

(cffi:defcfun ("DrawGrid" raylib::draw-grid)
              :void
              (raylib::slices :int)
              (raylib::spacing :float))

(declaim (inline raylib::draw-line))

(cffi:defcfun ("__claw__DrawLine" raylib::draw-line)
              :void
              (raylib::start-pos-x :int)
              (raylib::start-pos-y :int)
              (raylib::end-pos-x :int)
              (raylib::end-pos-y :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-line-3d))

(cffi:defcfun ("__claw__DrawLine3D" raylib::draw-line-3d)
              :void
              (raylib::start-pos (:pointer raylib::vector3))
              (raylib::end-pos (:pointer raylib::vector3))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-line-bezier))

(cffi:defcfun ("__claw__DrawLineBezier" raylib::draw-line-bezier)
              :void
              (raylib::start-pos (:pointer raylib::vector2))
              (raylib::end-pos (:pointer raylib::vector2))
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-line-ex))

(cffi:defcfun ("__claw__DrawLineEx" raylib::draw-line-ex)
              :void
              (raylib::start-pos (:pointer raylib::vector2))
              (raylib::end-pos (:pointer raylib::vector2))
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-line-strip))

(cffi:defcfun ("__claw__DrawLineStrip" raylib::draw-line-strip)
              :void
              (raylib::points (:pointer raylib::vector2))
              (raylib::point-count :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-line-v))

(cffi:defcfun ("__claw__DrawLineV" raylib::draw-line-v)
              :void
              (raylib::start-pos (:pointer raylib::vector2))
              (raylib::end-pos (:pointer raylib::vector2))
              (raylib::color (:pointer raylib::color)))

(cffi:defcstruct (raylib::mesh :size 112)
                 (raylib::vertex-count :int :offset 0)
                 (raylib::triangle-count :int :offset 4)
                 (raylib::vertices (:pointer :float) :offset 8)
                 (raylib::texcoords (:pointer :float) :offset 16)
                 (raylib::texcoords2 (:pointer :float) :offset 24)
                 (raylib::normals (:pointer :float) :offset 32)
                 (raylib::tangents (:pointer :float) :offset 40)
                 (raylib::colors (:pointer :unsigned-char) :offset
                  48)
                 (raylib::indices (:pointer :unsigned-short) :offset
                  56)
                 (raylib::anim-vertices (:pointer :float) :offset 64)
                 (raylib::anim-normals (:pointer :float) :offset 72)
                 (raylib::bone-ids (:pointer :unsigned-char) :offset
                  80)
                 (raylib::bone-weights (:pointer :float) :offset 88)
                 (raylib::vao-id :unsigned-int :offset 96)
                 (raylib::vbo-id (:pointer :unsigned-int) :offset
                  104))

(cffi:defctype raylib::mesh (:struct raylib::mesh))

(cffi:defcstruct (raylib::material-map :size 28)
                 (raylib::texture raylib::texture-2d :offset 0)
                 (raylib::color raylib::color :offset 20)
                 (raylib::value :float :offset 24))

(cffi:defctype raylib::material-map (:struct raylib::material-map))

(cffi:defcstruct (raylib::material :size 40)
                 (raylib::shader raylib::shader :offset 0)
                 (raylib::maps (:pointer raylib::material-map)
                  :offset 16)
                 (raylib::params :float :count 4 :offset 24))

(cffi:defctype raylib::material (:struct raylib::material))

(declaim (inline raylib::draw-mesh))

(cffi:defcfun ("__claw__DrawMesh" raylib::draw-mesh)
              :void
              (raylib::mesh (:pointer raylib::mesh))
              (raylib::material (:pointer raylib::material))
              (raylib::transform (:pointer raylib::matrix)))

(declaim (inline raylib::draw-mesh-instanced))

(cffi:defcfun ("__claw__DrawMeshInstanced"
               raylib::draw-mesh-instanced)
              :void
              (raylib::mesh (:pointer raylib::mesh))
              (raylib::material (:pointer raylib::material))
              (raylib::transforms (:pointer raylib::matrix))
              (raylib::instances :int))

(cffi:defcstruct (raylib::bone-info :size 36)
                 (raylib::name :char :count 32 :offset 0)
                 (raylib::parent :int :offset 32))

(cffi:defctype raylib::bone-info (:struct raylib::bone-info))

(cffi:defctype raylib::quaternion (:struct raylib::vector4))

(cffi:defcstruct (raylib::transform :size 40)
                 (raylib::translation raylib::vector3 :offset 0)
                 (raylib::rotation raylib::quaternion :offset 12)
                 (raylib::scale raylib::vector3 :offset 28))

(cffi:defctype raylib::transform (:struct raylib::transform))

(cffi:defcstruct (raylib::model :size 120)
                 (raylib::transform raylib::matrix :offset 0)
                 (raylib::mesh-count :int :offset 64)
                 (raylib::material-count :int :offset 68)
                 (raylib::meshes (:pointer raylib::mesh) :offset 72)
                 (raylib::materials (:pointer raylib::material)
                  :offset 80)
                 (raylib::mesh-material (:pointer :int) :offset 88)
                 (raylib::bone-count :int :offset 96)
                 (raylib::bones (:pointer raylib::bone-info) :offset
                  104)
                 (raylib::bind-pose (:pointer raylib::transform)
                  :offset 112))

(cffi:defctype raylib::model (:struct raylib::model))

(declaim (inline raylib::draw-model))

(cffi:defcfun ("__claw__DrawModel" raylib::draw-model)
              :void
              (raylib::model (:pointer raylib::model))
              (raylib::position (:pointer raylib::vector3))
              (raylib::scale :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-model-ex))

(cffi:defcfun ("__claw__DrawModelEx" raylib::draw-model-ex)
              :void
              (raylib::model (:pointer raylib::model))
              (raylib::position (:pointer raylib::vector3))
              (raylib::rotation-axis (:pointer raylib::vector3))
              (raylib::rotation-angle :float)
              (raylib::scale (:pointer raylib::vector3))
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-model-wires))

(cffi:defcfun ("__claw__DrawModelWires" raylib::draw-model-wires)
              :void
              (raylib::model (:pointer raylib::model))
              (raylib::position (:pointer raylib::vector3))
              (raylib::scale :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-model-wires-ex))

(cffi:defcfun ("__claw__DrawModelWiresEx"
               raylib::draw-model-wires-ex)
              :void
              (raylib::model (:pointer raylib::model))
              (raylib::position (:pointer raylib::vector3))
              (raylib::rotation-axis (:pointer raylib::vector3))
              (raylib::rotation-angle :float)
              (raylib::scale (:pointer raylib::vector3))
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-pixel))

(cffi:defcfun ("__claw__DrawPixel" raylib::draw-pixel)
              :void
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-pixel-v))

(cffi:defcfun ("__claw__DrawPixelV" raylib::draw-pixel-v)
              :void
              (raylib::position (:pointer raylib::vector2))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-plane))

(cffi:defcfun ("__claw__DrawPlane" raylib::draw-plane)
              :void
              (raylib::center-pos (:pointer raylib::vector3))
              (raylib::size (:pointer raylib::vector2))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-point-3d))

(cffi:defcfun ("__claw__DrawPoint3D" raylib::draw-point-3d)
              :void
              (raylib::position (:pointer raylib::vector3))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-poly))

(cffi:defcfun ("__claw__DrawPoly" raylib::draw-poly)
              :void
              (raylib::center (:pointer raylib::vector2))
              (raylib::sides :int)
              (raylib::radius :float)
              (raylib::rotation :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-poly-lines))

(cffi:defcfun ("__claw__DrawPolyLines" raylib::draw-poly-lines)
              :void
              (raylib::center (:pointer raylib::vector2))
              (raylib::sides :int)
              (raylib::radius :float)
              (raylib::rotation :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-poly-lines-ex))

(cffi:defcfun ("__claw__DrawPolyLinesEx" raylib::draw-poly-lines-ex)
              :void
              (raylib::center (:pointer raylib::vector2))
              (raylib::sides :int)
              (raylib::radius :float)
              (raylib::rotation :float)
              (raylib::line-thick :float)
              (raylib::color (:pointer raylib::color)))

(cffi:defcstruct (raylib::ray :size 24)
                 (raylib::position raylib::vector3 :offset 0)
                 (raylib::direction raylib::vector3 :offset 12))

(cffi:defctype raylib::ray (:struct raylib::ray))

(declaim (inline raylib::draw-ray))

(cffi:defcfun ("__claw__DrawRay" raylib::draw-ray)
              :void
              (raylib::ray (:pointer raylib::ray))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle))

(cffi:defcfun ("__claw__DrawRectangle" raylib::draw-rectangle)
              :void
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::width :int)
              (raylib::height :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-gradient-ex))

(cffi:defcfun ("__claw__DrawRectangleGradientEx"
               raylib::draw-rectangle-gradient-ex)
              :void
              (raylib::rec (:pointer raylib::rectangle))
              (raylib::col1 (:pointer raylib::color))
              (raylib::col2 (:pointer raylib::color))
              (raylib::col3 (:pointer raylib::color))
              (raylib::col4 (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-gradient-h))

(cffi:defcfun ("__claw__DrawRectangleGradientH"
               raylib::draw-rectangle-gradient-h)
              :void
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::width :int)
              (raylib::height :int)
              (raylib::color1 (:pointer raylib::color))
              (raylib::color2 (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-gradient-v))

(cffi:defcfun ("__claw__DrawRectangleGradientV"
               raylib::draw-rectangle-gradient-v)
              :void
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::width :int)
              (raylib::height :int)
              (raylib::color1 (:pointer raylib::color))
              (raylib::color2 (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-lines))

(cffi:defcfun ("__claw__DrawRectangleLines"
               raylib::draw-rectangle-lines)
              :void
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::width :int)
              (raylib::height :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-lines-ex))

(cffi:defcfun ("__claw__DrawRectangleLinesEx"
               raylib::draw-rectangle-lines-ex)
              :void
              (raylib::rec (:pointer raylib::rectangle))
              (raylib::line-thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-pro))

(cffi:defcfun ("__claw__DrawRectanglePro" raylib::draw-rectangle-pro)
              :void
              (raylib::rec (:pointer raylib::rectangle))
              (raylib::origin (:pointer raylib::vector2))
              (raylib::rotation :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-rec))

(cffi:defcfun ("__claw__DrawRectangleRec" raylib::draw-rectangle-rec)
              :void
              (raylib::rec (:pointer raylib::rectangle))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-rounded))

(cffi:defcfun ("__claw__DrawRectangleRounded"
               raylib::draw-rectangle-rounded)
              :void
              (raylib::rec (:pointer raylib::rectangle))
              (raylib::roundness :float)
              (raylib::segments :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-rounded-lines))

(cffi:defcfun ("__claw__DrawRectangleRoundedLines"
               raylib::draw-rectangle-rounded-lines)
              :void
              (raylib::rec (:pointer raylib::rectangle))
              (raylib::roundness :float)
              (raylib::segments :int)
              (raylib::line-thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-rectangle-v))

(cffi:defcfun ("__claw__DrawRectangleV" raylib::draw-rectangle-v)
              :void
              (raylib::position (:pointer raylib::vector2))
              (raylib::size (:pointer raylib::vector2))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-ring))

(cffi:defcfun ("__claw__DrawRing" raylib::draw-ring)
              :void
              (raylib::center (:pointer raylib::vector2))
              (raylib::inner-radius :float)
              (raylib::outer-radius :float)
              (raylib::start-angle :float)
              (raylib::end-angle :float)
              (raylib::segments :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-ring-lines))

(cffi:defcfun ("__claw__DrawRingLines" raylib::draw-ring-lines)
              :void
              (raylib::center (:pointer raylib::vector2))
              (raylib::inner-radius :float)
              (raylib::outer-radius :float)
              (raylib::start-angle :float)
              (raylib::end-angle :float)
              (raylib::segments :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-sphere))

(cffi:defcfun ("__claw__DrawSphere" raylib::draw-sphere)
              :void
              (raylib::center-pos (:pointer raylib::vector3))
              (raylib::radius :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-sphere-ex))

(cffi:defcfun ("__claw__DrawSphereEx" raylib::draw-sphere-ex)
              :void
              (raylib::center-pos (:pointer raylib::vector3))
              (raylib::radius :float)
              (raylib::rings :int)
              (raylib::slices :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-sphere-wires))

(cffi:defcfun ("__claw__DrawSphereWires" raylib::draw-sphere-wires)
              :void
              (raylib::center-pos (:pointer raylib::vector3))
              (raylib::radius :float)
              (raylib::rings :int)
              (raylib::slices :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-basis))

(cffi:defcfun ("__claw__DrawSplineBasis" raylib::draw-spline-basis)
              :void
              (raylib::points (:pointer raylib::vector2))
              (raylib::point-count :int)
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-bezier-cubic))

(cffi:defcfun ("__claw__DrawSplineBezierCubic"
               raylib::draw-spline-bezier-cubic)
              :void
              (raylib::points (:pointer raylib::vector2))
              (raylib::point-count :int)
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-bezier-quadratic))

(cffi:defcfun ("__claw__DrawSplineBezierQuadratic"
               raylib::draw-spline-bezier-quadratic)
              :void
              (raylib::points (:pointer raylib::vector2))
              (raylib::point-count :int)
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-catmull-rom))

(cffi:defcfun ("__claw__DrawSplineCatmullRom"
               raylib::draw-spline-catmull-rom)
              :void
              (raylib::points (:pointer raylib::vector2))
              (raylib::point-count :int)
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-linear))

(cffi:defcfun ("__claw__DrawSplineLinear" raylib::draw-spline-linear)
              :void
              (raylib::points (:pointer raylib::vector2))
              (raylib::point-count :int)
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-segment-basis))

(cffi:defcfun ("__claw__DrawSplineSegmentBasis"
               raylib::draw-spline-segment-basis)
              :void
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::p2 (:pointer raylib::vector2))
              (raylib::p3 (:pointer raylib::vector2))
              (raylib::p4 (:pointer raylib::vector2))
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-segment-bezier-cubic))

(cffi:defcfun ("__claw__DrawSplineSegmentBezierCubic"
               raylib::draw-spline-segment-bezier-cubic)
              :void
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::c2 (:pointer raylib::vector2))
              (raylib::c3 (:pointer raylib::vector2))
              (raylib::p4 (:pointer raylib::vector2))
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-segment-bezier-quadratic))

(cffi:defcfun ("__claw__DrawSplineSegmentBezierQuadratic"
               raylib::draw-spline-segment-bezier-quadratic)
              :void
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::c2 (:pointer raylib::vector2))
              (raylib::p3 (:pointer raylib::vector2))
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-segment-catmull-rom))

(cffi:defcfun ("__claw__DrawSplineSegmentCatmullRom"
               raylib::draw-spline-segment-catmull-rom)
              :void
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::p2 (:pointer raylib::vector2))
              (raylib::p3 (:pointer raylib::vector2))
              (raylib::p4 (:pointer raylib::vector2))
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-spline-segment-linear))

(cffi:defcfun ("__claw__DrawSplineSegmentLinear"
               raylib::draw-spline-segment-linear)
              :void
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::p2 (:pointer raylib::vector2))
              (raylib::thick :float)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-text))

(cffi:defcfun ("__claw__DrawText" raylib::draw-text)
              :void
              (raylib::text :string)
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::font-size :int)
              (raylib::color (:pointer raylib::color)))

(cffi:defcstruct (raylib::image :size 24)
                 (raylib::data (:pointer :void) :offset 0)
                 (raylib::width :int :offset 8)
                 (raylib::height :int :offset 12)
                 (raylib::mipmaps :int :offset 16)
                 (raylib::format :int :offset 20))

(cffi:defctype raylib::image (:struct raylib::image))

(cffi:defcstruct (raylib::glyph-info :size 40)
                 (raylib::value :int :offset 0)
                 (raylib::offset-x :int :offset 4)
                 (raylib::offset-y :int :offset 8)
                 (raylib::advance-x :int :offset 12)
                 (raylib::image raylib::image :offset 16))

(cffi:defctype raylib::glyph-info (:struct raylib::glyph-info))

(cffi:defcstruct (raylib::font :size 48)
                 (raylib::base-size :int :offset 0)
                 (raylib::glyph-count :int :offset 4)
                 (raylib::glyph-padding :int :offset 8)
                 (raylib::texture raylib::texture-2d :offset 12)
                 (raylib::recs (:pointer raylib::rectangle) :offset
                  32)
                 (raylib::glyphs (:pointer raylib::glyph-info)
                  :offset 40))

(cffi:defctype raylib::font (:struct raylib::font))

(declaim (inline raylib::draw-text-codepoint))

(cffi:defcfun ("__claw__DrawTextCodepoint"
               raylib::draw-text-codepoint)
              :void
              (raylib::font (:pointer raylib::font))
              (raylib::codepoint :int)
              (raylib::position (:pointer raylib::vector2))
              (raylib::font-size :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-text-codepoints))

(cffi:defcfun ("__claw__DrawTextCodepoints"
               raylib::draw-text-codepoints)
              :void
              (raylib::font (:pointer raylib::font))
              (raylib::codepoints (:pointer :int))
              (raylib::codepoint-count :int)
              (raylib::position (:pointer raylib::vector2))
              (raylib::font-size :float)
              (raylib::spacing :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-text-ex))

(cffi:defcfun ("__claw__DrawTextEx" raylib::draw-text-ex)
              :void
              (raylib::font (:pointer raylib::font))
              (raylib::text :string)
              (raylib::position (:pointer raylib::vector2))
              (raylib::font-size :float)
              (raylib::spacing :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-text-pro))

(cffi:defcfun ("__claw__DrawTextPro" raylib::draw-text-pro)
              :void
              (raylib::font (:pointer raylib::font))
              (raylib::text :string)
              (raylib::position (:pointer raylib::vector2))
              (raylib::origin (:pointer raylib::vector2))
              (raylib::rotation :float)
              (raylib::font-size :float)
              (raylib::spacing :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-texture))

(cffi:defcfun ("__claw__DrawTexture" raylib::draw-texture)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-texture-ex))

(cffi:defcfun ("__claw__DrawTextureEx" raylib::draw-texture-ex)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::position (:pointer raylib::vector2))
              (raylib::rotation :float)
              (raylib::scale :float)
              (raylib::tint (:pointer raylib::color)))

(cffi:defcstruct (raylib::n-patch-info :size 36)
                 (raylib::source raylib::rectangle :offset 0)
                 (raylib::left :int :offset 16)
                 (raylib::top :int :offset 20)
                 (raylib::right :int :offset 24)
                 (raylib::bottom :int :offset 28)
                 (raylib::layout :int :offset 32))

(cffi:defctype raylib::n-patch-info (:struct raylib::n-patch-info))

(declaim (inline raylib::draw-texture-n-patch))

(cffi:defcfun ("__claw__DrawTextureNPatch"
               raylib::draw-texture-n-patch)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::n-patch-info (:pointer raylib::n-patch-info))
              (raylib::dest (:pointer raylib::rectangle))
              (raylib::origin (:pointer raylib::vector2))
              (raylib::rotation :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-texture-pro))

(cffi:defcfun ("__claw__DrawTexturePro" raylib::draw-texture-pro)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::source (:pointer raylib::rectangle))
              (raylib::dest (:pointer raylib::rectangle))
              (raylib::origin (:pointer raylib::vector2))
              (raylib::rotation :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-texture-rec))

(cffi:defcfun ("__claw__DrawTextureRec" raylib::draw-texture-rec)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::source (:pointer raylib::rectangle))
              (raylib::position (:pointer raylib::vector2))
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-texture-v))

(cffi:defcfun ("__claw__DrawTextureV" raylib::draw-texture-v)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::position (:pointer raylib::vector2))
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::draw-triangle))

(cffi:defcfun ("__claw__DrawTriangle" raylib::draw-triangle)
              :void
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2))
              (raylib::v3 (:pointer raylib::vector2))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-triangle-3d))

(cffi:defcfun ("__claw__DrawTriangle3D" raylib::draw-triangle-3d)
              :void
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3))
              (raylib::v3 (:pointer raylib::vector3))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-triangle-fan))

(cffi:defcfun ("__claw__DrawTriangleFan" raylib::draw-triangle-fan)
              :void
              (raylib::points (:pointer raylib::vector2))
              (raylib::point-count :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-triangle-lines))

(cffi:defcfun ("__claw__DrawTriangleLines"
               raylib::draw-triangle-lines)
              :void
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2))
              (raylib::v3 (:pointer raylib::vector2))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-triangle-strip))

(cffi:defcfun ("__claw__DrawTriangleStrip"
               raylib::draw-triangle-strip)
              :void
              (raylib::points (:pointer raylib::vector2))
              (raylib::point-count :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::draw-triangle-strip-3d))

(cffi:defcfun ("__claw__DrawTriangleStrip3D"
               raylib::draw-triangle-strip-3d)
              :void
              (raylib::points (:pointer raylib::vector3))
              (raylib::point-count :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::enable-cursor))

(cffi:defcfun ("EnableCursor" raylib::enable-cursor) :void)

(declaim (inline raylib::enable-event-waiting))

(cffi:defcfun ("EnableEventWaiting" raylib::enable-event-waiting)
              :void)

(declaim (inline raylib::encode-data-base64))

(cffi:defcfun ("EncodeDataBase64" raylib::encode-data-base64)
              :string
              (raylib::data (:pointer :unsigned-char))
              (raylib::data-size :int)
              (raylib::output-size (:pointer :int)))

(declaim (inline raylib::end-blend-mode))

(cffi:defcfun ("EndBlendMode" raylib::end-blend-mode) :void)

(declaim (inline raylib::end-drawing))

(cffi:defcfun ("EndDrawing" raylib::end-drawing) :void)

(declaim (inline raylib::end-mode-2d))

(cffi:defcfun ("EndMode2D" raylib::end-mode-2d) :void)

(declaim (inline raylib::end-mode-3d))

(cffi:defcfun ("EndMode3D" raylib::end-mode-3d) :void)

(declaim (inline raylib::end-scissor-mode))

(cffi:defcfun ("EndScissorMode" raylib::end-scissor-mode) :void)

(declaim (inline raylib::end-shader-mode))

(cffi:defcfun ("EndShaderMode" raylib::end-shader-mode) :void)

(declaim (inline raylib::end-texture-mode))

(cffi:defcfun ("EndTextureMode" raylib::end-texture-mode) :void)

(declaim (inline raylib::end-vr-stereo-mode))

(cffi:defcfun ("EndVrStereoMode" raylib::end-vr-stereo-mode) :void)

(cffi:defcstruct (raylib::automation-event :size 24)
                 (raylib::frame :unsigned-int :offset 0)
                 (raylib::type :unsigned-int :offset 4)
                 (raylib::params :int :count 4 :offset 8))

(cffi:defctype raylib::automation-event
               (:struct raylib::automation-event))

(cffi:defcstruct (raylib::automation-event-list :size 16)
                 (raylib::capacity :unsigned-int :offset 0)
                 (raylib::count :unsigned-int :offset 4)
                 (raylib::events (:pointer raylib::automation-event)
                  :offset 8))

(cffi:defctype raylib::automation-event-list
               (:struct raylib::automation-event-list))

(declaim (inline raylib::export-automation-event-list))

(cffi:defcfun ("__claw__ExportAutomationEventList"
               raylib::export-automation-event-list)
              :bool
              (raylib::list (:pointer raylib::automation-event-list))
              (raylib::file-name :string))

(declaim (inline raylib::export-data-as-code))

(cffi:defcfun ("ExportDataAsCode" raylib::export-data-as-code)
              :bool
              (raylib::data (:pointer :unsigned-char))
              (raylib::data-size :int)
              (raylib::file-name :string))

(declaim (inline raylib::export-font-as-code))

(cffi:defcfun ("__claw__ExportFontAsCode"
               raylib::export-font-as-code)
              :bool
              (raylib::font (:pointer raylib::font))
              (raylib::file-name :string))

(declaim (inline raylib::export-image))

(cffi:defcfun ("__claw__ExportImage" raylib::export-image)
              :bool
              (raylib::image (:pointer raylib::image))
              (raylib::file-name :string))

(declaim (inline raylib::export-image-as-code))

(cffi:defcfun ("__claw__ExportImageAsCode"
               raylib::export-image-as-code)
              :bool
              (raylib::image (:pointer raylib::image))
              (raylib::file-name :string))

(declaim (inline raylib::export-image-to-memory))

(cffi:defcfun ("__claw__ExportImageToMemory"
               raylib::export-image-to-memory)
              (:pointer :unsigned-char)
              (raylib::image (:pointer raylib::image))
              (raylib::file-type :string)
              (raylib::file-size (:pointer :int)))

(declaim (inline raylib::export-mesh))

(cffi:defcfun ("__claw__ExportMesh" raylib::export-mesh)
              :bool
              (raylib::mesh (:pointer raylib::mesh))
              (raylib::file-name :string))

(cffi:defcstruct (raylib::wave :size 24)
                 (raylib::frame-count :unsigned-int :offset 0)
                 (raylib::sample-rate :unsigned-int :offset 4)
                 (raylib::sample-size :unsigned-int :offset 8)
                 (raylib::channels :unsigned-int :offset 12)
                 (raylib::data (:pointer :void) :offset 16))

(cffi:defctype raylib::wave (:struct raylib::wave))

(declaim (inline raylib::export-wave))

(cffi:defcfun ("__claw__ExportWave" raylib::export-wave)
              :bool
              (raylib::wave (:pointer raylib::wave))
              (raylib::file-name :string))

(declaim (inline raylib::export-wave-as-code))

(cffi:defcfun ("__claw__ExportWaveAsCode"
               raylib::export-wave-as-code)
              :bool
              (raylib::wave (:pointer raylib::wave))
              (raylib::file-name :string))

(declaim (inline raylib::fade))

(cffi:defcfun ("__claw__Fade" raylib::fade)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::color (:pointer raylib::color))
              (raylib::alpha :float))

(declaim (inline raylib::file-exists))

(cffi:defcfun ("FileExists" raylib::file-exists)
              :bool
              (raylib::file-name :string))

(declaim (inline raylib::float-equals))

(cffi:defcfun ("__claw__FloatEquals" raylib::float-equals)
              :int
              (raylib::x :float)
              (raylib::y :float))

(declaim (inline raylib::gen-image-cellular))

(cffi:defcfun ("__claw__GenImageCellular" raylib::gen-image-cellular)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::width :int)
              (raylib::height :int)
              (raylib::tile-size :int))

(declaim (inline raylib::gen-image-checked))

(cffi:defcfun ("__claw__GenImageChecked" raylib::gen-image-checked)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::width :int)
              (raylib::height :int)
              (raylib::checks-x :int)
              (raylib::checks-y :int)
              (raylib::col1 (:pointer raylib::color))
              (raylib::col2 (:pointer raylib::color)))

(declaim (inline raylib::gen-image-color))

(cffi:defcfun ("__claw__GenImageColor" raylib::gen-image-color)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::width :int)
              (raylib::height :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::gen-image-font-atlas))

(cffi:defcfun ("__claw__GenImageFontAtlas"
               raylib::gen-image-font-atlas)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::glyphs (:pointer raylib::glyph-info))
              (raylib::glyph-recs
               (:pointer (:pointer raylib::rectangle)))
              (raylib::glyph-count :int)
              (raylib::font-size :int)
              (raylib::padding :int)
              (raylib::pack-method :int))

(declaim (inline raylib::gen-image-gradient-linear))

(cffi:defcfun ("__claw__GenImageGradientLinear"
               raylib::gen-image-gradient-linear)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::width :int)
              (raylib::height :int)
              (raylib::direction :int)
              (raylib::start (:pointer raylib::color))
              (raylib::end (:pointer raylib::color)))

(declaim (inline raylib::gen-image-gradient-radial))

(cffi:defcfun ("__claw__GenImageGradientRadial"
               raylib::gen-image-gradient-radial)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::width :int)
              (raylib::height :int)
              (raylib::density :float)
              (raylib::inner (:pointer raylib::color))
              (raylib::outer (:pointer raylib::color)))

(declaim (inline raylib::gen-image-gradient-square))

(cffi:defcfun ("__claw__GenImageGradientSquare"
               raylib::gen-image-gradient-square)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::width :int)
              (raylib::height :int)
              (raylib::density :float)
              (raylib::inner (:pointer raylib::color))
              (raylib::outer (:pointer raylib::color)))

(declaim (inline raylib::gen-image-perlin-noise))

(cffi:defcfun ("__claw__GenImagePerlinNoise"
               raylib::gen-image-perlin-noise)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::width :int)
              (raylib::height :int)
              (raylib::offset-x :int)
              (raylib::offset-y :int)
              (raylib::scale :float))

(declaim (inline raylib::gen-image-text))

(cffi:defcfun ("__claw__GenImageText" raylib::gen-image-text)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::width :int)
              (raylib::height :int)
              (raylib::text :string))

(declaim (inline raylib::gen-image-white-noise))

(cffi:defcfun ("__claw__GenImageWhiteNoise"
               raylib::gen-image-white-noise)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::width :int)
              (raylib::height :int)
              (raylib::factor :float))

(declaim (inline raylib::gen-mesh-cone))

(cffi:defcfun ("__claw__GenMeshCone" raylib::gen-mesh-cone)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::radius :float)
              (raylib::height :float)
              (raylib::slices :int))

(declaim (inline raylib::gen-mesh-cube))

(cffi:defcfun ("__claw__GenMeshCube" raylib::gen-mesh-cube)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::width :float)
              (raylib::height :float)
              (raylib::length :float))

(declaim (inline raylib::gen-mesh-cubicmap))

(cffi:defcfun ("__claw__GenMeshCubicmap" raylib::gen-mesh-cubicmap)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::cubicmap (:pointer raylib::image))
              (raylib::cube-size (:pointer raylib::vector3)))

(declaim (inline raylib::gen-mesh-cylinder))

(cffi:defcfun ("__claw__GenMeshCylinder" raylib::gen-mesh-cylinder)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::radius :float)
              (raylib::height :float)
              (raylib::slices :int))

(declaim (inline raylib::gen-mesh-heightmap))

(cffi:defcfun ("__claw__GenMeshHeightmap" raylib::gen-mesh-heightmap)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::heightmap (:pointer raylib::image))
              (raylib::size (:pointer raylib::vector3)))

(declaim (inline raylib::gen-mesh-hemi-sphere))

(cffi:defcfun ("__claw__GenMeshHemiSphere"
               raylib::gen-mesh-hemi-sphere)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::radius :float)
              (raylib::rings :int)
              (raylib::slices :int))

(declaim (inline raylib::gen-mesh-knot))

(cffi:defcfun ("__claw__GenMeshKnot" raylib::gen-mesh-knot)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::radius :float)
              (raylib::size :float)
              (raylib::rad-seg :int)
              (raylib::sides :int))

(declaim (inline raylib::gen-mesh-plane))

(cffi:defcfun ("__claw__GenMeshPlane" raylib::gen-mesh-plane)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::width :float)
              (raylib::length :float)
              (raylib::res-x :int)
              (raylib::res-z :int))

(declaim (inline raylib::gen-mesh-poly))

(cffi:defcfun ("__claw__GenMeshPoly" raylib::gen-mesh-poly)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::sides :int)
              (raylib::radius :float))

(declaim (inline raylib::gen-mesh-sphere))

(cffi:defcfun ("__claw__GenMeshSphere" raylib::gen-mesh-sphere)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::radius :float)
              (raylib::rings :int)
              (raylib::slices :int))

(declaim (inline raylib::gen-mesh-tangents))

(cffi:defcfun ("GenMeshTangents" raylib::gen-mesh-tangents)
              :void
              (raylib::mesh (:pointer raylib::mesh)))

(declaim (inline raylib::gen-mesh-torus))

(cffi:defcfun ("__claw__GenMeshTorus" raylib::gen-mesh-torus)
              (:pointer raylib::mesh)
              (raylib::%%claw-result- (:pointer raylib::mesh))
              (raylib::radius :float)
              (raylib::size :float)
              (raylib::rad-seg :int)
              (raylib::sides :int))

(declaim (inline raylib::gen-texture-mipmaps))

(cffi:defcfun ("GenTextureMipmaps" raylib::gen-texture-mipmaps)
              :void
              (raylib::texture (:pointer raylib::texture-2d)))

(declaim (inline raylib::get-application-directory))

(cffi:defcfun ("GetApplicationDirectory"
               raylib::get-application-directory)
              :string)

(declaim (inline raylib::get-camera-forward))

(cffi:defcfun ("__claw__GetCameraForward" raylib::get-camera-forward)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::camera (:pointer raylib::camera)))

(declaim (inline raylib::get-camera-matrix))

(cffi:defcfun ("__claw__GetCameraMatrix" raylib::get-camera-matrix)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::camera (:pointer raylib::camera)))

(declaim (inline raylib::get-camera-matrix-2d))

(cffi:defcfun ("__claw__GetCameraMatrix2D"
               raylib::get-camera-matrix-2d)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::camera (:pointer raylib::camera-2d)))

(declaim (inline raylib::get-camera-projection-matrix))

(cffi:defcfun ("__claw__GetCameraProjectionMatrix"
               raylib::get-camera-projection-matrix)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::camera (:pointer raylib::camera))
              (raylib::aspect :float))

(declaim (inline raylib::get-camera-right))

(cffi:defcfun ("__claw__GetCameraRight" raylib::get-camera-right)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::camera (:pointer raylib::camera)))

(declaim (inline raylib::get-camera-up))

(cffi:defcfun ("__claw__GetCameraUp" raylib::get-camera-up)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::camera (:pointer raylib::camera)))

(declaim (inline raylib::get-camera-view-matrix))

(cffi:defcfun ("__claw__GetCameraViewMatrix"
               raylib::get-camera-view-matrix)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::camera (:pointer raylib::camera)))

(declaim (inline raylib::get-char-pressed))

(cffi:defcfun ("GetCharPressed" raylib::get-char-pressed) :int)

(declaim (inline raylib::get-clipboard-text))

(cffi:defcfun ("GetClipboardText" raylib::get-clipboard-text) :string)

(declaim (inline raylib::get-codepoint))

(cffi:defcfun ("GetCodepoint" raylib::get-codepoint)
              :int
              (raylib::text :string)
              (raylib::codepoint-size (:pointer :int)))

(declaim (inline raylib::get-codepoint-count))

(cffi:defcfun ("GetCodepointCount" raylib::get-codepoint-count)
              :int
              (raylib::text :string))

(declaim (inline raylib::get-codepoint-next))

(cffi:defcfun ("GetCodepointNext" raylib::get-codepoint-next)
              :int
              (raylib::text :string)
              (raylib::codepoint-size (:pointer :int)))

(declaim (inline raylib::get-codepoint-previous))

(cffi:defcfun ("GetCodepointPrevious" raylib::get-codepoint-previous)
              :int
              (raylib::text :string)
              (raylib::codepoint-size (:pointer :int)))

(declaim (inline raylib::get-collision-rec))

(cffi:defcfun ("__claw__GetCollisionRec" raylib::get-collision-rec)
              (:pointer raylib::rectangle)
              (raylib::%%claw-result- (:pointer raylib::rectangle))
              (raylib::rec1 (:pointer raylib::rectangle))
              (raylib::rec2 (:pointer raylib::rectangle)))

(declaim (inline raylib::get-color))

(cffi:defcfun ("__claw__GetColor" raylib::get-color)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::hex-value :unsigned-int))

(declaim (inline raylib::get-current-monitor))

(cffi:defcfun ("GetCurrentMonitor" raylib::get-current-monitor) :int)

(declaim (inline raylib::get-directory-path))

(cffi:defcfun ("GetDirectoryPath" raylib::get-directory-path)
              :string
              (raylib::file-path :string))

(declaim (inline raylib::get-fps))

(cffi:defcfun ("GetFPS" raylib::get-fps) :int)

(declaim (inline raylib::get-file-extension))

(cffi:defcfun ("GetFileExtension" raylib::get-file-extension)
              :string
              (raylib::file-name :string))

(declaim (inline raylib::get-file-length))

(cffi:defcfun ("GetFileLength" raylib::get-file-length)
              :int
              (raylib::file-name :string))

(declaim (inline raylib::get-file-mod-time))

(cffi:defcfun ("GetFileModTime" raylib::get-file-mod-time)
              :long
              (raylib::file-name :string))

(declaim (inline raylib::get-file-name))

(cffi:defcfun ("GetFileName" raylib::get-file-name)
              :string
              (raylib::file-path :string))

(declaim (inline raylib::get-file-name-without-ext))

(cffi:defcfun ("GetFileNameWithoutExt"
               raylib::get-file-name-without-ext)
              :string
              (raylib::file-path :string))

(declaim (inline raylib::get-font-default))

(cffi:defcfun ("__claw__GetFontDefault" raylib::get-font-default)
              (:pointer raylib::font)
              (raylib::%%claw-result- (:pointer raylib::font)))

(declaim (inline raylib::get-frame-time))

(cffi:defcfun ("GetFrameTime" raylib::get-frame-time) :float)

(declaim (inline raylib::get-gamepad-axis-count))

(cffi:defcfun ("GetGamepadAxisCount" raylib::get-gamepad-axis-count)
              :int
              (raylib::gamepad :int))

(declaim (inline raylib::get-gamepad-axis-movement))

(cffi:defcfun ("GetGamepadAxisMovement"
               raylib::get-gamepad-axis-movement)
              :float
              (raylib::gamepad :int)
              (raylib::axis :int))

(declaim (inline raylib::get-gamepad-button-pressed))

(cffi:defcfun ("GetGamepadButtonPressed"
               raylib::get-gamepad-button-pressed)
              :int)

(declaim (inline raylib::get-gamepad-name))

(cffi:defcfun ("GetGamepadName" raylib::get-gamepad-name)
              :string
              (raylib::gamepad :int))

(declaim (inline raylib::get-gesture-detected))

(cffi:defcfun ("GetGestureDetected" raylib::get-gesture-detected)
              :int)

(declaim (inline raylib::get-gesture-drag-angle))

(cffi:defcfun ("GetGestureDragAngle" raylib::get-gesture-drag-angle)
              :float)

(declaim (inline raylib::get-gesture-drag-vector))

(cffi:defcfun ("__claw__GetGestureDragVector"
               raylib::get-gesture-drag-vector)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2)))

(declaim (inline raylib::get-gesture-hold-duration))

(cffi:defcfun ("GetGestureHoldDuration"
               raylib::get-gesture-hold-duration)
              :float)

(declaim (inline raylib::get-gesture-pinch-angle))

(cffi:defcfun ("GetGesturePinchAngle"
               raylib::get-gesture-pinch-angle)
              :float)

(declaim (inline raylib::get-gesture-pinch-vector))

(cffi:defcfun ("__claw__GetGesturePinchVector"
               raylib::get-gesture-pinch-vector)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2)))

(declaim (inline raylib::get-glyph-atlas-rec))

(cffi:defcfun ("__claw__GetGlyphAtlasRec"
               raylib::get-glyph-atlas-rec)
              (:pointer raylib::rectangle)
              (raylib::%%claw-result- (:pointer raylib::rectangle))
              (raylib::font (:pointer raylib::font))
              (raylib::codepoint :int))

(declaim (inline raylib::get-glyph-index))

(cffi:defcfun ("__claw__GetGlyphIndex" raylib::get-glyph-index)
              :int
              (raylib::font (:pointer raylib::font))
              (raylib::codepoint :int))

(declaim (inline raylib::get-glyph-info))

(cffi:defcfun ("__claw__GetGlyphInfo" raylib::get-glyph-info)
              (:pointer raylib::glyph-info)
              (raylib::%%claw-result- (:pointer raylib::glyph-info))
              (raylib::font (:pointer raylib::font))
              (raylib::codepoint :int))

(declaim (inline raylib::get-image-alpha-border))

(cffi:defcfun ("__claw__GetImageAlphaBorder"
               raylib::get-image-alpha-border)
              (:pointer raylib::rectangle)
              (raylib::%%claw-result- (:pointer raylib::rectangle))
              (raylib::image (:pointer raylib::image))
              (raylib::threshold :float))

(declaim (inline raylib::get-image-color))

(cffi:defcfun ("__claw__GetImageColor" raylib::get-image-color)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::image (:pointer raylib::image))
              (raylib::x :int)
              (raylib::y :int))

(declaim (inline raylib::get-key-pressed))

(cffi:defcfun ("GetKeyPressed" raylib::get-key-pressed) :int)

(declaim (inline raylib::get-master-volume))

(cffi:defcfun ("GetMasterVolume" raylib::get-master-volume) :float)

(declaim (inline raylib::get-mesh-bounding-box))

(cffi:defcfun ("__claw__GetMeshBoundingBox"
               raylib::get-mesh-bounding-box)
              (:pointer raylib::bounding-box)
              (raylib::%%claw-result-
               (:pointer raylib::bounding-box))
              (raylib::mesh (:pointer raylib::mesh)))

(declaim (inline raylib::get-model-bounding-box))

(cffi:defcfun ("__claw__GetModelBoundingBox"
               raylib::get-model-bounding-box)
              (:pointer raylib::bounding-box)
              (raylib::%%claw-result-
               (:pointer raylib::bounding-box))
              (raylib::model (:pointer raylib::model)))

(declaim (inline raylib::get-monitor-count))

(cffi:defcfun ("GetMonitorCount" raylib::get-monitor-count) :int)

(declaim (inline raylib::get-monitor-height))

(cffi:defcfun ("GetMonitorHeight" raylib::get-monitor-height)
              :int
              (raylib::monitor :int))

(declaim (inline raylib::get-monitor-name))

(cffi:defcfun ("GetMonitorName" raylib::get-monitor-name)
              :string
              (raylib::monitor :int))

(declaim (inline raylib::get-monitor-physical-height))

(cffi:defcfun ("GetMonitorPhysicalHeight"
               raylib::get-monitor-physical-height)
              :int
              (raylib::monitor :int))

(declaim (inline raylib::get-monitor-physical-width))

(cffi:defcfun ("GetMonitorPhysicalWidth"
               raylib::get-monitor-physical-width)
              :int
              (raylib::monitor :int))

(declaim (inline raylib::get-monitor-position))

(cffi:defcfun ("__claw__GetMonitorPosition"
               raylib::get-monitor-position)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::monitor :int))

(declaim (inline raylib::get-monitor-refresh-rate))

(cffi:defcfun ("GetMonitorRefreshRate"
               raylib::get-monitor-refresh-rate)
              :int
              (raylib::monitor :int))

(declaim (inline raylib::get-monitor-width))

(cffi:defcfun ("GetMonitorWidth" raylib::get-monitor-width)
              :int
              (raylib::monitor :int))

(declaim (inline raylib::get-mouse-delta))

(cffi:defcfun ("__claw__GetMouseDelta" raylib::get-mouse-delta)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2)))

(declaim (inline raylib::get-mouse-position))

(cffi:defcfun ("__claw__GetMousePosition" raylib::get-mouse-position)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2)))

(declaim (inline raylib::get-mouse-ray))

(cffi:defcfun ("__claw__GetMouseRay" raylib::get-mouse-ray)
              (:pointer raylib::ray)
              (raylib::%%claw-result- (:pointer raylib::ray))
              (raylib::mouse-position (:pointer raylib::vector2))
              (raylib::camera (:pointer raylib::camera)))

(declaim (inline raylib::get-mouse-wheel-move))

(cffi:defcfun ("GetMouseWheelMove" raylib::get-mouse-wheel-move)
              :float)

(declaim (inline raylib::get-mouse-wheel-move-v))

(cffi:defcfun ("__claw__GetMouseWheelMoveV"
               raylib::get-mouse-wheel-move-v)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2)))

(declaim (inline raylib::get-mouse-x))

(cffi:defcfun ("GetMouseX" raylib::get-mouse-x) :int)

(declaim (inline raylib::get-mouse-y))

(cffi:defcfun ("GetMouseY" raylib::get-mouse-y) :int)

(cffi:defcstruct (raylib::music :size 56)
                 (raylib::stream raylib::audio-stream :offset 0)
                 (raylib::frame-count :unsigned-int :offset 32)
                 (raylib::looping :bool :offset 36)
                 (raylib::ctx-type :int :offset 40)
                 (raylib::ctx-data (:pointer :void) :offset 48))

(cffi:defctype raylib::music (:struct raylib::music))

(declaim (inline raylib::get-music-time-length))

(cffi:defcfun ("__claw__GetMusicTimeLength"
               raylib::get-music-time-length)
              :float
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::get-music-time-played))

(cffi:defcfun ("__claw__GetMusicTimePlayed"
               raylib::get-music-time-played)
              :float
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::get-pixel-color))

(cffi:defcfun ("__claw__GetPixelColor" raylib::get-pixel-color)
              (:pointer raylib::color)
              (raylib::%%claw-result- (:pointer raylib::color))
              (raylib::src-ptr (:pointer :void))
              (raylib::format :int))

(declaim (inline raylib::get-pixel-data-size))

(cffi:defcfun ("GetPixelDataSize" raylib::get-pixel-data-size)
              :int
              (raylib::width :int)
              (raylib::height :int)
              (raylib::format :int))

(declaim (inline raylib::get-prev-directory-path))

(cffi:defcfun ("GetPrevDirectoryPath"
               raylib::get-prev-directory-path)
              :string
              (raylib::dir-path :string))

(declaim (inline raylib::get-random-value))

(cffi:defcfun ("GetRandomValue" raylib::get-random-value)
              :int
              (raylib::min :int)
              (raylib::max :int))

(cffi:defcstruct (raylib::ray-collision :size 32)
                 (raylib::hit :bool :offset 0)
                 (raylib::distance :float :offset 4)
                 (raylib::point raylib::vector3 :offset 8)
                 (raylib::normal raylib::vector3 :offset 20))

(cffi:defctype raylib::ray-collision (:struct raylib::ray-collision))

(declaim (inline raylib::get-ray-collision-box))

(cffi:defcfun ("__claw__GetRayCollisionBox"
               raylib::get-ray-collision-box)
              (:pointer raylib::ray-collision)
              (raylib::%%claw-result-
               (:pointer raylib::ray-collision))
              (raylib::ray (:pointer raylib::ray))
              (raylib::box (:pointer raylib::bounding-box)))

(declaim (inline raylib::get-ray-collision-mesh))

(cffi:defcfun ("__claw__GetRayCollisionMesh"
               raylib::get-ray-collision-mesh)
              (:pointer raylib::ray-collision)
              (raylib::%%claw-result-
               (:pointer raylib::ray-collision))
              (raylib::ray (:pointer raylib::ray))
              (raylib::mesh (:pointer raylib::mesh))
              (raylib::transform (:pointer raylib::matrix)))

(declaim (inline raylib::get-ray-collision-quad))

(cffi:defcfun ("__claw__GetRayCollisionQuad"
               raylib::get-ray-collision-quad)
              (:pointer raylib::ray-collision)
              (raylib::%%claw-result-
               (:pointer raylib::ray-collision))
              (raylib::ray (:pointer raylib::ray))
              (raylib::p1 (:pointer raylib::vector3))
              (raylib::p2 (:pointer raylib::vector3))
              (raylib::p3 (:pointer raylib::vector3))
              (raylib::p4 (:pointer raylib::vector3)))

(declaim (inline raylib::get-ray-collision-sphere))

(cffi:defcfun ("__claw__GetRayCollisionSphere"
               raylib::get-ray-collision-sphere)
              (:pointer raylib::ray-collision)
              (raylib::%%claw-result-
               (:pointer raylib::ray-collision))
              (raylib::ray (:pointer raylib::ray))
              (raylib::center (:pointer raylib::vector3))
              (raylib::radius :float))

(declaim (inline raylib::get-ray-collision-triangle))

(cffi:defcfun ("__claw__GetRayCollisionTriangle"
               raylib::get-ray-collision-triangle)
              (:pointer raylib::ray-collision)
              (raylib::%%claw-result-
               (:pointer raylib::ray-collision))
              (raylib::ray (:pointer raylib::ray))
              (raylib::p1 (:pointer raylib::vector3))
              (raylib::p2 (:pointer raylib::vector3))
              (raylib::p3 (:pointer raylib::vector3)))

(declaim (inline raylib::get-render-height))

(cffi:defcfun ("GetRenderHeight" raylib::get-render-height) :int)

(declaim (inline raylib::get-render-width))

(cffi:defcfun ("GetRenderWidth" raylib::get-render-width) :int)

(declaim (inline raylib::get-screen-height))

(cffi:defcfun ("GetScreenHeight" raylib::get-screen-height) :int)

(declaim (inline raylib::get-screen-to-world-2d))

(cffi:defcfun ("__claw__GetScreenToWorld2D"
               raylib::get-screen-to-world-2d)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::position (:pointer raylib::vector2))
              (raylib::camera (:pointer raylib::camera-2d)))

(declaim (inline raylib::get-screen-width))

(cffi:defcfun ("GetScreenWidth" raylib::get-screen-width) :int)

(declaim (inline raylib::get-shader-location))

(cffi:defcfun ("__claw__GetShaderLocation"
               raylib::get-shader-location)
              :int
              (raylib::shader (:pointer raylib::shader))
              (raylib::uniform-name :string))

(declaim (inline raylib::get-shader-location-attrib))

(cffi:defcfun ("__claw__GetShaderLocationAttrib"
               raylib::get-shader-location-attrib)
              :int
              (raylib::shader (:pointer raylib::shader))
              (raylib::attrib-name :string))

(declaim (inline raylib::get-spline-point-basis))

(cffi:defcfun ("__claw__GetSplinePointBasis"
               raylib::get-spline-point-basis)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::p2 (:pointer raylib::vector2))
              (raylib::p3 (:pointer raylib::vector2))
              (raylib::p4 (:pointer raylib::vector2))
              (raylib::t :float))

(declaim (inline raylib::get-spline-point-bezier-cubic))

(cffi:defcfun ("__claw__GetSplinePointBezierCubic"
               raylib::get-spline-point-bezier-cubic)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::c2 (:pointer raylib::vector2))
              (raylib::c3 (:pointer raylib::vector2))
              (raylib::p4 (:pointer raylib::vector2))
              (raylib::t :float))

(declaim (inline raylib::get-spline-point-bezier-quad))

(cffi:defcfun ("__claw__GetSplinePointBezierQuad"
               raylib::get-spline-point-bezier-quad)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::c2 (:pointer raylib::vector2))
              (raylib::p3 (:pointer raylib::vector2))
              (raylib::t :float))

(declaim (inline raylib::get-spline-point-catmull-rom))

(cffi:defcfun ("__claw__GetSplinePointCatmullRom"
               raylib::get-spline-point-catmull-rom)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::p1 (:pointer raylib::vector2))
              (raylib::p2 (:pointer raylib::vector2))
              (raylib::p3 (:pointer raylib::vector2))
              (raylib::p4 (:pointer raylib::vector2))
              (raylib::t :float))

(declaim (inline raylib::get-spline-point-linear))

(cffi:defcfun ("__claw__GetSplinePointLinear"
               raylib::get-spline-point-linear)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::start-pos (:pointer raylib::vector2))
              (raylib::end-pos (:pointer raylib::vector2))
              (raylib::t :float))

(declaim (inline raylib::get-time))

(cffi:defcfun ("GetTime" raylib::get-time) :double)

(declaim (inline raylib::get-touch-point-count))

(cffi:defcfun ("GetTouchPointCount" raylib::get-touch-point-count)
              :int)

(declaim (inline raylib::get-touch-point-id))

(cffi:defcfun ("GetTouchPointId" raylib::get-touch-point-id)
              :int
              (raylib::index :int))

(declaim (inline raylib::get-touch-position))

(cffi:defcfun ("__claw__GetTouchPosition" raylib::get-touch-position)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::index :int))

(declaim (inline raylib::get-touch-x))

(cffi:defcfun ("GetTouchX" raylib::get-touch-x) :int)

(declaim (inline raylib::get-touch-y))

(cffi:defcfun ("GetTouchY" raylib::get-touch-y) :int)

(declaim (inline raylib::get-window-handle))

(cffi:defcfun ("GetWindowHandle" raylib::get-window-handle)
              (:pointer :void))

(declaim (inline raylib::get-window-position))

(cffi:defcfun ("__claw__GetWindowPosition"
               raylib::get-window-position)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2)))

(declaim (inline raylib::get-window-scale-dpi))

(cffi:defcfun ("__claw__GetWindowScaleDPI"
               raylib::get-window-scale-dpi)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2)))

(declaim (inline raylib::get-working-directory))

(cffi:defcfun ("GetWorkingDirectory" raylib::get-working-directory)
              :string)

(declaim (inline raylib::get-world-to-screen))

(cffi:defcfun ("__claw__GetWorldToScreen"
               raylib::get-world-to-screen)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::position (:pointer raylib::vector3))
              (raylib::camera (:pointer raylib::camera)))

(declaim (inline raylib::get-world-to-screen-2d))

(cffi:defcfun ("__claw__GetWorldToScreen2D"
               raylib::get-world-to-screen-2d)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::position (:pointer raylib::vector2))
              (raylib::camera (:pointer raylib::camera-2d)))

(declaim (inline raylib::get-world-to-screen-ex))

(cffi:defcfun ("__claw__GetWorldToScreenEx"
               raylib::get-world-to-screen-ex)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::position (:pointer raylib::vector3))
              (raylib::camera (:pointer raylib::camera))
              (raylib::width :int)
              (raylib::height :int))

(declaim (inline raylib::hide-cursor))

(cffi:defcfun ("HideCursor" raylib::hide-cursor) :void)

(declaim (inline raylib::image-alpha-clear))

(cffi:defcfun ("__claw__ImageAlphaClear" raylib::image-alpha-clear)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::color (:pointer raylib::color))
              (raylib::threshold :float))

(declaim (inline raylib::image-alpha-crop))

(cffi:defcfun ("ImageAlphaCrop" raylib::image-alpha-crop)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::threshold :float))

(declaim (inline raylib::image-alpha-mask))

(cffi:defcfun ("__claw__ImageAlphaMask" raylib::image-alpha-mask)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::alpha-mask (:pointer raylib::image)))

(declaim (inline raylib::image-alpha-premultiply))

(cffi:defcfun ("ImageAlphaPremultiply"
               raylib::image-alpha-premultiply)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::image-blur-gaussian))

(cffi:defcfun ("ImageBlurGaussian" raylib::image-blur-gaussian)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::blur-size :int))

(declaim (inline raylib::image-clear-background))

(cffi:defcfun ("__claw__ImageClearBackground"
               raylib::image-clear-background)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-color-brightness))

(cffi:defcfun ("ImageColorBrightness" raylib::image-color-brightness)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::brightness :int))

(declaim (inline raylib::image-color-contrast))

(cffi:defcfun ("ImageColorContrast" raylib::image-color-contrast)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::contrast :float))

(declaim (inline raylib::image-color-grayscale))

(cffi:defcfun ("ImageColorGrayscale" raylib::image-color-grayscale)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::image-color-invert))

(cffi:defcfun ("ImageColorInvert" raylib::image-color-invert)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::image-color-replace))

(cffi:defcfun ("__claw__ImageColorReplace"
               raylib::image-color-replace)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::color (:pointer raylib::color))
              (raylib::replace (:pointer raylib::color)))

(declaim (inline raylib::image-color-tint))

(cffi:defcfun ("__claw__ImageColorTint" raylib::image-color-tint)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-copy))

(cffi:defcfun ("__claw__ImageCopy" raylib::image-copy)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::image-crop))

(cffi:defcfun ("__claw__ImageCrop" raylib::image-crop)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::crop (:pointer raylib::rectangle)))

(declaim (inline raylib::image-dither))

(cffi:defcfun ("ImageDither" raylib::image-dither)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::r-bpp :int)
              (raylib::g-bpp :int)
              (raylib::b-bpp :int)
              (raylib::a-bpp :int))

(declaim (inline raylib::image-draw))

(cffi:defcfun ("__claw__ImageDraw" raylib::image-draw)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::src (:pointer raylib::image))
              (raylib::src-rec (:pointer raylib::rectangle))
              (raylib::dst-rec (:pointer raylib::rectangle))
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::image-draw-circle))

(cffi:defcfun ("__claw__ImageDrawCircle" raylib::image-draw-circle)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::center-x :int)
              (raylib::center-y :int)
              (raylib::radius :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-circle-lines))

(cffi:defcfun ("__claw__ImageDrawCircleLines"
               raylib::image-draw-circle-lines)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::center-x :int)
              (raylib::center-y :int)
              (raylib::radius :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-circle-lines-v))

(cffi:defcfun ("__claw__ImageDrawCircleLinesV"
               raylib::image-draw-circle-lines-v)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::center (:pointer raylib::vector2))
              (raylib::radius :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-circle-v))

(cffi:defcfun ("__claw__ImageDrawCircleV"
               raylib::image-draw-circle-v)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::center (:pointer raylib::vector2))
              (raylib::radius :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-line))

(cffi:defcfun ("__claw__ImageDrawLine" raylib::image-draw-line)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::start-pos-x :int)
              (raylib::start-pos-y :int)
              (raylib::end-pos-x :int)
              (raylib::end-pos-y :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-line-v))

(cffi:defcfun ("__claw__ImageDrawLineV" raylib::image-draw-line-v)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::start (:pointer raylib::vector2))
              (raylib::end (:pointer raylib::vector2))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-pixel))

(cffi:defcfun ("__claw__ImageDrawPixel" raylib::image-draw-pixel)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-pixel-v))

(cffi:defcfun ("__claw__ImageDrawPixelV" raylib::image-draw-pixel-v)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::position (:pointer raylib::vector2))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-rectangle))

(cffi:defcfun ("__claw__ImageDrawRectangle"
               raylib::image-draw-rectangle)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::width :int)
              (raylib::height :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-rectangle-lines))

(cffi:defcfun ("__claw__ImageDrawRectangleLines"
               raylib::image-draw-rectangle-lines)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::rec (:pointer raylib::rectangle))
              (raylib::thick :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-rectangle-rec))

(cffi:defcfun ("__claw__ImageDrawRectangleRec"
               raylib::image-draw-rectangle-rec)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::rec (:pointer raylib::rectangle))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-rectangle-v))

(cffi:defcfun ("__claw__ImageDrawRectangleV"
               raylib::image-draw-rectangle-v)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::position (:pointer raylib::vector2))
              (raylib::size (:pointer raylib::vector2))
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-text))

(cffi:defcfun ("__claw__ImageDrawText" raylib::image-draw-text)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::text :string)
              (raylib::pos-x :int)
              (raylib::pos-y :int)
              (raylib::font-size :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-draw-text-ex))

(cffi:defcfun ("__claw__ImageDrawTextEx" raylib::image-draw-text-ex)
              :void
              (raylib::dst (:pointer raylib::image))
              (raylib::font (:pointer raylib::font))
              (raylib::text :string)
              (raylib::position (:pointer raylib::vector2))
              (raylib::font-size :float)
              (raylib::spacing :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::image-flip-horizontal))

(cffi:defcfun ("ImageFlipHorizontal" raylib::image-flip-horizontal)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::image-flip-vertical))

(cffi:defcfun ("ImageFlipVertical" raylib::image-flip-vertical)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::image-reformat))

(cffi:defcfun ("ImageFormat" raylib::image-reformat)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::new-format :int))

(declaim (inline raylib::image-from-image))

(cffi:defcfun ("__claw__ImageFromImage" raylib::image-from-image)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::image (:pointer raylib::image))
              (raylib::rec (:pointer raylib::rectangle)))

(declaim (inline raylib::image-compute-mipmaps))

(cffi:defcfun ("ImageMipmaps" raylib::image-compute-mipmaps)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::image-resize))

(cffi:defcfun ("ImageResize" raylib::image-resize)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::new-width :int)
              (raylib::new-height :int))

(declaim (inline raylib::image-resize-canvas))

(cffi:defcfun ("__claw__ImageResizeCanvas"
               raylib::image-resize-canvas)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::new-width :int)
              (raylib::new-height :int)
              (raylib::offset-x :int)
              (raylib::offset-y :int)
              (raylib::fill (:pointer raylib::color)))

(declaim (inline raylib::image-resize-nn))

(cffi:defcfun ("ImageResizeNN" raylib::image-resize-nn)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::new-width :int)
              (raylib::new-height :int))

(declaim (inline raylib::image-rotate))

(cffi:defcfun ("ImageRotate" raylib::image-rotate)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::degrees :int))

(declaim (inline raylib::image-rotate-ccw))

(cffi:defcfun ("ImageRotateCCW" raylib::image-rotate-ccw)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::image-rotate-cw))

(cffi:defcfun ("ImageRotateCW" raylib::image-rotate-cw)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::image-text))

(cffi:defcfun ("__claw__ImageText" raylib::image-text)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::text :string)
              (raylib::font-size :int)
              (raylib::color (:pointer raylib::color)))

(declaim (inline raylib::image-text-ex))

(cffi:defcfun ("__claw__ImageTextEx" raylib::image-text-ex)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::font (:pointer raylib::font))
              (raylib::text :string)
              (raylib::font-size :float)
              (raylib::spacing :float)
              (raylib::tint (:pointer raylib::color)))

(declaim (inline raylib::image-to-pot))

(cffi:defcfun ("__claw__ImageToPOT" raylib::image-to-pot)
              :void
              (raylib::image (:pointer raylib::image))
              (raylib::fill (:pointer raylib::color)))

(declaim (inline raylib::init-audio-device))

(cffi:defcfun ("InitAudioDevice" raylib::init-audio-device) :void)

(declaim (inline raylib::init-window))

(cffi:defcfun ("InitWindow" raylib::init-window)
              :void
              (raylib::width :int)
              (raylib::height :int)
              (raylib::title :string))

(declaim (inline raylib::is-audio-device-ready))

(cffi:defcfun ("IsAudioDeviceReady" raylib::is-audio-device-ready)
              :bool)

(declaim (inline raylib::is-audio-stream-playing))

(cffi:defcfun ("__claw__IsAudioStreamPlaying"
               raylib::is-audio-stream-playing)
              :bool
              (raylib::stream (:pointer raylib::audio-stream)))

(declaim (inline raylib::is-audio-stream-processed))

(cffi:defcfun ("__claw__IsAudioStreamProcessed"
               raylib::is-audio-stream-processed)
              :bool
              (raylib::stream (:pointer raylib::audio-stream)))

(declaim (inline raylib::is-audio-stream-ready))

(cffi:defcfun ("__claw__IsAudioStreamReady"
               raylib::is-audio-stream-ready)
              :bool
              (raylib::stream (:pointer raylib::audio-stream)))

(declaim (inline raylib::is-cursor-hidden))

(cffi:defcfun ("IsCursorHidden" raylib::is-cursor-hidden) :bool)

(declaim (inline raylib::is-cursor-on-screen))

(cffi:defcfun ("IsCursorOnScreen" raylib::is-cursor-on-screen) :bool)

(declaim (inline raylib::is-file-dropped))

(cffi:defcfun ("IsFileDropped" raylib::is-file-dropped) :bool)

(declaim (inline raylib::is-file-extension))

(cffi:defcfun ("IsFileExtension" raylib::is-file-extension)
              :bool
              (raylib::file-name :string)
              (raylib::ext :string))

(declaim (inline raylib::is-font-ready))

(cffi:defcfun ("__claw__IsFontReady" raylib::is-font-ready)
              :bool
              (raylib::font (:pointer raylib::font)))

(declaim (inline raylib::is-gamepad-available))

(cffi:defcfun ("IsGamepadAvailable" raylib::is-gamepad-available)
              :bool
              (raylib::gamepad :int))

(declaim (inline raylib::is-gamepad-button-down))

(cffi:defcfun ("IsGamepadButtonDown" raylib::is-gamepad-button-down)
              :bool
              (raylib::gamepad :int)
              (raylib::button :int))

(declaim (inline raylib::is-gamepad-button-pressed))

(cffi:defcfun ("IsGamepadButtonPressed"
               raylib::is-gamepad-button-pressed)
              :bool
              (raylib::gamepad :int)
              (raylib::button :int))

(declaim (inline raylib::is-gamepad-button-released))

(cffi:defcfun ("IsGamepadButtonReleased"
               raylib::is-gamepad-button-released)
              :bool
              (raylib::gamepad :int)
              (raylib::button :int))

(declaim (inline raylib::is-gamepad-button-up))

(cffi:defcfun ("IsGamepadButtonUp" raylib::is-gamepad-button-up)
              :bool
              (raylib::gamepad :int)
              (raylib::button :int))

(declaim (inline raylib::is-gesture-detected))

(cffi:defcfun ("IsGestureDetected" raylib::is-gesture-detected)
              :bool
              (raylib::gesture :unsigned-int))

(declaim (inline raylib::is-image-ready))

(cffi:defcfun ("__claw__IsImageReady" raylib::is-image-ready)
              :bool
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::is-key-down))

(cffi:defcfun ("IsKeyDown" raylib::is-key-down)
              :bool
              (raylib::key :int))

(declaim (inline raylib::is-key-pressed))

(cffi:defcfun ("IsKeyPressed" raylib::is-key-pressed)
              :bool
              (raylib::key :int))

(declaim (inline raylib::is-key-pressed-repeat))

(cffi:defcfun ("IsKeyPressedRepeat" raylib::is-key-pressed-repeat)
              :bool
              (raylib::key :int))

(declaim (inline raylib::is-key-released))

(cffi:defcfun ("IsKeyReleased" raylib::is-key-released)
              :bool
              (raylib::key :int))

(declaim (inline raylib::is-key-up))

(cffi:defcfun ("IsKeyUp" raylib::is-key-up) :bool (raylib::key :int))

(declaim (inline raylib::is-material-ready))

(cffi:defcfun ("__claw__IsMaterialReady" raylib::is-material-ready)
              :bool
              (raylib::material (:pointer raylib::material)))

(cffi:defcstruct (raylib::model-animation :size 56)
                 (raylib::bone-count :int :offset 0)
                 (raylib::frame-count :int :offset 4)
                 (raylib::bones (:pointer raylib::bone-info) :offset
                  8)
                 (raylib::frame-poses
                  (:pointer (:pointer raylib::transform)) :offset 16)
                 (raylib::name :char :count 32 :offset 24))

(cffi:defctype raylib::model-animation
               (:struct raylib::model-animation))

(declaim (inline raylib::is-model-animation-valid))

(cffi:defcfun ("__claw__IsModelAnimationValid"
               raylib::is-model-animation-valid)
              :bool
              (raylib::model (:pointer raylib::model))
              (raylib::anim (:pointer raylib::model-animation)))

(declaim (inline raylib::is-model-ready))

(cffi:defcfun ("__claw__IsModelReady" raylib::is-model-ready)
              :bool
              (raylib::model (:pointer raylib::model)))

(declaim (inline raylib::is-mouse-button-down))

(cffi:defcfun ("IsMouseButtonDown" raylib::is-mouse-button-down)
              :bool
              (raylib::button :int))

(declaim (inline raylib::is-mouse-button-pressed))

(cffi:defcfun ("IsMouseButtonPressed"
               raylib::is-mouse-button-pressed)
              :bool
              (raylib::button :int))

(declaim (inline raylib::is-mouse-button-released))

(cffi:defcfun ("IsMouseButtonReleased"
               raylib::is-mouse-button-released)
              :bool
              (raylib::button :int))

(declaim (inline raylib::is-mouse-button-up))

(cffi:defcfun ("IsMouseButtonUp" raylib::is-mouse-button-up)
              :bool
              (raylib::button :int))

(declaim (inline raylib::is-music-ready))

(cffi:defcfun ("__claw__IsMusicReady" raylib::is-music-ready)
              :bool
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::is-music-stream-playing))

(cffi:defcfun ("__claw__IsMusicStreamPlaying"
               raylib::is-music-stream-playing)
              :bool
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::is-path-file))

(cffi:defcfun ("IsPathFile" raylib::is-path-file)
              :bool
              (raylib::path :string))

(declaim (inline raylib::is-render-texture-ready))

(cffi:defcfun ("__claw__IsRenderTextureReady"
               raylib::is-render-texture-ready)
              :bool
              (raylib::target (:pointer raylib::render-texture-2d)))

(declaim (inline raylib::is-shader-ready))

(cffi:defcfun ("__claw__IsShaderReady" raylib::is-shader-ready)
              :bool
              (raylib::shader (:pointer raylib::shader)))

(cffi:defcstruct (raylib::sound :size 40)
                 (raylib::stream raylib::audio-stream :offset 0)
                 (raylib::frame-count :unsigned-int :offset 32))

(cffi:defctype raylib::sound (:struct raylib::sound))

(declaim (inline raylib::is-sound-playing))

(cffi:defcfun ("__claw__IsSoundPlaying" raylib::is-sound-playing)
              :bool
              (raylib::sound (:pointer raylib::sound)))

(declaim (inline raylib::is-sound-ready))

(cffi:defcfun ("__claw__IsSoundReady" raylib::is-sound-ready)
              :bool
              (raylib::sound (:pointer raylib::sound)))

(declaim (inline raylib::is-texture-ready))

(cffi:defcfun ("__claw__IsTextureReady" raylib::is-texture-ready)
              :bool
              (raylib::texture (:pointer raylib::texture-2d)))

(declaim (inline raylib::is-wave-ready))

(cffi:defcfun ("__claw__IsWaveReady" raylib::is-wave-ready)
              :bool
              (raylib::wave (:pointer raylib::wave)))

(declaim (inline raylib::is-window-focused))

(cffi:defcfun ("IsWindowFocused" raylib::is-window-focused) :bool)

(declaim (inline raylib::is-window-fullscreen))

(cffi:defcfun ("IsWindowFullscreen" raylib::is-window-fullscreen)
              :bool)

(declaim (inline raylib::is-window-hidden))

(cffi:defcfun ("IsWindowHidden" raylib::is-window-hidden) :bool)

(declaim (inline raylib::is-window-maximized))

(cffi:defcfun ("IsWindowMaximized" raylib::is-window-maximized) :bool)

(declaim (inline raylib::is-window-minimized))

(cffi:defcfun ("IsWindowMinimized" raylib::is-window-minimized) :bool)

(declaim (inline raylib::is-window-ready))

(cffi:defcfun ("IsWindowReady" raylib::is-window-ready) :bool)

(declaim (inline raylib::is-window-resized))

(cffi:defcfun ("IsWindowResized" raylib::is-window-resized) :bool)

(declaim (inline raylib::is-window-state))

(cffi:defcfun ("IsWindowState" raylib::is-window-state)
              :bool
              (raylib::flag :unsigned-int))

(declaim (inline raylib::lerp))

(cffi:defcfun ("__claw__Lerp" raylib::lerp)
              :float
              (raylib::start :float)
              (raylib::end :float)
              (raylib::amount :float))

(declaim (inline raylib::load-audio-stream))

(cffi:defcfun ("__claw__LoadAudioStream" raylib::load-audio-stream)
              (:pointer raylib::audio-stream)
              (raylib::%%claw-result-
               (:pointer raylib::audio-stream))
              (raylib::sample-rate :unsigned-int)
              (raylib::sample-size :unsigned-int)
              (raylib::channels :unsigned-int))

(declaim (inline raylib::load-automation-event-list))

(cffi:defcfun ("__claw__LoadAutomationEventList"
               raylib::load-automation-event-list)
              (:pointer raylib::automation-event-list)
              (raylib::%%claw-result-
               (:pointer raylib::automation-event-list))
              (raylib::file-name :string))

(declaim (inline raylib::load-codepoints))

(cffi:defcfun ("LoadCodepoints" raylib::load-codepoints)
              (:pointer :int)
              (raylib::text :string)
              (raylib::count (:pointer :int)))

(cffi:defcstruct (raylib::file-path-list :size 16)
                 (raylib::capacity :unsigned-int :offset 0)
                 (raylib::count :unsigned-int :offset 4)
                 (raylib::paths (:pointer :string) :offset 8))

(cffi:defctype raylib::file-path-list
               (:struct raylib::file-path-list))

(declaim (inline raylib::load-directory-files))

(cffi:defcfun ("__claw__LoadDirectoryFiles"
               raylib::load-directory-files)
              (:pointer raylib::file-path-list)
              (raylib::%%claw-result-
               (:pointer raylib::file-path-list))
              (raylib::dir-path :string))

(declaim (inline raylib::load-directory-files-ex))

(cffi:defcfun ("__claw__LoadDirectoryFilesEx"
               raylib::load-directory-files-ex)
              (:pointer raylib::file-path-list)
              (raylib::%%claw-result-
               (:pointer raylib::file-path-list))
              (raylib::base-path :string)
              (raylib::filter :string)
              (raylib::scan-subdirs :bool))

(declaim (inline raylib::load-dropped-files))

(cffi:defcfun ("__claw__LoadDroppedFiles" raylib::load-dropped-files)
              (:pointer raylib::file-path-list)
              (raylib::%%claw-result-
               (:pointer raylib::file-path-list)))

(declaim (inline raylib::load-file-data))

(cffi:defcfun ("LoadFileData" raylib::load-file-data)
              (:pointer :unsigned-char)
              (raylib::file-name :string)
              (raylib::data-size (:pointer :int)))

(declaim (inline raylib::load-file-text))

(cffi:defcfun ("LoadFileText" raylib::load-file-text)
              :string
              (raylib::file-name :string))

(declaim (inline raylib::load-font))

(cffi:defcfun ("__claw__LoadFont" raylib::load-font)
              (:pointer raylib::font)
              (raylib::%%claw-result- (:pointer raylib::font))
              (raylib::file-name :string))

(declaim (inline raylib::load-font-data))

(cffi:defcfun ("LoadFontData" raylib::load-font-data)
              (:pointer raylib::glyph-info)
              (raylib::file-data (:pointer :unsigned-char))
              (raylib::data-size :int)
              (raylib::font-size :int)
              (raylib::codepoints (:pointer :int))
              (raylib::codepoint-count :int)
              (raylib::type :int))

(declaim (inline raylib::load-font-ex))

(cffi:defcfun ("__claw__LoadFontEx" raylib::load-font-ex)
              (:pointer raylib::font)
              (raylib::%%claw-result- (:pointer raylib::font))
              (raylib::file-name :string)
              (raylib::font-size :int)
              (raylib::codepoints (:pointer :int))
              (raylib::codepoint-count :int))

(declaim (inline raylib::load-font-from-image))

(cffi:defcfun ("__claw__LoadFontFromImage"
               raylib::load-font-from-image)
              (:pointer raylib::font)
              (raylib::%%claw-result- (:pointer raylib::font))
              (raylib::image (:pointer raylib::image))
              (raylib::key (:pointer raylib::color))
              (raylib::first-char :int))

(declaim (inline raylib::load-font-from-memory))

(cffi:defcfun ("__claw__LoadFontFromMemory"
               raylib::load-font-from-memory)
              (:pointer raylib::font)
              (raylib::%%claw-result- (:pointer raylib::font))
              (raylib::file-type :string)
              (raylib::file-data (:pointer :unsigned-char))
              (raylib::data-size :int)
              (raylib::font-size :int)
              (raylib::codepoints (:pointer :int))
              (raylib::codepoint-count :int))

(declaim (inline raylib::load-image))

(cffi:defcfun ("__claw__LoadImage" raylib::load-image)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::file-name :string))

(declaim (inline raylib::load-image-anim))

(cffi:defcfun ("__claw__LoadImageAnim" raylib::load-image-anim)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::file-name :string)
              (raylib::frames (:pointer :int)))

(declaim (inline raylib::load-image-colors))

(cffi:defcfun ("__claw__LoadImageColors" raylib::load-image-colors)
              (:pointer raylib::color)
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::load-image-from-memory))

(cffi:defcfun ("__claw__LoadImageFromMemory"
               raylib::load-image-from-memory)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::file-type :string)
              (raylib::file-data (:pointer :unsigned-char))
              (raylib::data-size :int))

(declaim (inline raylib::load-image-from-screen))

(cffi:defcfun ("__claw__LoadImageFromScreen"
               raylib::load-image-from-screen)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image)))

(declaim (inline raylib::load-image-from-texture))

(cffi:defcfun ("__claw__LoadImageFromTexture"
               raylib::load-image-from-texture)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::texture (:pointer raylib::texture-2d)))

(declaim (inline raylib::load-image-palette))

(cffi:defcfun ("__claw__LoadImagePalette" raylib::load-image-palette)
              (:pointer raylib::color)
              (raylib::image (:pointer raylib::image))
              (raylib::max-palette-size :int)
              (raylib::color-count (:pointer :int)))

(declaim (inline raylib::load-image-raw))

(cffi:defcfun ("__claw__LoadImageRaw" raylib::load-image-raw)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::file-name :string)
              (raylib::width :int)
              (raylib::height :int)
              (raylib::format :int)
              (raylib::header-size :int))

(declaim (inline raylib::load-image-svg))

(cffi:defcfun ("__claw__LoadImageSvg" raylib::load-image-svg)
              (:pointer raylib::image)
              (raylib::%%claw-result- (:pointer raylib::image))
              (raylib::file-name-or-string :string)
              (raylib::width :int)
              (raylib::height :int))

(declaim (inline raylib::load-material-default))

(cffi:defcfun ("__claw__LoadMaterialDefault"
               raylib::load-material-default)
              (:pointer raylib::material)
              (raylib::%%claw-result- (:pointer raylib::material)))

(declaim (inline raylib::load-materials))

(cffi:defcfun ("LoadMaterials" raylib::load-materials)
              (:pointer raylib::material)
              (raylib::file-name :string)
              (raylib::material-count (:pointer :int)))

(declaim (inline raylib::load-model))

(cffi:defcfun ("__claw__LoadModel" raylib::load-model)
              (:pointer raylib::model)
              (raylib::%%claw-result- (:pointer raylib::model))
              (raylib::file-name :string))

(declaim (inline raylib::load-model-animations))

(cffi:defcfun ("LoadModelAnimations" raylib::load-model-animations)
              (:pointer raylib::model-animation)
              (raylib::file-name :string)
              (raylib::anim-count (:pointer :int)))

(declaim (inline raylib::load-model-from-mesh))

(cffi:defcfun ("__claw__LoadModelFromMesh"
               raylib::load-model-from-mesh)
              (:pointer raylib::model)
              (raylib::%%claw-result- (:pointer raylib::model))
              (raylib::mesh (:pointer raylib::mesh)))

(declaim (inline raylib::load-music-stream))

(cffi:defcfun ("__claw__LoadMusicStream" raylib::load-music-stream)
              (:pointer raylib::music)
              (raylib::%%claw-result- (:pointer raylib::music))
              (raylib::file-name :string))

(declaim (inline raylib::load-music-stream-from-memory))

(cffi:defcfun ("__claw__LoadMusicStreamFromMemory"
               raylib::load-music-stream-from-memory)
              (:pointer raylib::music)
              (raylib::%%claw-result- (:pointer raylib::music))
              (raylib::file-type :string)
              (raylib::data (:pointer :unsigned-char))
              (raylib::data-size :int))

(declaim (inline raylib::load-random-sequence))

(cffi:defcfun ("LoadRandomSequence" raylib::load-random-sequence)
              (:pointer :int)
              (raylib::count :unsigned-int)
              (raylib::min :int)
              (raylib::max :int))

(declaim (inline raylib::load-render-texture))

(cffi:defcfun ("__claw__LoadRenderTexture"
               raylib::load-render-texture)
              (:pointer raylib::render-texture-2d)
              (raylib::%%claw-result-
               (:pointer raylib::render-texture-2d))
              (raylib::width :int)
              (raylib::height :int))

(declaim (inline raylib::load-shader))

(cffi:defcfun ("__claw__LoadShader" raylib::load-shader)
              (:pointer raylib::shader)
              (raylib::%%claw-result- (:pointer raylib::shader))
              (raylib::vs-file-name :string)
              (raylib::fs-file-name :string))

(declaim (inline raylib::load-shader-from-memory))

(cffi:defcfun ("__claw__LoadShaderFromMemory"
               raylib::load-shader-from-memory)
              (:pointer raylib::shader)
              (raylib::%%claw-result- (:pointer raylib::shader))
              (raylib::vs-code :string)
              (raylib::fs-code :string))

(declaim (inline raylib::load-sound))

(cffi:defcfun ("__claw__LoadSound" raylib::load-sound)
              (:pointer raylib::sound)
              (raylib::%%claw-result- (:pointer raylib::sound))
              (raylib::file-name :string))

(declaim (inline raylib::load-sound-alias))

(cffi:defcfun ("__claw__LoadSoundAlias" raylib::load-sound-alias)
              (:pointer raylib::sound)
              (raylib::%%claw-result- (:pointer raylib::sound))
              (raylib::source (:pointer raylib::sound)))

(declaim (inline raylib::load-sound-from-wave))

(cffi:defcfun ("__claw__LoadSoundFromWave"
               raylib::load-sound-from-wave)
              (:pointer raylib::sound)
              (raylib::%%claw-result- (:pointer raylib::sound))
              (raylib::wave (:pointer raylib::wave)))

(declaim (inline raylib::load-texture))

(cffi:defcfun ("__claw__LoadTexture" raylib::load-texture)
              (:pointer raylib::texture-2d)
              (raylib::%%claw-result- (:pointer raylib::texture-2d))
              (raylib::file-name :string))

(cffi:defctype raylib::texture-cubemap (:struct raylib::texture))

(declaim (inline raylib::load-texture-cubemap))

(cffi:defcfun ("__claw__LoadTextureCubemap"
               raylib::load-texture-cubemap)
              (:pointer raylib::texture-cubemap)
              (raylib::%%claw-result-
               (:pointer raylib::texture-cubemap))
              (raylib::image (:pointer raylib::image))
              (raylib::layout :int))

(declaim (inline raylib::load-texture-from-image))

(cffi:defcfun ("__claw__LoadTextureFromImage"
               raylib::load-texture-from-image)
              (:pointer raylib::texture-2d)
              (raylib::%%claw-result- (:pointer raylib::texture-2d))
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::load-utf8))

(cffi:defcfun ("LoadUTF8" raylib::load-utf8)
              :string
              (raylib::codepoints (:pointer :int))
              (raylib::length :int))

(cffi:defcstruct (raylib::vr-device-info :size 64)
                 (raylib::h-resolution :int :offset 0)
                 (raylib::v-resolution :int :offset 4)
                 (raylib::h-screen-size :float :offset 8)
                 (raylib::v-screen-size :float :offset 12)
                 (raylib::v-screen-center :float :offset 16)
                 (raylib::eye-to-screen-distance :float :offset 20)
                 (raylib::lens-separation-distance :float :offset 24)
                 (raylib::interpupillary-distance :float :offset 28)
                 (raylib::lens-distortion-values :float :count 4
                  :offset 32)
                 (raylib::chroma-ab-correction :float :count 4
                  :offset 48))

(cffi:defctype raylib::vr-device-info
               (:struct raylib::vr-device-info))

(declaim (inline raylib::load-vr-stereo-config))

(cffi:defcfun ("__claw__LoadVrStereoConfig"
               raylib::load-vr-stereo-config)
              (:pointer raylib::vr-stereo-config)
              (raylib::%%claw-result-
               (:pointer raylib::vr-stereo-config))
              (raylib::device (:pointer raylib::vr-device-info)))

(declaim (inline raylib::load-wave))

(cffi:defcfun ("__claw__LoadWave" raylib::load-wave)
              (:pointer raylib::wave)
              (raylib::%%claw-result- (:pointer raylib::wave))
              (raylib::file-name :string))

(declaim (inline raylib::load-wave-from-memory))

(cffi:defcfun ("__claw__LoadWaveFromMemory"
               raylib::load-wave-from-memory)
              (:pointer raylib::wave)
              (raylib::%%claw-result- (:pointer raylib::wave))
              (raylib::file-type :string)
              (raylib::file-data (:pointer :unsigned-char))
              (raylib::data-size :int))

(declaim (inline raylib::load-wave-samples))

(cffi:defcfun ("__claw__LoadWaveSamples" raylib::load-wave-samples)
              (:pointer :float)
              (raylib::wave (:pointer raylib::wave)))

(declaim (inline raylib::matrix-add))

(cffi:defcfun ("__claw__MatrixAdd" raylib::matrix-add)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::left (:pointer raylib::matrix))
              (raylib::right (:pointer raylib::matrix)))

(declaim (inline raylib::matrix-determinant))

(cffi:defcfun ("__claw__MatrixDeterminant"
               raylib::matrix-determinant)
              :float
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::matrix-frustum))

(cffi:defcfun ("__claw__MatrixFrustum" raylib::matrix-frustum)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::left :double)
              (raylib::right :double)
              (raylib::bottom :double)
              (raylib::top :double)
              (raylib::near :double)
              (raylib::far :double))

(declaim (inline raylib::matrix-identity))

(cffi:defcfun ("__claw__MatrixIdentity" raylib::matrix-identity)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix)))

(declaim (inline raylib::matrix-invert))

(cffi:defcfun ("__claw__MatrixInvert" raylib::matrix-invert)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::matrix-look-at))

(cffi:defcfun ("__claw__MatrixLookAt" raylib::matrix-look-at)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::eye (:pointer raylib::vector3))
              (raylib::target (:pointer raylib::vector3))
              (raylib::up (:pointer raylib::vector3)))

(declaim (inline raylib::matrix-multiply))

(cffi:defcfun ("__claw__MatrixMultiply" raylib::matrix-multiply)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::left (:pointer raylib::matrix))
              (raylib::right (:pointer raylib::matrix)))

(declaim (inline raylib::matrix-ortho))

(cffi:defcfun ("__claw__MatrixOrtho" raylib::matrix-ortho)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::left :double)
              (raylib::right :double)
              (raylib::bottom :double)
              (raylib::top :double)
              (raylib::near-plane :double)
              (raylib::far-plane :double))

(declaim (inline raylib::matrix-perspective))

(cffi:defcfun ("__claw__MatrixPerspective"
               raylib::matrix-perspective)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::fov-y :double)
              (raylib::aspect :double)
              (raylib::near-plane :double)
              (raylib::far-plane :double))

(declaim (inline raylib::matrix-rotate))

(cffi:defcfun ("__claw__MatrixRotate" raylib::matrix-rotate)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::axis (:pointer raylib::vector3))
              (raylib::angle :float))

(declaim (inline raylib::matrix-rotate-x))

(cffi:defcfun ("__claw__MatrixRotateX" raylib::matrix-rotate-x)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::angle :float))

(declaim (inline raylib::matrix-rotate-xyz))

(cffi:defcfun ("__claw__MatrixRotateXYZ" raylib::matrix-rotate-xyz)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::angle (:pointer raylib::vector3)))

(declaim (inline raylib::matrix-rotate-y))

(cffi:defcfun ("__claw__MatrixRotateY" raylib::matrix-rotate-y)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::angle :float))

(declaim (inline raylib::matrix-rotate-z))

(cffi:defcfun ("__claw__MatrixRotateZ" raylib::matrix-rotate-z)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::angle :float))

(declaim (inline raylib::matrix-rotate-zyx))

(cffi:defcfun ("__claw__MatrixRotateZYX" raylib::matrix-rotate-zyx)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::angle (:pointer raylib::vector3)))

(declaim (inline raylib::matrix-scale))

(cffi:defcfun ("__claw__MatrixScale" raylib::matrix-scale)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::x :float)
              (raylib::y :float)
              (raylib::z :float))

(declaim (inline raylib::matrix-subtract))

(cffi:defcfun ("__claw__MatrixSubtract" raylib::matrix-subtract)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::left (:pointer raylib::matrix))
              (raylib::right (:pointer raylib::matrix)))

(cffi:defcstruct (raylib::float16 :size 64)
                 (raylib::v :float :count 16 :offset 0))

(cffi:defctype raylib::float16 (:struct raylib::float16))

(declaim (inline raylib::matrix-to-float-v))

(cffi:defcfun ("__claw__MatrixToFloatV" raylib::matrix-to-float-v)
              (:pointer raylib::float16)
              (raylib::%%claw-result- (:pointer raylib::float16))
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::matrix-trace))

(cffi:defcfun ("__claw__MatrixTrace" raylib::matrix-trace)
              :float
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::matrix-translate))

(cffi:defcfun ("__claw__MatrixTranslate" raylib::matrix-translate)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::x :float)
              (raylib::y :float)
              (raylib::z :float))

(declaim (inline raylib::matrix-transpose))

(cffi:defcfun ("__claw__MatrixTranspose" raylib::matrix-transpose)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::maximize-window))

(cffi:defcfun ("MaximizeWindow" raylib::maximize-window) :void)

(declaim (inline raylib::measure-text))

(cffi:defcfun ("MeasureText" raylib::measure-text)
              :int
              (raylib::text :string)
              (raylib::font-size :int))

(declaim (inline raylib::measure-text-ex))

(cffi:defcfun ("__claw__MeasureTextEx" raylib::measure-text-ex)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::font (:pointer raylib::font))
              (raylib::text :string)
              (raylib::font-size :float)
              (raylib::spacing :float))

(declaim (inline raylib::mem-alloc))

(cffi:defcfun ("MemAlloc" raylib::mem-alloc)
              (:pointer :void)
              (raylib::size :unsigned-int))

(declaim (inline raylib::mem-free))

(cffi:defcfun ("MemFree" raylib::mem-free)
              :void
              (raylib::ptr (:pointer :void)))

(declaim (inline raylib::mem-realloc))

(cffi:defcfun ("MemRealloc" raylib::mem-realloc)
              (:pointer :void)
              (raylib::ptr (:pointer :void))
              (raylib::size :unsigned-int))

(declaim (inline raylib::minimize-window))

(cffi:defcfun ("MinimizeWindow" raylib::minimize-window) :void)

(declaim (inline raylib::normalize))

(cffi:defcfun ("__claw__Normalize" raylib::normalize)
              :float
              (raylib::value :float)
              (raylib::start :float)
              (raylib::end :float))

(declaim (inline raylib::open-url))

(cffi:defcfun ("OpenURL" raylib::open-url)
              :void
              (raylib::url :string))

(declaim (inline raylib::pause-audio-stream))

(cffi:defcfun ("__claw__PauseAudioStream" raylib::pause-audio-stream)
              :void
              (raylib::stream (:pointer raylib::audio-stream)))

(declaim (inline raylib::pause-music-stream))

(cffi:defcfun ("__claw__PauseMusicStream" raylib::pause-music-stream)
              :void
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::pause-sound))

(cffi:defcfun ("__claw__PauseSound" raylib::pause-sound)
              :void
              (raylib::sound (:pointer raylib::sound)))

(declaim (inline raylib::play-audio-stream))

(cffi:defcfun ("__claw__PlayAudioStream" raylib::play-audio-stream)
              :void
              (raylib::stream (:pointer raylib::audio-stream)))

(declaim (inline raylib::play-automation-event))

(cffi:defcfun ("__claw__PlayAutomationEvent"
               raylib::play-automation-event)
              :void
              (raylib::event (:pointer raylib::automation-event)))

(declaim (inline raylib::play-music-stream))

(cffi:defcfun ("__claw__PlayMusicStream" raylib::play-music-stream)
              :void
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::play-sound))

(cffi:defcfun ("__claw__PlaySound" raylib::play-sound)
              :void
              (raylib::sound (:pointer raylib::sound)))

(declaim (inline raylib::poll-input-events))

(cffi:defcfun ("PollInputEvents" raylib::poll-input-events) :void)

(declaim (inline raylib::quaternion-add))

(cffi:defcfun ("__claw__QuaternionAdd" raylib::quaternion-add)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q1 (:pointer raylib::quaternion))
              (raylib::q2 (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-add-value))

(cffi:defcfun ("__claw__QuaternionAddValue"
               raylib::quaternion-add-value)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q (:pointer raylib::quaternion))
              (raylib::add :float))

(declaim (inline raylib::quaternion-divide))

(cffi:defcfun ("__claw__QuaternionDivide" raylib::quaternion-divide)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q1 (:pointer raylib::quaternion))
              (raylib::q2 (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-equals))

(cffi:defcfun ("__claw__QuaternionEquals" raylib::quaternion-equals)
              :int
              (raylib::p (:pointer raylib::quaternion))
              (raylib::q (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-from-axis-angle))

(cffi:defcfun ("__claw__QuaternionFromAxisAngle"
               raylib::quaternion-from-axis-angle)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::axis (:pointer raylib::vector3))
              (raylib::angle :float))

(declaim (inline raylib::quaternion-from-euler))

(cffi:defcfun ("__claw__QuaternionFromEuler"
               raylib::quaternion-from-euler)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::pitch :float)
              (raylib::yaw :float)
              (raylib::roll :float))

(declaim (inline raylib::quaternion-from-matrix))

(cffi:defcfun ("__claw__QuaternionFromMatrix"
               raylib::quaternion-from-matrix)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::quaternion-from-vector3-to-vector3))

(cffi:defcfun ("__claw__QuaternionFromVector3ToVector3"
               raylib::quaternion-from-vector3-to-vector3)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::from (:pointer raylib::vector3))
              (raylib::to (:pointer raylib::vector3)))

(declaim (inline raylib::quaternion-identity))

(cffi:defcfun ("__claw__QuaternionIdentity"
               raylib::quaternion-identity)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-invert))

(cffi:defcfun ("__claw__QuaternionInvert" raylib::quaternion-invert)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-length))

(cffi:defcfun ("__claw__QuaternionLength" raylib::quaternion-length)
              :float
              (raylib::q (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-lerp))

(cffi:defcfun ("__claw__QuaternionLerp" raylib::quaternion-lerp)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q1 (:pointer raylib::quaternion))
              (raylib::q2 (:pointer raylib::quaternion))
              (raylib::amount :float))

(declaim (inline raylib::quaternion-multiply))

(cffi:defcfun ("__claw__QuaternionMultiply"
               raylib::quaternion-multiply)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q1 (:pointer raylib::quaternion))
              (raylib::q2 (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-nlerp))

(cffi:defcfun ("__claw__QuaternionNlerp" raylib::quaternion-nlerp)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q1 (:pointer raylib::quaternion))
              (raylib::q2 (:pointer raylib::quaternion))
              (raylib::amount :float))

(declaim (inline raylib::quaternion-normalize))

(cffi:defcfun ("__claw__QuaternionNormalize"
               raylib::quaternion-normalize)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-scale))

(cffi:defcfun ("__claw__QuaternionScale" raylib::quaternion-scale)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q (:pointer raylib::quaternion))
              (raylib::mul :float))

(declaim (inline raylib::quaternion-slerp))

(cffi:defcfun ("__claw__QuaternionSlerp" raylib::quaternion-slerp)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q1 (:pointer raylib::quaternion))
              (raylib::q2 (:pointer raylib::quaternion))
              (raylib::amount :float))

(declaim (inline raylib::quaternion-subtract))

(cffi:defcfun ("__claw__QuaternionSubtract"
               raylib::quaternion-subtract)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q1 (:pointer raylib::quaternion))
              (raylib::q2 (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-subtract-value))

(cffi:defcfun ("__claw__QuaternionSubtractValue"
               raylib::quaternion-subtract-value)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q (:pointer raylib::quaternion))
              (raylib::sub :float))

(declaim (inline raylib::quaternion-to-axis-angle))

(cffi:defcfun ("__claw__QuaternionToAxisAngle"
               raylib::quaternion-to-axis-angle)
              :void
              (raylib::q (:pointer raylib::quaternion))
              (raylib::out-axis (:pointer raylib::vector3))
              (raylib::out-angle (:pointer :float)))

(declaim (inline raylib::quaternion-to-euler))

(cffi:defcfun ("__claw__QuaternionToEuler"
               raylib::quaternion-to-euler)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::q (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-to-matrix))

(cffi:defcfun ("__claw__QuaternionToMatrix"
               raylib::quaternion-to-matrix)
              (:pointer raylib::matrix)
              (raylib::%%claw-result- (:pointer raylib::matrix))
              (raylib::q (:pointer raylib::quaternion)))

(declaim (inline raylib::quaternion-transform))

(cffi:defcfun ("__claw__QuaternionTransform"
               raylib::quaternion-transform)
              (:pointer raylib::quaternion)
              (raylib::%%claw-result- (:pointer raylib::quaternion))
              (raylib::q (:pointer raylib::quaternion))
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::remap))

(cffi:defcfun ("__claw__Remap" raylib::remap)
              :float
              (raylib::value :float)
              (raylib::input-start :float)
              (raylib::input-end :float)
              (raylib::output-start :float)
              (raylib::output-end :float))

(declaim (inline raylib::restore-window))

(cffi:defcfun ("RestoreWindow" raylib::restore-window) :void)

(declaim (inline raylib::resume-audio-stream))

(cffi:defcfun ("__claw__ResumeAudioStream"
               raylib::resume-audio-stream)
              :void
              (raylib::stream (:pointer raylib::audio-stream)))

(declaim (inline raylib::resume-music-stream))

(cffi:defcfun ("__claw__ResumeMusicStream"
               raylib::resume-music-stream)
              :void
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::resume-sound))

(cffi:defcfun ("__claw__ResumeSound" raylib::resume-sound)
              :void
              (raylib::sound (:pointer raylib::sound)))

(declaim (inline raylib::save-file-data))

(cffi:defcfun ("SaveFileData" raylib::save-file-data)
              :bool
              (raylib::file-name :string)
              (raylib::data (:pointer :void))
              (raylib::data-size :int))

(declaim (inline raylib::save-file-text))

(cffi:defcfun ("SaveFileText" raylib::save-file-text)
              :bool
              (raylib::file-name :string)
              (raylib::text :string))

(declaim (inline raylib::seek-music-stream))

(cffi:defcfun ("__claw__SeekMusicStream" raylib::seek-music-stream)
              :void
              (raylib::music (:pointer raylib::music))
              (raylib::position :float))

(declaim (inline raylib::set-audio-stream-buffer-size-default))

(cffi:defcfun ("SetAudioStreamBufferSizeDefault"
               raylib::set-audio-stream-buffer-size-default)
              :void
              (raylib::size :int))

(declaim (inline raylib::set-audio-stream-callback))

(cffi:defcfun ("__claw__SetAudioStreamCallback"
               raylib::set-audio-stream-callback)
              :void
              (raylib::stream (:pointer raylib::audio-stream))
              (raylib::callback raylib::audio-callback))

(declaim (inline raylib::set-audio-stream-pan))

(cffi:defcfun ("__claw__SetAudioStreamPan"
               raylib::set-audio-stream-pan)
              :void
              (raylib::stream (:pointer raylib::audio-stream))
              (raylib::pan :float))

(declaim (inline raylib::set-audio-stream-pitch))

(cffi:defcfun ("__claw__SetAudioStreamPitch"
               raylib::set-audio-stream-pitch)
              :void
              (raylib::stream (:pointer raylib::audio-stream))
              (raylib::pitch :float))

(declaim (inline raylib::set-audio-stream-volume))

(cffi:defcfun ("__claw__SetAudioStreamVolume"
               raylib::set-audio-stream-volume)
              :void
              (raylib::stream (:pointer raylib::audio-stream))
              (raylib::volume :float))

(declaim (inline raylib::set-automation-event-base-frame))

(cffi:defcfun ("SetAutomationEventBaseFrame"
               raylib::set-automation-event-base-frame)
              :void
              (raylib::frame :int))

(declaim (inline raylib::set-automation-event-list))

(cffi:defcfun ("SetAutomationEventList"
               raylib::set-automation-event-list)
              :void
              (raylib::list (:pointer raylib::automation-event-list)))

(declaim (inline raylib::set-clipboard-text))

(cffi:defcfun ("SetClipboardText" raylib::set-clipboard-text)
              :void
              (raylib::text :string))

(declaim (inline raylib::set-config-flags))

(cffi:defcfun ("SetConfigFlags" raylib::set-config-flags)
              :void
              (raylib::flags :unsigned-int))

(declaim (inline raylib::set-exit-key))

(cffi:defcfun ("SetExitKey" raylib::set-exit-key)
              :void
              (raylib::key :int))

(declaim (inline raylib::set-gamepad-mappings))

(cffi:defcfun ("SetGamepadMappings" raylib::set-gamepad-mappings)
              :int
              (raylib::mappings :string))

(declaim (inline raylib::set-gestures-enabled))

(cffi:defcfun ("SetGesturesEnabled" raylib::set-gestures-enabled)
              :void
              (raylib::flags :unsigned-int))

(cffi:defctype raylib::load-file-data-callback (:pointer :void))

(declaim (inline raylib::set-load-file-data-callback))

(cffi:defcfun ("SetLoadFileDataCallback"
               raylib::set-load-file-data-callback)
              :void
              (raylib::callback raylib::load-file-data-callback))

(cffi:defctype raylib::load-file-text-callback (:pointer :void))

(declaim (inline raylib::set-load-file-text-callback))

(cffi:defcfun ("SetLoadFileTextCallback"
               raylib::set-load-file-text-callback)
              :void
              (raylib::callback raylib::load-file-text-callback))

(declaim (inline raylib::set-master-volume))

(cffi:defcfun ("SetMasterVolume" raylib::set-master-volume)
              :void
              (raylib::volume :float))

(declaim (inline raylib::set-material-texture))

(cffi:defcfun ("__claw__SetMaterialTexture"
               raylib::set-material-texture)
              :void
              (raylib::material (:pointer raylib::material))
              (raylib::map-type :int)
              (raylib::texture (:pointer raylib::texture-2d)))

(declaim (inline raylib::set-model-mesh-material))

(cffi:defcfun ("SetModelMeshMaterial"
               raylib::set-model-mesh-material)
              :void
              (raylib::model (:pointer raylib::model))
              (raylib::mesh-id :int)
              (raylib::material-id :int))

(declaim (inline raylib::set-mouse-cursor))

(cffi:defcfun ("SetMouseCursor" raylib::set-mouse-cursor)
              :void
              (raylib::cursor :int))

(declaim (inline raylib::set-mouse-offset))

(cffi:defcfun ("SetMouseOffset" raylib::set-mouse-offset)
              :void
              (raylib::offset-x :int)
              (raylib::offset-y :int))

(declaim (inline raylib::set-mouse-position))

(cffi:defcfun ("SetMousePosition" raylib::set-mouse-position)
              :void
              (raylib::x :int)
              (raylib::y :int))

(declaim (inline raylib::set-mouse-scale))

(cffi:defcfun ("SetMouseScale" raylib::set-mouse-scale)
              :void
              (raylib::scale-x :float)
              (raylib::scale-y :float))

(declaim (inline raylib::set-music-pan))

(cffi:defcfun ("__claw__SetMusicPan" raylib::set-music-pan)
              :void
              (raylib::music (:pointer raylib::music))
              (raylib::pan :float))

(declaim (inline raylib::set-music-pitch))

(cffi:defcfun ("__claw__SetMusicPitch" raylib::set-music-pitch)
              :void
              (raylib::music (:pointer raylib::music))
              (raylib::pitch :float))

(declaim (inline raylib::set-music-volume))

(cffi:defcfun ("__claw__SetMusicVolume" raylib::set-music-volume)
              :void
              (raylib::music (:pointer raylib::music))
              (raylib::volume :float))

(declaim (inline raylib::set-pixel-color))

(cffi:defcfun ("__claw__SetPixelColor" raylib::set-pixel-color)
              :void
              (raylib::dst-ptr (:pointer :void))
              (raylib::color (:pointer raylib::color))
              (raylib::format :int))

(declaim (inline raylib::set-random-seed))

(cffi:defcfun ("SetRandomSeed" raylib::set-random-seed)
              :void
              (raylib::seed :unsigned-int))

(cffi:defctype raylib::save-file-data-callback (:pointer :void))

(declaim (inline raylib::set-save-file-data-callback))

(cffi:defcfun ("SetSaveFileDataCallback"
               raylib::set-save-file-data-callback)
              :void
              (raylib::callback raylib::save-file-data-callback))

(cffi:defctype raylib::save-file-text-callback (:pointer :void))

(declaim (inline raylib::set-save-file-text-callback))

(cffi:defcfun ("SetSaveFileTextCallback"
               raylib::set-save-file-text-callback)
              :void
              (raylib::callback raylib::save-file-text-callback))

(declaim (inline raylib::set-shader-value))

(cffi:defcfun ("__claw__SetShaderValue" raylib::set-shader-value)
              :void
              (raylib::shader (:pointer raylib::shader))
              (raylib::loc-index :int)
              (raylib::value (:pointer :void))
              (raylib::uniform-type :int))

(declaim (inline raylib::set-shader-value-matrix))

(cffi:defcfun ("__claw__SetShaderValueMatrix"
               raylib::set-shader-value-matrix)
              :void
              (raylib::shader (:pointer raylib::shader))
              (raylib::loc-index :int)
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::set-shader-value-texture))

(cffi:defcfun ("__claw__SetShaderValueTexture"
               raylib::set-shader-value-texture)
              :void
              (raylib::shader (:pointer raylib::shader))
              (raylib::loc-index :int)
              (raylib::texture (:pointer raylib::texture-2d)))

(declaim (inline raylib::set-shader-value-v))

(cffi:defcfun ("__claw__SetShaderValueV" raylib::set-shader-value-v)
              :void
              (raylib::shader (:pointer raylib::shader))
              (raylib::loc-index :int)
              (raylib::value (:pointer :void))
              (raylib::uniform-type :int)
              (raylib::count :int))

(declaim (inline raylib::set-shapes-texture))

(cffi:defcfun ("__claw__SetShapesTexture" raylib::set-shapes-texture)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::source (:pointer raylib::rectangle)))

(declaim (inline raylib::set-sound-pan))

(cffi:defcfun ("__claw__SetSoundPan" raylib::set-sound-pan)
              :void
              (raylib::sound (:pointer raylib::sound))
              (raylib::pan :float))

(declaim (inline raylib::set-sound-pitch))

(cffi:defcfun ("__claw__SetSoundPitch" raylib::set-sound-pitch)
              :void
              (raylib::sound (:pointer raylib::sound))
              (raylib::pitch :float))

(declaim (inline raylib::set-sound-volume))

(cffi:defcfun ("__claw__SetSoundVolume" raylib::set-sound-volume)
              :void
              (raylib::sound (:pointer raylib::sound))
              (raylib::volume :float))

(declaim (inline raylib::set-target-fps))

(cffi:defcfun ("SetTargetFPS" raylib::set-target-fps)
              :void
              (raylib::fps :int))

(declaim (inline raylib::set-text-line-spacing))

(cffi:defcfun ("SetTextLineSpacing" raylib::set-text-line-spacing)
              :void
              (raylib::spacing :int))

(declaim (inline raylib::set-texture-filter))

(cffi:defcfun ("__claw__SetTextureFilter" raylib::set-texture-filter)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::filter :int))

(declaim (inline raylib::set-texture-wrap))

(cffi:defcfun ("__claw__SetTextureWrap" raylib::set-texture-wrap)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::wrap :int))

(declaim (inline raylib::set-trace-log-level))

(cffi:defcfun ("SetTraceLogLevel" raylib::set-trace-log-level)
              :void
              (raylib::log-level :int))

(declaim (inline raylib::set-window-focused))

(cffi:defcfun ("SetWindowFocused" raylib::set-window-focused) :void)

(declaim (inline raylib::set-window-icon))

(cffi:defcfun ("__claw__SetWindowIcon" raylib::set-window-icon)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::set-window-icons))

(cffi:defcfun ("SetWindowIcons" raylib::set-window-icons)
              :void
              (raylib::images (:pointer raylib::image))
              (raylib::count :int))

(declaim (inline raylib::set-window-max-size))

(cffi:defcfun ("SetWindowMaxSize" raylib::set-window-max-size)
              :void
              (raylib::width :int)
              (raylib::height :int))

(declaim (inline raylib::set-window-min-size))

(cffi:defcfun ("SetWindowMinSize" raylib::set-window-min-size)
              :void
              (raylib::width :int)
              (raylib::height :int))

(declaim (inline raylib::set-window-monitor))

(cffi:defcfun ("SetWindowMonitor" raylib::set-window-monitor)
              :void
              (raylib::monitor :int))

(declaim (inline raylib::set-window-opacity))

(cffi:defcfun ("SetWindowOpacity" raylib::set-window-opacity)
              :void
              (raylib::opacity :float))

(declaim (inline raylib::set-window-position))

(cffi:defcfun ("SetWindowPosition" raylib::set-window-position)
              :void
              (raylib::x :int)
              (raylib::y :int))

(declaim (inline raylib::set-window-size))

(cffi:defcfun ("SetWindowSize" raylib::set-window-size)
              :void
              (raylib::width :int)
              (raylib::height :int))

(declaim (inline raylib::set-window-state))

(cffi:defcfun ("SetWindowState" raylib::set-window-state)
              :void
              (raylib::flags :unsigned-int))

(declaim (inline raylib::set-window-title))

(cffi:defcfun ("SetWindowTitle" raylib::set-window-title)
              :void
              (raylib::title :string))

(declaim (inline raylib::show-cursor))

(cffi:defcfun ("ShowCursor" raylib::show-cursor) :void)

(declaim (inline raylib::start-automation-event-recording))

(cffi:defcfun ("StartAutomationEventRecording"
               raylib::start-automation-event-recording)
              :void)

(declaim (inline raylib::stop-audio-stream))

(cffi:defcfun ("__claw__StopAudioStream" raylib::stop-audio-stream)
              :void
              (raylib::stream (:pointer raylib::audio-stream)))

(declaim (inline raylib::stop-automation-event-recording))

(cffi:defcfun ("StopAutomationEventRecording"
               raylib::stop-automation-event-recording)
              :void)

(declaim (inline raylib::stop-music-stream))

(cffi:defcfun ("__claw__StopMusicStream" raylib::stop-music-stream)
              :void
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::stop-sound))

(cffi:defcfun ("__claw__StopSound" raylib::stop-sound)
              :void
              (raylib::sound (:pointer raylib::sound)))

(declaim (inline raylib::swap-screen-buffer))

(cffi:defcfun ("SwapScreenBuffer" raylib::swap-screen-buffer) :void)

(declaim (inline raylib::take-screenshot))

(cffi:defcfun ("TakeScreenshot" raylib::take-screenshot)
              :void
              (raylib::file-name :string))

(declaim (inline raylib::text-append))

(cffi:defcfun ("TextAppend" raylib::text-append)
              :void
              (raylib::text :string)
              (raylib::append :string)
              (raylib::position (:pointer :int)))

(declaim (inline raylib::text-copy))

(cffi:defcfun ("TextCopy" raylib::text-copy)
              :int
              (raylib::dst :string)
              (raylib::src :string))

(declaim (inline raylib::text-find-index))

(cffi:defcfun ("TextFindIndex" raylib::text-find-index)
              :int
              (raylib::text :string)
              (raylib::find :string))

(declaim (inline raylib::text-format))

(cffi:defcfun ("TextFormat" raylib::text-format)
              :string
              (raylib::text :string)
              &rest)

(declaim (inline raylib::text-insert))

(cffi:defcfun ("TextInsert" raylib::text-insert)
              :string
              (raylib::text :string)
              (raylib::insert :string)
              (raylib::position :int))

(declaim (inline raylib::text-is-equal))

(cffi:defcfun ("TextIsEqual" raylib::text-is-equal)
              :bool
              (raylib::text1 :string)
              (raylib::text2 :string))

(declaim (inline raylib::text-join))

(cffi:defcfun ("TextJoin" raylib::text-join)
              :string
              (raylib::text-list (:pointer :string))
              (raylib::count :int)
              (raylib::delimiter :string))

(declaim (inline raylib::text-length))

(cffi:defcfun ("TextLength" raylib::text-length)
              :unsigned-int
              (raylib::text :string))

(declaim (inline raylib::text-replace))

(cffi:defcfun ("TextReplace" raylib::text-replace)
              :string
              (raylib::text :string)
              (raylib::replace :string)
              (raylib::by :string))

(declaim (inline raylib::text-split))

(cffi:defcfun ("TextSplit" raylib::text-split)
              (:pointer :string)
              (raylib::text :string)
              (raylib::delimiter :char)
              (raylib::count (:pointer :int)))

(declaim (inline raylib::text-subtext))

(cffi:defcfun ("TextSubtext" raylib::text-subtext)
              :string
              (raylib::text :string)
              (raylib::position :int)
              (raylib::length :int))

(declaim (inline raylib::text-to-integer))

(cffi:defcfun ("TextToInteger" raylib::text-to-integer)
              :int
              (raylib::text :string))

(declaim (inline raylib::text-to-lower))

(cffi:defcfun ("TextToLower" raylib::text-to-lower)
              :string
              (raylib::text :string))

(declaim (inline raylib::text-to-pascal))

(cffi:defcfun ("TextToPascal" raylib::text-to-pascal)
              :string
              (raylib::text :string))

(declaim (inline raylib::text-to-upper))

(cffi:defcfun ("TextToUpper" raylib::text-to-upper)
              :string
              (raylib::text :string))

(declaim (inline raylib::toggle-borderless-windowed))

(cffi:defcfun ("ToggleBorderlessWindowed"
               raylib::toggle-borderless-windowed)
              :void)

(declaim (inline raylib::toggle-fullscreen))

(cffi:defcfun ("ToggleFullscreen" raylib::toggle-fullscreen) :void)

(declaim (inline raylib::trace-log))

(cffi:defcfun ("TraceLog" raylib::trace-log)
              :void
              (raylib::log-level :int)
              (raylib::text :string)
              &rest)

(declaim (inline raylib::unload-audio-stream))

(cffi:defcfun ("__claw__UnloadAudioStream"
               raylib::unload-audio-stream)
              :void
              (raylib::stream (:pointer raylib::audio-stream)))

(declaim (inline raylib::unload-automation-event-list))

(cffi:defcfun ("UnloadAutomationEventList"
               raylib::unload-automation-event-list)
              :void
              (raylib::list (:pointer raylib::automation-event-list)))

(declaim (inline raylib::unload-codepoints))

(cffi:defcfun ("UnloadCodepoints" raylib::unload-codepoints)
              :void
              (raylib::codepoints (:pointer :int)))

(declaim (inline raylib::unload-directory-files))

(cffi:defcfun ("__claw__UnloadDirectoryFiles"
               raylib::unload-directory-files)
              :void
              (raylib::files (:pointer raylib::file-path-list)))

(declaim (inline raylib::unload-dropped-files))

(cffi:defcfun ("__claw__UnloadDroppedFiles"
               raylib::unload-dropped-files)
              :void
              (raylib::files (:pointer raylib::file-path-list)))

(declaim (inline raylib::unload-file-data))

(cffi:defcfun ("UnloadFileData" raylib::unload-file-data)
              :void
              (raylib::data (:pointer :unsigned-char)))

(declaim (inline raylib::unload-file-text))

(cffi:defcfun ("UnloadFileText" raylib::unload-file-text)
              :void
              (raylib::text :string))

(declaim (inline raylib::unload-font))

(cffi:defcfun ("__claw__UnloadFont" raylib::unload-font)
              :void
              (raylib::font (:pointer raylib::font)))

(declaim (inline raylib::unload-font-data))

(cffi:defcfun ("UnloadFontData" raylib::unload-font-data)
              :void
              (raylib::glyphs (:pointer raylib::glyph-info))
              (raylib::glyph-count :int))

(declaim (inline raylib::unload-image))

(cffi:defcfun ("__claw__UnloadImage" raylib::unload-image)
              :void
              (raylib::image (:pointer raylib::image)))

(declaim (inline raylib::unload-image-colors))

(cffi:defcfun ("UnloadImageColors" raylib::unload-image-colors)
              :void
              (raylib::colors (:pointer raylib::color)))

(declaim (inline raylib::unload-image-palette))

(cffi:defcfun ("UnloadImagePalette" raylib::unload-image-palette)
              :void
              (raylib::colors (:pointer raylib::color)))

(declaim (inline raylib::unload-material))

(cffi:defcfun ("__claw__UnloadMaterial" raylib::unload-material)
              :void
              (raylib::material (:pointer raylib::material)))

(declaim (inline raylib::unload-mesh))

(cffi:defcfun ("__claw__UnloadMesh" raylib::unload-mesh)
              :void
              (raylib::mesh (:pointer raylib::mesh)))

(declaim (inline raylib::unload-model))

(cffi:defcfun ("__claw__UnloadModel" raylib::unload-model)
              :void
              (raylib::model (:pointer raylib::model)))

(declaim (inline raylib::unload-model-animation))

(cffi:defcfun ("__claw__UnloadModelAnimation"
               raylib::unload-model-animation)
              :void
              (raylib::anim (:pointer raylib::model-animation)))

(declaim (inline raylib::unload-model-animations))

(cffi:defcfun ("UnloadModelAnimations"
               raylib::unload-model-animations)
              :void
              (raylib::animations (:pointer raylib::model-animation))
              (raylib::anim-count :int))

(declaim (inline raylib::unload-music-stream))

(cffi:defcfun ("__claw__UnloadMusicStream"
               raylib::unload-music-stream)
              :void
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::unload-random-sequence))

(cffi:defcfun ("UnloadRandomSequence" raylib::unload-random-sequence)
              :void
              (raylib::sequence (:pointer :int)))

(declaim (inline raylib::unload-render-texture))

(cffi:defcfun ("__claw__UnloadRenderTexture"
               raylib::unload-render-texture)
              :void
              (raylib::target (:pointer raylib::render-texture-2d)))

(declaim (inline raylib::unload-shader))

(cffi:defcfun ("__claw__UnloadShader" raylib::unload-shader)
              :void
              (raylib::shader (:pointer raylib::shader)))

(declaim (inline raylib::unload-sound))

(cffi:defcfun ("__claw__UnloadSound" raylib::unload-sound)
              :void
              (raylib::sound (:pointer raylib::sound)))

(declaim (inline raylib::unload-sound-alias))

(cffi:defcfun ("__claw__UnloadSoundAlias" raylib::unload-sound-alias)
              :void
              (raylib::alias (:pointer raylib::sound)))

(declaim (inline raylib::unload-texture))

(cffi:defcfun ("__claw__UnloadTexture" raylib::unload-texture)
              :void
              (raylib::texture (:pointer raylib::texture-2d)))

(declaim (inline raylib::unload-utf8))

(cffi:defcfun ("UnloadUTF8" raylib::unload-utf8)
              :void
              (raylib::text :string))

(declaim (inline raylib::unload-vr-stereo-config))

(cffi:defcfun ("__claw__UnloadVrStereoConfig"
               raylib::unload-vr-stereo-config)
              :void
              (raylib::config (:pointer raylib::vr-stereo-config)))

(declaim (inline raylib::unload-wave))

(cffi:defcfun ("__claw__UnloadWave" raylib::unload-wave)
              :void
              (raylib::wave (:pointer raylib::wave)))

(declaim (inline raylib::unload-wave-samples))

(cffi:defcfun ("UnloadWaveSamples" raylib::unload-wave-samples)
              :void
              (raylib::samples (:pointer :float)))

(declaim (inline raylib::update-audio-stream))

(cffi:defcfun ("__claw__UpdateAudioStream"
               raylib::update-audio-stream)
              :void
              (raylib::stream (:pointer raylib::audio-stream))
              (raylib::data (:pointer :void))
              (raylib::frame-count :int))

(declaim (inline raylib::update-camera))

(cffi:defcfun ("UpdateCamera" raylib::update-camera)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::mode :int))

(declaim (inline raylib::update-camera-pro))

(cffi:defcfun ("__claw__UpdateCameraPro" raylib::update-camera-pro)
              :void
              (raylib::camera (:pointer raylib::camera))
              (raylib::movement (:pointer raylib::vector3))
              (raylib::rotation (:pointer raylib::vector3))
              (raylib::zoom :float))

(declaim (inline raylib::update-mesh-buffer))

(cffi:defcfun ("__claw__UpdateMeshBuffer" raylib::update-mesh-buffer)
              :void
              (raylib::mesh (:pointer raylib::mesh))
              (raylib::index :int)
              (raylib::data (:pointer :void))
              (raylib::data-size :int)
              (raylib::offset :int))

(declaim (inline raylib::update-model-animation))

(cffi:defcfun ("__claw__UpdateModelAnimation"
               raylib::update-model-animation)
              :void
              (raylib::model (:pointer raylib::model))
              (raylib::anim (:pointer raylib::model-animation))
              (raylib::frame :int))

(declaim (inline raylib::update-music-stream))

(cffi:defcfun ("__claw__UpdateMusicStream"
               raylib::update-music-stream)
              :void
              (raylib::music (:pointer raylib::music)))

(declaim (inline raylib::update-sound))

(cffi:defcfun ("__claw__UpdateSound" raylib::update-sound)
              :void
              (raylib::sound (:pointer raylib::sound))
              (raylib::data (:pointer :void))
              (raylib::sample-count :int))

(declaim (inline raylib::update-texture))

(cffi:defcfun ("__claw__UpdateTexture" raylib::update-texture)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::pixels (:pointer :void)))

(declaim (inline raylib::update-texture-rec))

(cffi:defcfun ("__claw__UpdateTextureRec" raylib::update-texture-rec)
              :void
              (raylib::texture (:pointer raylib::texture-2d))
              (raylib::rec (:pointer raylib::rectangle))
              (raylib::pixels (:pointer :void)))

(declaim (inline raylib::upload-mesh))

(cffi:defcfun ("UploadMesh" raylib::upload-mesh)
              :void
              (raylib::mesh (:pointer raylib::mesh))
              (raylib::dynamic :bool))

(declaim (inline raylib::vector2-add))

(cffi:defcfun ("__claw__Vector2Add" raylib::vector2-add)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-add-value))

(cffi:defcfun ("__claw__Vector2AddValue" raylib::vector2-add-value)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2))
              (raylib::add :float))

(declaim (inline raylib::vector2-angle))

(cffi:defcfun ("__claw__Vector2Angle" raylib::vector2-angle)
              :float
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-clamp))

(cffi:defcfun ("__claw__Vector2Clamp" raylib::vector2-clamp)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2))
              (raylib::min (:pointer raylib::vector2))
              (raylib::max (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-clamp-value))

(cffi:defcfun ("__claw__Vector2ClampValue"
               raylib::vector2-clamp-value)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2))
              (raylib::min :float)
              (raylib::max :float))

(declaim (inline raylib::vector2-distance))

(cffi:defcfun ("__claw__Vector2Distance" raylib::vector2-distance)
              :float
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-distance-sqr))

(cffi:defcfun ("__claw__Vector2DistanceSqr"
               raylib::vector2-distance-sqr)
              :float
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-divide))

(cffi:defcfun ("__claw__Vector2Divide" raylib::vector2-divide)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-dot-product))

(cffi:defcfun ("__claw__Vector2DotProduct"
               raylib::vector2-dot-product)
              :float
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-equals))

(cffi:defcfun ("__claw__Vector2Equals" raylib::vector2-equals)
              :int
              (raylib::p (:pointer raylib::vector2))
              (raylib::q (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-invert))

(cffi:defcfun ("__claw__Vector2Invert" raylib::vector2-invert)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-length))

(cffi:defcfun ("__claw__Vector2Length" raylib::vector2-length)
              :float
              (raylib::v (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-length-sqr))

(cffi:defcfun ("__claw__Vector2LengthSqr" raylib::vector2-length-sqr)
              :float
              (raylib::v (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-lerp))

(cffi:defcfun ("__claw__Vector2Lerp" raylib::vector2-lerp)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2))
              (raylib::amount :float))

(declaim (inline raylib::vector2-line-angle))

(cffi:defcfun ("__claw__Vector2LineAngle" raylib::vector2-line-angle)
              :float
              (raylib::start (:pointer raylib::vector2))
              (raylib::end (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-move-towards))

(cffi:defcfun ("__claw__Vector2MoveTowards"
               raylib::vector2-move-towards)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2))
              (raylib::target (:pointer raylib::vector2))
              (raylib::max-distance :float))

(declaim (inline raylib::vector2-multiply))

(cffi:defcfun ("__claw__Vector2Multiply" raylib::vector2-multiply)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-negate))

(cffi:defcfun ("__claw__Vector2Negate" raylib::vector2-negate)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-normalize))

(cffi:defcfun ("__claw__Vector2Normalize" raylib::vector2-normalize)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-one))

(cffi:defcfun ("__claw__Vector2One" raylib::vector2-one)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-reflect))

(cffi:defcfun ("__claw__Vector2Reflect" raylib::vector2-reflect)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2))
              (raylib::normal (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-rotate))

(cffi:defcfun ("__claw__Vector2Rotate" raylib::vector2-rotate)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2))
              (raylib::angle :float))

(declaim (inline raylib::vector2-scale))

(cffi:defcfun ("__claw__Vector2Scale" raylib::vector2-scale)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2))
              (raylib::scale :float))

(declaim (inline raylib::vector2-subtract))

(cffi:defcfun ("__claw__Vector2Subtract" raylib::vector2-subtract)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v1 (:pointer raylib::vector2))
              (raylib::v2 (:pointer raylib::vector2)))

(declaim (inline raylib::vector2-subtract-value))

(cffi:defcfun ("__claw__Vector2SubtractValue"
               raylib::vector2-subtract-value)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2))
              (raylib::sub :float))

(declaim (inline raylib::vector2-transform))

(cffi:defcfun ("__claw__Vector2Transform" raylib::vector2-transform)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2))
              (raylib::v (:pointer raylib::vector2))
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::vector2-zero))

(cffi:defcfun ("__claw__Vector2Zero" raylib::vector2-zero)
              (:pointer raylib::vector2)
              (raylib::%%claw-result- (:pointer raylib::vector2)))

(declaim (inline raylib::vector3-add))

(cffi:defcfun ("__claw__Vector3Add" raylib::vector3-add)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-add-value))

(cffi:defcfun ("__claw__Vector3AddValue" raylib::vector3-add-value)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::add :float))

(declaim (inline raylib::vector3-angle))

(cffi:defcfun ("__claw__Vector3Angle" raylib::vector3-angle)
              :float
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-barycenter))

(cffi:defcfun ("__claw__Vector3Barycenter"
               raylib::vector3-barycenter)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::p (:pointer raylib::vector3))
              (raylib::a (:pointer raylib::vector3))
              (raylib::b (:pointer raylib::vector3))
              (raylib::c (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-clamp))

(cffi:defcfun ("__claw__Vector3Clamp" raylib::vector3-clamp)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::min (:pointer raylib::vector3))
              (raylib::max (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-clamp-value))

(cffi:defcfun ("__claw__Vector3ClampValue"
               raylib::vector3-clamp-value)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::min :float)
              (raylib::max :float))

(declaim (inline raylib::vector3-cross-product))

(cffi:defcfun ("__claw__Vector3CrossProduct"
               raylib::vector3-cross-product)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-distance))

(cffi:defcfun ("__claw__Vector3Distance" raylib::vector3-distance)
              :float
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-distance-sqr))

(cffi:defcfun ("__claw__Vector3DistanceSqr"
               raylib::vector3-distance-sqr)
              :float
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-divide))

(cffi:defcfun ("__claw__Vector3Divide" raylib::vector3-divide)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-dot-product))

(cffi:defcfun ("__claw__Vector3DotProduct"
               raylib::vector3-dot-product)
              :float
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-equals))

(cffi:defcfun ("__claw__Vector3Equals" raylib::vector3-equals)
              :int
              (raylib::p (:pointer raylib::vector3))
              (raylib::q (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-invert))

(cffi:defcfun ("__claw__Vector3Invert" raylib::vector3-invert)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-length))

(cffi:defcfun ("__claw__Vector3Length" raylib::vector3-length)
              :float
              (raylib::v (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-length-sqr))

(cffi:defcfun ("__claw__Vector3LengthSqr" raylib::vector3-length-sqr)
              :float
              (raylib::v (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-lerp))

(cffi:defcfun ("__claw__Vector3Lerp" raylib::vector3-lerp)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3))
              (raylib::amount :float))

(declaim (inline raylib::vector3-max))

(cffi:defcfun ("__claw__Vector3Max" raylib::vector3-max)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-min))

(cffi:defcfun ("__claw__Vector3Min" raylib::vector3-min)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-multiply))

(cffi:defcfun ("__claw__Vector3Multiply" raylib::vector3-multiply)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-negate))

(cffi:defcfun ("__claw__Vector3Negate" raylib::vector3-negate)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-normalize))

(cffi:defcfun ("__claw__Vector3Normalize" raylib::vector3-normalize)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-one))

(cffi:defcfun ("__claw__Vector3One" raylib::vector3-one)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-ortho-normalize))

(cffi:defcfun ("__claw__Vector3OrthoNormalize"
               raylib::vector3-ortho-normalize)
              :void
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-perpendicular))

(cffi:defcfun ("__claw__Vector3Perpendicular"
               raylib::vector3-perpendicular)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-project))

(cffi:defcfun ("__claw__Vector3Project" raylib::vector3-project)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-reflect))

(cffi:defcfun ("__claw__Vector3Reflect" raylib::vector3-reflect)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::normal (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-refract))

(cffi:defcfun ("__claw__Vector3Refract" raylib::vector3-refract)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::n (:pointer raylib::vector3))
              (raylib::r :float))

(declaim (inline raylib::vector3-reject))

(cffi:defcfun ("__claw__Vector3Reject" raylib::vector3-reject)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-rotate-by-axis-angle))

(cffi:defcfun ("__claw__Vector3RotateByAxisAngle"
               raylib::vector3-rotate-by-axis-angle)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::axis (:pointer raylib::vector3))
              (raylib::angle :float))

(declaim (inline raylib::vector3-rotate-by-quaternion))

(cffi:defcfun ("__claw__Vector3RotateByQuaternion"
               raylib::vector3-rotate-by-quaternion)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::q (:pointer raylib::quaternion)))

(declaim (inline raylib::vector3-scale))

(cffi:defcfun ("__claw__Vector3Scale" raylib::vector3-scale)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::scalar :float))

(declaim (inline raylib::vector3-subtract))

(cffi:defcfun ("__claw__Vector3Subtract" raylib::vector3-subtract)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v1 (:pointer raylib::vector3))
              (raylib::v2 (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-subtract-value))

(cffi:defcfun ("__claw__Vector3SubtractValue"
               raylib::vector3-subtract-value)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::sub :float))

(cffi:defcstruct (raylib::float3 :size 12)
                 (raylib::v :float :count 3 :offset 0))

(cffi:defctype raylib::float3 (:struct raylib::float3))

(declaim (inline raylib::vector3-to-float-v))

(cffi:defcfun ("__claw__Vector3ToFloatV" raylib::vector3-to-float-v)
              (:pointer raylib::float3)
              (raylib::%%claw-result- (:pointer raylib::float3))
              (raylib::v (:pointer raylib::vector3)))

(declaim (inline raylib::vector3-transform))

(cffi:defcfun ("__claw__Vector3Transform" raylib::vector3-transform)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::v (:pointer raylib::vector3))
              (raylib::mat (:pointer raylib::matrix)))

(declaim (inline raylib::vector3-unproject))

(cffi:defcfun ("__claw__Vector3Unproject" raylib::vector3-unproject)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3))
              (raylib::source (:pointer raylib::vector3))
              (raylib::projection (:pointer raylib::matrix))
              (raylib::view (:pointer raylib::matrix)))

(declaim (inline raylib::vector3-zero))

(cffi:defcfun ("__claw__Vector3Zero" raylib::vector3-zero)
              (:pointer raylib::vector3)
              (raylib::%%claw-result- (:pointer raylib::vector3)))

(declaim (inline raylib::wait-time))

(cffi:defcfun ("WaitTime" raylib::wait-time)
              :void
              (raylib::seconds :double))

(declaim (inline raylib::wave-copy))

(cffi:defcfun ("__claw__WaveCopy" raylib::wave-copy)
              (:pointer raylib::wave)
              (raylib::%%claw-result- (:pointer raylib::wave))
              (raylib::wave (:pointer raylib::wave)))

(declaim (inline raylib::wave-crop))

(cffi:defcfun ("WaveCrop" raylib::wave-crop)
              :void
              (raylib::wave (:pointer raylib::wave))
              (raylib::init-sample :int)
              (raylib::final-sample :int))

(declaim (inline raylib::wave-format))

(cffi:defcfun ("WaveFormat" raylib::wave-format)
              :void
              (raylib::wave (:pointer raylib::wave))
              (raylib::sample-rate :int)
              (raylib::sample-size :int)
              (raylib::channels :int))

(declaim (inline raylib::window-should-close))

(cffi:defcfun ("WindowShouldClose" raylib::window-should-close) :bool)

(declaim (inline raylib::wrap))

(cffi:defcfun ("__claw__Wrap" raylib::wrap)
              :float
              (raylib::value :float)
              (raylib::min :float)
              (raylib::max :float))

(declaim (inline raylib::acos))

(cffi:defcfun ("acos" raylib::acos) :double (raylib::%%x :double))

(declaim (inline raylib::acosf))

(cffi:defcfun ("acosf" raylib::acosf) :float (raylib::%%x :float))

(declaim (inline raylib::acosh))

(cffi:defcfun ("acosh" raylib::acosh) :double (raylib::%%x :double))

(declaim (inline raylib::acoshf))

(cffi:defcfun ("acoshf" raylib::acoshf) :float (raylib::%%x :float))

(cffi:defcstruct (raylib::long-double :class
                  raylib::emulated$long-double :size 16)
                 (raylib::data :unsigned-char :count 16))

(defmethod cffi:foreign-type-alignment ((raylib::this
                                         raylib::emulated$long-double))
  (declare (ignore raylib::this))
  16)

(cffi:defctype raylib::long-double (:struct raylib::long-double))

(declaim (inline raylib::acoshl))

(cffi:defcfun ("__claw__acoshl" raylib::acoshl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::acosl))

(cffi:defcfun ("__claw__acosl" raylib::acosl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::asin))

(cffi:defcfun ("asin" raylib::asin) :double (raylib::%%x :double))

(declaim (inline raylib::asinf))

(cffi:defcfun ("asinf" raylib::asinf) :float (raylib::%%x :float))

(declaim (inline raylib::asinh))

(cffi:defcfun ("asinh" raylib::asinh) :double (raylib::%%x :double))

(declaim (inline raylib::asinhf))

(cffi:defcfun ("asinhf" raylib::asinhf) :float (raylib::%%x :float))

(declaim (inline raylib::asinhl))

(cffi:defcfun ("__claw__asinhl" raylib::asinhl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::asinl))

(cffi:defcfun ("__claw__asinl" raylib::asinl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::atan))

(cffi:defcfun ("atan" raylib::atan) :double (raylib::%%x :double))

(declaim (inline raylib::atan2))

(cffi:defcfun ("atan2" raylib::atan2)
              :double
              (raylib::%%y :double)
              (raylib::%%x :double))

(declaim (inline raylib::atan2f))

(cffi:defcfun ("atan2f" raylib::atan2f)
              :float
              (raylib::%%y :float)
              (raylib::%%x :float))

(declaim (inline raylib::atan2l))

(cffi:defcfun ("__claw__atan2l" raylib::atan2l)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::atanf))

(cffi:defcfun ("atanf" raylib::atanf) :float (raylib::%%x :float))

(declaim (inline raylib::atanh))

(cffi:defcfun ("atanh" raylib::atanh) :double (raylib::%%x :double))

(declaim (inline raylib::atanhf))

(cffi:defcfun ("atanhf" raylib::atanhf) :float (raylib::%%x :float))

(declaim (inline raylib::atanhl))

(cffi:defcfun ("__claw__atanhl" raylib::atanhl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::atanl))

(cffi:defcfun ("__claw__atanl" raylib::atanl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::cbrt))

(cffi:defcfun ("cbrt" raylib::cbrt) :double (raylib::%%x :double))

(declaim (inline raylib::cbrtf))

(cffi:defcfun ("cbrtf" raylib::cbrtf) :float (raylib::%%x :float))

(declaim (inline raylib::cbrtl))

(cffi:defcfun ("__claw__cbrtl" raylib::cbrtl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::ceil))

(cffi:defcfun ("ceil" raylib::ceil) :double (raylib::%%x :double))

(declaim (inline raylib::ceilf))

(cffi:defcfun ("ceilf" raylib::ceilf) :float (raylib::%%x :float))

(declaim (inline raylib::ceill))

(cffi:defcfun ("__claw__ceill" raylib::ceill)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::copysign))

(cffi:defcfun ("copysign" raylib::copysign)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double))

(declaim (inline raylib::copysignf))

(cffi:defcfun ("copysignf" raylib::copysignf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float))

(declaim (inline raylib::copysignl))

(cffi:defcfun ("__claw__copysignl" raylib::copysignl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::cos))

(cffi:defcfun ("cos" raylib::cos) :double (raylib::%%x :double))

(declaim (inline raylib::cosf))

(cffi:defcfun ("cosf" raylib::cosf) :float (raylib::%%x :float))

(declaim (inline raylib::cosh))

(cffi:defcfun ("cosh" raylib::cosh) :double (raylib::%%x :double))

(declaim (inline raylib::coshf))

(cffi:defcfun ("coshf" raylib::coshf) :float (raylib::%%x :float))

(declaim (inline raylib::coshl))

(cffi:defcfun ("__claw__coshl" raylib::coshl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::cosl))

(cffi:defcfun ("__claw__cosl" raylib::cosl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::erf))

(cffi:defcfun ("erf" raylib::erf) :double (raylib::arg0 :double))

(declaim (inline raylib::erfc))

(cffi:defcfun ("erfc" raylib::erfc) :double (raylib::arg0 :double))

(declaim (inline raylib::erfcf))

(cffi:defcfun ("erfcf" raylib::erfcf) :float (raylib::arg0 :float))

(declaim (inline raylib::erfcl))

(cffi:defcfun ("__claw__erfcl" raylib::erfcl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::arg0 (:pointer raylib::long-double)))

(declaim (inline raylib::erff))

(cffi:defcfun ("erff" raylib::erff) :float (raylib::arg0 :float))

(declaim (inline raylib::erfl))

(cffi:defcfun ("__claw__erfl" raylib::erfl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::arg0 (:pointer raylib::long-double)))

(declaim (inline raylib::exp))

(cffi:defcfun ("exp" raylib::exp) :double (raylib::%%x :double))

(declaim (inline raylib::exp2))

(cffi:defcfun ("exp2" raylib::exp2) :double (raylib::%%x :double))

(declaim (inline raylib::exp2f))

(cffi:defcfun ("exp2f" raylib::exp2f) :float (raylib::%%x :float))

(declaim (inline raylib::exp2l))

(cffi:defcfun ("__claw__exp2l" raylib::exp2l)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::expf))

(cffi:defcfun ("expf" raylib::expf) :float (raylib::%%x :float))

(declaim (inline raylib::expl))

(cffi:defcfun ("__claw__expl" raylib::expl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::expm1))

(cffi:defcfun ("expm1" raylib::expm1) :double (raylib::%%x :double))

(declaim (inline raylib::expm1f))

(cffi:defcfun ("expm1f" raylib::expm1f) :float (raylib::%%x :float))

(declaim (inline raylib::expm1l))

(cffi:defcfun ("__claw__expm1l" raylib::expm1l)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::fabs))

(cffi:defcfun ("fabs" raylib::fabs) :double (raylib::%%x :double))

(declaim (inline raylib::fabsf))

(cffi:defcfun ("fabsf" raylib::fabsf) :float (raylib::%%x :float))

(declaim (inline raylib::fabsl))

(cffi:defcfun ("__claw__fabsl" raylib::fabsl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::fdim))

(cffi:defcfun ("fdim" raylib::fdim)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double))

(declaim (inline raylib::fdimf))

(cffi:defcfun ("fdimf" raylib::fdimf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float))

(declaim (inline raylib::fdiml))

(cffi:defcfun ("__claw__fdiml" raylib::fdiml)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::floor))

(cffi:defcfun ("floor" raylib::floor) :double (raylib::%%x :double))

(declaim (inline raylib::floorf))

(cffi:defcfun ("floorf" raylib::floorf) :float (raylib::%%x :float))

(declaim (inline raylib::floorl))

(cffi:defcfun ("__claw__floorl" raylib::floorl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::fma))

(cffi:defcfun ("fma" raylib::fma)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double)
              (raylib::%%z :double))

(declaim (inline raylib::fmaf))

(cffi:defcfun ("fmaf" raylib::fmaf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float)
              (raylib::%%z :float))

(declaim (inline raylib::fmal))

(cffi:defcfun ("__claw__fmal" raylib::fmal)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double))
              (raylib::%%z (:pointer raylib::long-double)))

(declaim (inline raylib::fmax))

(cffi:defcfun ("fmax" raylib::fmax)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double))

(declaim (inline raylib::fmaxf))

(cffi:defcfun ("fmaxf" raylib::fmaxf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float))

(declaim (inline raylib::fmaxl))

(cffi:defcfun ("__claw__fmaxl" raylib::fmaxl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::fmin))

(cffi:defcfun ("fmin" raylib::fmin)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double))

(declaim (inline raylib::fminf))

(cffi:defcfun ("fminf" raylib::fminf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float))

(declaim (inline raylib::fminl))

(cffi:defcfun ("__claw__fminl" raylib::fminl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::fmod))

(cffi:defcfun ("fmod" raylib::fmod)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double))

(declaim (inline raylib::fmodf))

(cffi:defcfun ("fmodf" raylib::fmodf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float))

(declaim (inline raylib::fmodl))

(cffi:defcfun ("__claw__fmodl" raylib::fmodl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::frexpl))

(cffi:defcfun ("__claw__frexpl" raylib::frexpl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%exponent (:pointer :int)))

(declaim (inline raylib::hypot))

(cffi:defcfun ("hypot" raylib::hypot)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double))

(declaim (inline raylib::hypotf))

(cffi:defcfun ("hypotf" raylib::hypotf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float))

(declaim (inline raylib::hypotl))

(cffi:defcfun ("__claw__hypotl" raylib::hypotl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::ilogb))

(cffi:defcfun ("ilogb" raylib::ilogb) :int (raylib::%%x :double))

(declaim (inline raylib::ilogbf))

(cffi:defcfun ("ilogbf" raylib::ilogbf) :int (raylib::%%x :float))

(declaim (inline raylib::ilogbl))

(cffi:defcfun ("__claw__ilogbl" raylib::ilogbl)
              :int
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::ldexp))

(cffi:defcfun ("ldexp" raylib::ldexp)
              :double
              (raylib::%%x :double)
              (raylib::%%exponent :int))

(declaim (inline raylib::ldexpf))

(cffi:defcfun ("ldexpf" raylib::ldexpf)
              :float
              (raylib::%%x :float)
              (raylib::%%exponent :int))

(declaim (inline raylib::ldexpl))

(cffi:defcfun ("__claw__ldexpl" raylib::ldexpl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%exponent :int))

(declaim (inline raylib::llrint))

(cffi:defcfun ("llrint" raylib::llrint)
              :long-long
              (raylib::%%x :double))

(declaim (inline raylib::llrintf))

(cffi:defcfun ("llrintf" raylib::llrintf)
              :long-long
              (raylib::%%x :float))

(declaim (inline raylib::llrintl))

(cffi:defcfun ("__claw__llrintl" raylib::llrintl)
              :long-long
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::llround))

(cffi:defcfun ("llround" raylib::llround)
              :long-long
              (raylib::%%x :double))

(declaim (inline raylib::llroundf))

(cffi:defcfun ("llroundf" raylib::llroundf)
              :long-long
              (raylib::%%x :float))

(declaim (inline raylib::llroundl))

(cffi:defcfun ("__claw__llroundl" raylib::llroundl)
              :long-long
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::log))

(cffi:defcfun ("log" raylib::log) :double (raylib::%%x :double))

(declaim (inline raylib::log10))

(cffi:defcfun ("log10" raylib::log10) :double (raylib::%%x :double))

(declaim (inline raylib::log10f))

(cffi:defcfun ("log10f" raylib::log10f) :float (raylib::%%x :float))

(declaim (inline raylib::log10l))

(cffi:defcfun ("__claw__log10l" raylib::log10l)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::log1p))

(cffi:defcfun ("log1p" raylib::log1p) :double (raylib::%%x :double))

(declaim (inline raylib::log1pf))

(cffi:defcfun ("log1pf" raylib::log1pf) :float (raylib::%%x :float))

(declaim (inline raylib::log1pl))

(cffi:defcfun ("__claw__log1pl" raylib::log1pl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::log2))

(cffi:defcfun ("log2" raylib::log2) :double (raylib::%%x :double))

(declaim (inline raylib::log2f))

(cffi:defcfun ("log2f" raylib::log2f) :float (raylib::%%x :float))

(declaim (inline raylib::log2l))

(cffi:defcfun ("__claw__log2l" raylib::log2l)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::logb))

(cffi:defcfun ("logb" raylib::logb) :double (raylib::%%x :double))

(declaim (inline raylib::logbf))

(cffi:defcfun ("logbf" raylib::logbf) :float (raylib::%%x :float))

(declaim (inline raylib::logbl))

(cffi:defcfun ("__claw__logbl" raylib::logbl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::logf))

(cffi:defcfun ("logf" raylib::logf) :float (raylib::%%x :float))

(declaim (inline raylib::logl))

(cffi:defcfun ("__claw__logl" raylib::logl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::lrint))

(cffi:defcfun ("lrint" raylib::lrint) :long (raylib::%%x :double))

(declaim (inline raylib::lrintf))

(cffi:defcfun ("lrintf" raylib::lrintf) :long (raylib::%%x :float))

(declaim (inline raylib::lrintl))

(cffi:defcfun ("__claw__lrintl" raylib::lrintl)
              :long
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::lround))

(cffi:defcfun ("lround" raylib::lround) :long (raylib::%%x :double))

(declaim (inline raylib::lroundf))

(cffi:defcfun ("lroundf" raylib::lroundf) :long (raylib::%%x :float))

(declaim (inline raylib::lroundl))

(cffi:defcfun ("__claw__lroundl" raylib::lroundl)
              :long
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::modfl))

(cffi:defcfun ("__claw__modfl" raylib::modfl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%iptr (:pointer raylib::long-double)))

(declaim (inline raylib::nanl))

(cffi:defcfun ("__claw__nanl" raylib::nanl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%tagb :string))

(declaim (inline raylib::nearbyint))

(cffi:defcfun ("nearbyint" raylib::nearbyint)
              :double
              (raylib::%%x :double))

(declaim (inline raylib::nearbyintf))

(cffi:defcfun ("nearbyintf" raylib::nearbyintf)
              :float
              (raylib::%%x :float))

(declaim (inline raylib::nearbyintl))

(cffi:defcfun ("__claw__nearbyintl" raylib::nearbyintl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::nextafter))

(cffi:defcfun ("nextafter" raylib::nextafter)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double))

(declaim (inline raylib::nextafterf))

(cffi:defcfun ("nextafterf" raylib::nextafterf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float))

(declaim (inline raylib::nextafterl))

(cffi:defcfun ("__claw__nextafterl" raylib::nextafterl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::nexttoward))

(cffi:defcfun ("__claw__nexttoward" raylib::nexttoward)
              :double
              (raylib::%%x :double)
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::nexttowardf))

(cffi:defcfun ("__claw__nexttowardf" raylib::nexttowardf)
              :float
              (raylib::%%x :float)
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::nexttowardl))

(cffi:defcfun ("__claw__nexttowardl" raylib::nexttowardl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::pow))

(cffi:defcfun ("pow" raylib::pow)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double))

(declaim (inline raylib::powf))

(cffi:defcfun ("powf" raylib::powf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float))

(declaim (inline raylib::powl))

(cffi:defcfun ("__claw__powl" raylib::powl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::remainder))

(cffi:defcfun ("remainder" raylib::remainder)
              :double
              (raylib::%%x :double)
              (raylib::%%y :double))

(declaim (inline raylib::remainderf))

(cffi:defcfun ("remainderf" raylib::remainderf)
              :float
              (raylib::%%x :float)
              (raylib::%%y :float))

(declaim (inline raylib::remainderl))

(cffi:defcfun ("__claw__remainderl" raylib::remainderl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double)))

(declaim (inline raylib::remquol))

(cffi:defcfun ("__claw__remquol" raylib::remquol)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%y (:pointer raylib::long-double))
              (raylib::%%quo (:pointer :int)))

(declaim (inline raylib::rint))

(cffi:defcfun ("rint" raylib::rint) :double (raylib::%%x :double))

(declaim (inline raylib::rintf))

(cffi:defcfun ("rintf" raylib::rintf) :float (raylib::%%x :float))

(declaim (inline raylib::rintl))

(cffi:defcfun ("__claw__rintl" raylib::rintl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::round))

(cffi:defcfun ("round" raylib::round) :double (raylib::%%x :double))

(declaim (inline raylib::roundf))

(cffi:defcfun ("roundf" raylib::roundf) :float (raylib::%%x :float))

(declaim (inline raylib::roundl))

(cffi:defcfun ("__claw__roundl" raylib::roundl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::scalbln))

(cffi:defcfun ("scalbln" raylib::scalbln)
              :double
              (raylib::%%x :double)
              (raylib::%%n :long))

(declaim (inline raylib::scalblnf))

(cffi:defcfun ("scalblnf" raylib::scalblnf)
              :float
              (raylib::%%x :float)
              (raylib::%%n :long))

(declaim (inline raylib::scalblnl))

(cffi:defcfun ("__claw__scalblnl" raylib::scalblnl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%n :long))

(declaim (inline raylib::scalbn))

(cffi:defcfun ("scalbn" raylib::scalbn)
              :double
              (raylib::%%x :double)
              (raylib::%%n :int))

(declaim (inline raylib::scalbnf))

(cffi:defcfun ("scalbnf" raylib::scalbnf)
              :float
              (raylib::%%x :float)
              (raylib::%%n :int))

(declaim (inline raylib::scalbnl))

(cffi:defcfun ("__claw__scalbnl" raylib::scalbnl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double))
              (raylib::%%n :int))

(declaim (inline raylib::sin))

(cffi:defcfun ("sin" raylib::sin) :double (raylib::%%x :double))

(declaim (inline raylib::sinf))

(cffi:defcfun ("sinf" raylib::sinf) :float (raylib::%%x :float))

(declaim (inline raylib::sinh))

(cffi:defcfun ("sinh" raylib::sinh) :double (raylib::%%x :double))

(declaim (inline raylib::sinhf))

(cffi:defcfun ("sinhf" raylib::sinhf) :float (raylib::%%x :float))

(declaim (inline raylib::sinhl))

(cffi:defcfun ("__claw__sinhl" raylib::sinhl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::sinl))

(cffi:defcfun ("__claw__sinl" raylib::sinl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::sqrt))

(cffi:defcfun ("sqrt" raylib::sqrt) :double (raylib::%%x :double))

(declaim (inline raylib::sqrtf))

(cffi:defcfun ("sqrtf" raylib::sqrtf) :float (raylib::%%x :float))

(declaim (inline raylib::sqrtl))

(cffi:defcfun ("__claw__sqrtl" raylib::sqrtl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::tan))

(cffi:defcfun ("tan" raylib::tan) :double (raylib::%%x :double))

(declaim (inline raylib::tanf))

(cffi:defcfun ("tanf" raylib::tanf) :float (raylib::%%x :float))

(declaim (inline raylib::tanh))

(cffi:defcfun ("tanh" raylib::tanh) :double (raylib::%%x :double))

(declaim (inline raylib::tanhf))

(cffi:defcfun ("tanhf" raylib::tanhf) :float (raylib::%%x :float))

(declaim (inline raylib::tanhl))

(cffi:defcfun ("__claw__tanhl" raylib::tanhl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::tanl))

(cffi:defcfun ("__claw__tanl" raylib::tanl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(declaim (inline raylib::tgamma))

(cffi:defcfun ("tgamma" raylib::tgamma)
              :double
              (raylib::arg0 :double))

(declaim (inline raylib::tgammaf))

(cffi:defcfun ("tgammaf" raylib::tgammaf)
              :float
              (raylib::arg0 :float))

(declaim (inline raylib::tgammal))

(cffi:defcfun ("__claw__tgammal" raylib::tgammal)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::arg0 (:pointer raylib::long-double)))

(declaim (inline raylib::trunc))

(cffi:defcfun ("trunc" raylib::trunc) :double (raylib::%%x :double))

(declaim (inline raylib::truncf))

(cffi:defcfun ("truncf" raylib::truncf) :float (raylib::%%x :float))

(declaim (inline raylib::truncl))

(cffi:defcfun ("__claw__truncl" raylib::truncl)
              (:pointer raylib::long-double)
              (raylib::%%claw-result- (:pointer raylib::long-double))
              (raylib::%%x (:pointer raylib::long-double)))

(cffi:defcstruct (raylib::|C:@SA@--FSID-T| :size 8)
                 (raylib::%%val :int :count 2 :offset 0))

(cffi:defctype raylib::blend-mode raylib::|C:@EA@BLEND-MODE|)

(cffi:defctype raylib::camera-mode raylib::|C:@EA@CAMERA-MODE|)

(cffi:defctype raylib::camera-projection
               raylib::|C:@EA@CAMERA-PROJECTION|)

(cffi:defctype raylib::config-flags raylib::|C:@EA@CONFIG-FLAGS|)

(cffi:defctype raylib::cubemap-layout raylib::|C:@EA@CUBEMAP-LAYOUT|)

(cffi:defctype raylib::font-type raylib::|C:@EA@FONT-TYPE|)

(cffi:defctype raylib::gamepad-axis raylib::|C:@EA@GAMEPAD-AXIS|)

(cffi:defctype raylib::gamepad-button raylib::|C:@EA@GAMEPAD-BUTTON|)

(cffi:defctype raylib::gesture raylib::|C:@EA@GESTURE|)

(cffi:defctype raylib::keyboard-key raylib::|C:@EA@KEYBOARD-KEY|)

(cffi:defctype raylib::material-map-index
               raylib::|C:@EA@MATERIAL-MAP-INDEX|)

(cffi:defctype raylib::mouse-button raylib::|C:@EA@MOUSE-BUTTON|)

(cffi:defctype raylib::mouse-cursor raylib::|C:@EA@MOUSE-CURSOR|)

(cffi:defctype raylib::n-patch-layout raylib::|C:@EA@N-PATCH-LAYOUT|)

(cffi:defctype raylib::pixel-format raylib::|C:@EA@PIXEL-FORMAT|)

(cffi:defctype raylib::render-texture
               (:struct raylib::render-texture))

(cffi:defctype raylib::shader-attribute-data-type
               raylib::|C:@EA@SHADER-ATTRIBUTE-DATA-TYPE|)

(cffi:defctype raylib::shader-location-index
               raylib::|C:@EA@SHADER-LOCATION-INDEX|)

(cffi:defctype raylib::shader-uniform-data-type
               raylib::|C:@EA@SHADER-UNIFORM-DATA-TYPE|)

(cffi:defctype raylib::texture-filter raylib::|C:@EA@TEXTURE-FILTER|)

(cffi:defctype raylib::texture-wrap raylib::|C:@EA@TEXTURE-WRAP|)

(cffi:defctype raylib::trace-log-level
               raylib::|C:@EA@TRACE-LOG-LEVEL|)

(cffi:defctype raylib::%float32 :float)

(cffi:defctype raylib::%float32x :double)

(cffi:defctype raylib::%float64 :double)

(cffi:defctype raylib::%float64x raylib::long-double)

(define-symbol-macro
  raylib::*signgam*
  (let ((raylib::ptr (cffi:foreign-symbol-pointer "signgam")))
    (when raylib::ptr (cffi:mem-ref raylib::ptr ':int))))

(eval-when (:load-toplevel :compile-toplevel :execute)
  (export 'raylib::set-master-volume :raylib)
  (export 'raylib::vector3-distance-sqr :raylib)
  (export 'raylib::set-audio-stream-callback :raylib)
  (export 'raylib::+infinity+ :raylib)
  (export 'raylib::logl :raylib)
  (export 'raylib::get-window-handle :raylib)
  (export 'raylib::draw-circle-sector-lines :raylib)
  (export 'raylib::texture-cubemap :raylib)
  (export 'raylib::fdimf :raylib)
  (export 'raylib::bones :raylib)
  (export 'raylib::image-draw-text :raylib)
  (export 'raylib::fmax :raylib)
  (export 'raylib::draw-texture-rec :raylib)
  (export 'raylib::get-window-scale-dpi :raylib)
  (export 'raylib::trace-log :raylib)
  (export 'raylib::minimize-window :raylib)
  (export 'raylib::lroundl :raylib)
  (export 'raylib::+%bits-time64-h+ :raylib)
  (export 'raylib::nearbyintl :raylib)
  (export 'raylib::vector3-lerp :raylib)
  (export 'raylib::is-audio-stream-processed :raylib)
  (export 'raylib::get-font-default :raylib)
  (export 'raylib::draw-mesh :raylib)
  (export 'raylib::text-to-integer :raylib)
  (export 'raylib::get-gesture-pinch-angle :raylib)
  (export 'raylib::source :raylib)
  (export 'raylib::unload-audio-stream :raylib)
  (export 'raylib::m8 :raylib)
  (export 'raylib::load-directory-files-ex :raylib)
  (export 'raylib::codepoint-to-utf8 :raylib)
  (export 'raylib::swap-screen-buffer :raylib)
  (export 'raylib::get-mouse-ray :raylib)
  (export 'raylib::material :raylib)
  (export 'raylib::load-font-from-memory :raylib)
  (export 'raylib::check-collision-point-poly :raylib)
  (export 'raylib::|C:@EA@MOUSE-BUTTON| :raylib)
  (export 'raylib::g :raylib)
  (export 'raylib::draw-triangle-strip :raylib)
  (export 'raylib::+m-1-pi+ :raylib)
  (export 'raylib::llround :raylib)
  (export 'raylib::|C:@EA@BLEND-MODE| :raylib)
  (export 'raylib::attach-audio-stream-processor :raylib)
  (export 'raylib::llroundf :raylib)
  (export 'raylib::draw-capsule :raylib)
  (export 'raylib::log :raylib)
  (export 'raylib::is-file-dropped :raylib)
  (export 'raylib::v :raylib)
  (export 'raylib::get-ray-collision-sphere :raylib)
  (export 'raylib::open-url :raylib)
  (export 'raylib::set-sound-pitch :raylib)
  (export 'raylib::draw-line :raylib)
  (export 'raylib::color-tint :raylib)
  (export 'raylib::matrix-determinant :raylib)
  (export 'raylib::text-append :raylib)
  (export 'raylib::get-shader-location :raylib)
  (export 'raylib::vector3-divide :raylib)
  (export 'raylib::close-audio-device :raylib)
  (export 'raylib::+darkblue+ :raylib)
  (export 'raylib::image-blur-gaussian :raylib)
  (export 'raylib::matrix-invert :raylib)
  (export 'raylib::camera-roll :raylib)
  (export 'raylib::get-image-alpha-border :raylib)
  (export 'raylib::draw-text-ex :raylib)
  (export 'raylib::gen-image-white-noise :raylib)
  (export 'raylib::load-texture-cubemap :raylib)
  (export 'raylib::get-mouse-wheel-move-v :raylib)
  (export 'raylib::is-font-ready :raylib)
  (export 'raylib::end-shader-mode :raylib)
  (export 'raylib::set-window-state :raylib)
  (export 'raylib::load-file-data :raylib)
  (export 'raylib::sinhf :raylib)
  (export 'raylib::params :raylib)
  (export 'raylib::set-window-size :raylib)
  (export 'raylib::unload-music-stream :raylib)
  (export 'raylib::get-codepoint :raylib)
  (export 'raylib::load-image-raw :raylib)
  (export 'raylib::image-draw-rectangle :raylib)
  (export 'raylib::texcoords :raylib)
  (export 'raylib::capacity :raylib)
  (export 'raylib::+fp-ilogb0+ :raylib)
  (export 'raylib::unload-image :raylib)
  (export 'raylib::cbrtl :raylib)
  (export 'raylib::load-utf8 :raylib)
  (export 'raylib::sinf :raylib)
  (export 'raylib::ctx-type :raylib)
  (export 'raylib::update-audio-stream :raylib)
  (export 'raylib::matrix-multiply :raylib)
  (export 'raylib::text-join :raylib)
  (export 'raylib::nexttoward :raylib)
  (export 'raylib::shader-uniform-data-type :raylib)
  (export 'raylib::matrix-rotate-x :raylib)
  (export 'raylib::vbo-id :raylib)
  (export 'raylib::unload-model :raylib)
  (export 'raylib::+camera-cull-distance-near+ :raylib)
  (export 'raylib::end-texture-mode :raylib)
  (export 'raylib::erff :raylib)
  (export 'raylib::is-window-state :raylib)
  (export 'raylib::get-mouse-wheel-move :raylib)
  (export 'raylib::image-draw-pixel :raylib)
  (export 'raylib::frame-poses :raylib)
  (export 'raylib::sinhl :raylib)
  (export 'raylib::+violet+ :raylib)
  (export 'raylib::load-file-text-callback :raylib)
  (export 'raylib::set-music-pitch :raylib)
  (export 'raylib::begin-shader-mode :raylib)
  (export 'raylib::unload-image-palette :raylib)
  (export 'raylib::looping :raylib)
  (export 'raylib::get-gamepad-name :raylib)
  (export 'raylib::m15 :raylib)
  (export 'raylib::save-file-data :raylib)
  (export 'raylib::gen-image-cellular :raylib)
  (export 'raylib::vector2-scale :raylib)
  (export 'raylib::advance-x :raylib)
  (export 'raylib::+%stdc-predef-h+ :raylib)
  (export 'raylib::get-codepoint-count :raylib)
  (export 'raylib::vertex-count :raylib)
  (export 'raylib::m7 :raylib)
  (export 'raylib::+raylib-version+ :raylib)
  (export 'raylib::encode-data-base64 :raylib)
  (export 'raylib::up :raylib)
  (export 'raylib::unload-random-sequence :raylib)
  (export 'raylib::set-window-icon :raylib)
  (export 'raylib::get-collision-rec :raylib)
  (export 'raylib::tanl :raylib)
  (export 'raylib::text-split :raylib)
  (export 'raylib::expm1f :raylib)
  (export 'raylib::|C:@EA@MATERIAL-MAP-INDEX| :raylib)
  (export 'raylib::quaternion-subtract-value :raylib)
  (export 'raylib::draw-rectangle-lines-ex :raylib)
  (export 'raylib::draw-ellipse :raylib)
  (export 'raylib::draw-fps :raylib)
  (export 'raylib::+%mdouble-+ :raylib)
  (export 'raylib::+m-log10e+ :raylib)
  (export 'raylib::is-gamepad-button-up :raylib)
  (export 'raylib::m0 :raylib)
  (export 'raylib::is-mouse-button-pressed :raylib)
  (export 'raylib::+shader-loc-map-specular+ :raylib)
  (export 'raylib::scale :raylib)
  (export 'raylib::draw-grid :raylib)
  (export 'raylib::draw-poly-lines-ex :raylib)
  (export 'raylib::color-to-int :raylib)
  (export 'raylib::vector3-reject :raylib)
  (export 'raylib::image-reformat :raylib)
  (export 'raylib::window-should-close :raylib)
  (export 'raylib::set-mouse-scale :raylib)
  (export 'raylib::+shader-loc-map-diffuse+ :raylib)
  (export 'raylib::get-monitor-name :raylib)
  (export 'raylib::matrix-to-float-v :raylib)
  (export 'raylib::take-screenshot :raylib)
  (export 'raylib::config-flags :raylib)
  (export 'raylib::+purple+ :raylib)
  (export 'raylib::erfc :raylib)
  (export 'raylib::+rl-vector2-type+ :raylib)
  (export 'raylib::layout :raylib)
  (export 'raylib::set-shader-value-matrix :raylib)
  (export 'raylib::check-collision-circle-rec :raylib)
  (export 'raylib::set-music-pan :raylib)
  (export 'raylib::end-drawing :raylib)
  (export 'raylib::draw-texture :raylib)
  (export 'raylib::gesture :raylib)
  (export 'raylib::draw-model-wires :raylib)
  (export 'raylib::+m-ln10+ :raylib)
  (export 'raylib::format :raylib)
  (export 'raylib::get-key-pressed :raylib)
  (export 'raylib::get-monitor-count :raylib)
  (export 'raylib::fminf :raylib)
  (export 'raylib::count :raylib)
  (export 'raylib::m1 :raylib)
  (export 'raylib::glyphs :raylib)
  (export 'raylib::llrintl :raylib)
  (export 'raylib::|C:@EA@FONT-TYPE| :raylib)
  (export 'raylib::audio-callback :raylib)
  (export 'raylib::m9 :raylib)
  (export 'raylib::draw-cube-v :raylib)
  (export 'raylib::mesh-material :raylib)
  (export 'raylib::min :raylib)
  (export 'raylib::fabsf :raylib)
  (export 'raylib::processor :raylib)
  (export 'raylib::gen-mesh-cylinder :raylib)
  (export 'raylib::translation :raylib)
  (export 'raylib::draw-line-strip :raylib)
  (export 'raylib::check-collision-point-circle :raylib)
  (export 'raylib::scalblnf :raylib)
  (export 'raylib::point :raylib)
  (export 'raylib::set-music-volume :raylib)
  (export 'raylib::+raywhite+ :raylib)
  (export 'raylib::normalize :raylib)
  (export 'raylib::pause-audio-stream :raylib)
  (export 'raylib::measure-text :raylib)
  (export 'raylib::color-brightness :raylib)
  (export 'raylib::get-screen-width :raylib)
  (export 'raylib::roundl :raylib)
  (export 'raylib::image-text-ex :raylib)
  (export 'raylib::asin :raylib)
  (export 'raylib::acoshf :raylib)
  (export 'raylib::get-screen-height :raylib)
  (export 'raylib::load-wave-samples :raylib)
  (export 'raylib::image-flip-vertical :raylib)
  (export 'raylib::get-render-height :raylib)
  (export 'raylib::render-texture :raylib)
  (export 'raylib::cosh :raylib)
  (export 'raylib::copysignl :raylib)
  (export 'raylib::long-double :raylib)
  (export 'raylib::vector3-refract :raylib)
  (export 'raylib::quaternion-identity :raylib)
  (export 'raylib::+%bits-floatn-common-h+ :raylib)
  (export 'raylib::+%features-h+ :raylib)
  (export 'raylib::log10f :raylib)
  (export 'raylib::is-window-maximized :raylib)
  (export 'raylib::disable-event-waiting :raylib)
  (export 'raylib::draw-plane :raylib)
  (export 'raylib::get-file-mod-time :raylib)
  (export 'raylib::remainderl :raylib)
  (export 'raylib::vr-stereo-config :raylib)
  (export 'raylib::remainder :raylib)
  (export 'raylib::+nan+ :raylib)
  (export 'raylib::draw-line-bezier :raylib)
  (export 'raylib::nanl :raylib)
  (export 'raylib::+rl-matrix-type+ :raylib)
  (export 'raylib::r :raylib)
  (export 'raylib::matrix-rotate-zyx :raylib)
  (export 'raylib::is-gesture-detected :raylib)
  (export 'raylib::stream :raylib)
  (export 'raylib::vector2 :raylib)
  (export 'raylib::resume-audio-stream :raylib)
  (export 'raylib::nexttowardl :raylib)
  (export 'raylib::begin-mode-2d :raylib)
  (export 'raylib::*signgam* :raylib)
  (export 'raylib::get-gamepad-button-pressed :raylib)
  (export 'raylib::begin-vr-stereo-mode :raylib)
  (export 'raylib::vector2-one :raylib)
  (export 'raylib::+maroon+ :raylib)
  (export 'raylib::save-file-data-callback :raylib)
  (export 'raylib::sqrtl :raylib)
  (export 'raylib::is-sound-ready :raylib)
  (export 'raylib::is-material-ready :raylib)
  (export 'raylib::round :raylib)
  (export 'raylib::text-to-upper :raylib)
  (export 'raylib::v-screen-center :raylib)
  (export 'raylib::trunc :raylib)
  (export 'raylib::matrix-rotate-xyz :raylib)
  (export 'raylib::quaternion-add :raylib)
  (export 'raylib::asinh :raylib)
  (export 'raylib::keyboard-key :raylib)
  (export 'raylib::image-clear-background :raylib)
  (export 'raylib::gen-image-gradient-linear :raylib)
  (export 'raylib::close-window :raylib)
  (export 'raylib::b :raylib)
  (export 'raylib::draw-poly :raylib)
  (export 'raylib::vector3-angle :raylib)
  (export 'raylib::|C:@EA@CAMERA-MODE| :raylib)
  (export 'raylib::image-resize-canvas :raylib)
  (export 'raylib::%float32x :raylib)
  (export 'raylib::+fp-subnormal+ :raylib)
  (export 'raylib::|C:@EA@GESTURE| :raylib)
  (export 'raylib::poll-input-events :raylib)
  (export 'raylib::clear-window-state :raylib)
  (export 'raylib::text-find-index :raylib)
  (export 'raylib::draw-rectangle :raylib)
  (export 'raylib::lerp :raylib)
  (export 'raylib::font-type :raylib)
  (export 'raylib::m6 :raylib)
  (export 'raylib::+huge-valf+ :raylib)
  (export 'raylib::load-wave :raylib)
  (export 'raylib::quaternion-transform :raylib)
  (export 'raylib::draw-triangle-fan :raylib)
  (export 'raylib::value :raylib)
  (export 'raylib::+blank+ :raylib)
  (export 'raylib::end-mode-3d :raylib)
  (export 'raylib::vector3-scale :raylib)
  (export 'raylib::load-shader :raylib)
  (export 'raylib::wave-crop :raylib)
  (export 'raylib::quaternion-from-euler :raylib)
  (export 'raylib::export-automation-event-list :raylib)
  (export 'raylib::bounding-box :raylib)
  (export 'raylib::file-path-list :raylib)
  (export 'raylib::set-clipboard-text :raylib)
  (export 'raylib::is-file-extension :raylib)
  (export 'raylib::quaternion-from-matrix :raylib)
  (export 'raylib::right-screen-center :raylib)
  (export 'raylib::name :raylib)
  (export 'raylib::copysign :raylib)
  (export 'raylib::check-collision-point-triangle :raylib)
  (export 'raylib::set-shader-value-v :raylib)
  (export 'raylib::z :raylib)
  (export 'raylib::get-mouse-position :raylib)
  (export 'raylib::begin-mode-3d :raylib)
  (export 'raylib::asinl :raylib)
  (export 'raylib::stop-audio-stream :raylib)
  (export 'raylib::lroundf :raylib)
  (export 'raylib::vector3-reflect :raylib)
  (export 'raylib::get-ray-collision-triangle :raylib)
  (export 'raylib::load-font-data :raylib)
  (export 'raylib::+rad2deg+ :raylib)
  (export 'raylib::log1p :raylib)
  (export 'raylib::+m-sqrt1-2+ :raylib)
  (export 'raylib::texture-wrap :raylib)
  (export 'raylib::+raylib-version-patch+ :raylib)
  (export 'raylib::quaternion-equals :raylib)
  (export 'raylib::+darkgreen+ :raylib)
  (export 'raylib::quaternion-slerp :raylib)
  (export 'raylib::+rl-color-type+ :raylib)
  (export 'raylib::draw-triangle-strip-3d :raylib)
  (export 'raylib::set-window-icons :raylib)
  (export 'raylib::get-glyph-atlas-rec :raylib)
  (export 'raylib::save-file-text :raylib)
  (export 'raylib::draw-circle-lines-v :raylib)
  (export 'raylib::shader-location-index :raylib)
  (export 'raylib::get-glyph-index :raylib)
  (export 'raylib::is-gamepad-button-released :raylib)
  (export 'raylib::vector2-invert :raylib)
  (export 'raylib::llrint :raylib)
  (export 'raylib::measure-text-ex :raylib)
  (export 'raylib::draw-text :raylib)
  (export 'raylib::get-gesture-drag-angle :raylib)
  (export 'raylib::draw-text-codepoints :raylib)
  (export 'raylib::end-scissor-mode :raylib)
  (export 'raylib::load-wave-from-memory :raylib)
  (export 'raylib::get-gesture-pinch-vector :raylib)
  (export 'raylib::set-material-texture :raylib)
  (export 'raylib::text-copy :raylib)
  (export 'raylib::get-camera-matrix-2d :raylib)
  (export 'raylib::sample-rate :raylib)
  (export 'raylib::data :raylib)
  (export 'raylib::+rcamera-h+ :raylib)
  (export 'raylib::buffer :raylib)
  (export 'raylib::atanhl :raylib)
  (export 'raylib::|C:@EA@TRACE-LOG-LEVEL| :raylib)
  (export 'raylib::draw-mesh-instanced :raylib)
  (export 'raylib::fmal :raylib)
  (export 'raylib::set-window-opacity :raylib)
  (export 'raylib::load-codepoints :raylib)
  (export 'raylib::+rl-quaternion-type+ :raylib)
  (export 'raylib::draw-bounding-box :raylib)
  (export 'raylib::color-alpha :raylib)
  (export 'raylib::+%posix-source+ :raylib)
  (export 'raylib::m2 :raylib)
  (export 'raylib::meshes :raylib)
  (export 'raylib::play-audio-stream :raylib)
  (export 'raylib::fdiml :raylib)
  (export 'raylib::asinhl :raylib)
  (export 'raylib::image-color-replace :raylib)
  (export 'raylib::matrix-rotate-z :raylib)
  (export 'raylib::draw-cube-wires-v :raylib)
  (export 'raylib::unload-mesh :raylib)
  (export 'raylib::draw-rectangle-rec :raylib)
  (export 'raylib::get-mouse-y :raylib)
  (export 'raylib::+red+ :raylib)
  (export 'raylib::get-touch-y :raylib)
  (export 'raylib::get-fps :raylib)
  (export 'raylib::vector2-subtract :raylib)
  (export 'raylib::image-resize :raylib)
  (export 'raylib::is-model-ready :raylib)
  (export 'raylib::vector2-length :raylib)
  (export 'raylib::+m-ln2+ :raylib)
  (export 'raylib::color-alpha-blend :raylib)
  (export 'raylib::normals :raylib)
  (export 'raylib::lens-distortion-values :raylib)
  (export 'raylib::load-texture-from-image :raylib)
  (export 'raylib::wave-copy :raylib)
  (export 'raylib::gen-mesh-plane :raylib)
  (export 'raylib::unload-render-texture :raylib)
  (export 'raylib::get-file-name :raylib)
  (export 'raylib::is-mouse-button-released :raylib)
  (export 'raylib::draw-model-ex :raylib)
  (export 'raylib::camera-move-to-target :raylib)
  (export 'raylib::+rl-vector4-type+ :raylib)
  (export 'raylib::m12 :raylib)
  (export 'raylib::get-application-directory :raylib)
  (export 'raylib::unload-dropped-files :raylib)
  (export 'raylib::gen-image-color :raylib)
  (export 'raylib::get-camera-view-matrix :raylib)
  (export 'raylib::erf :raylib)
  (export 'raylib::logbl :raylib)
  (export 'raylib::set-shapes-texture :raylib)
  (export 'raylib::text-length :raylib)
  (export 'raylib::|C:@EA@PIXEL-FORMAT| :raylib)
  (export 'raylib::image-text :raylib)
  (export 'raylib::get-frame-time :raylib)
  (export 'raylib::tanh :raylib)
  (export 'raylib::cbrt :raylib)
  (export 'raylib::vector3-unproject :raylib)
  (export 'raylib::+rmapi+ :raylib)
  (export 'raylib::image-color-contrast :raylib)
  (export 'raylib::clamp :raylib)
  (export 'raylib::height :raylib)
  (export 'raylib::image-draw :raylib)
  (export 'raylib::is-wave-ready :raylib)
  (export 'raylib::coshf :raylib)
  (export 'raylib::fmodl :raylib)
  (export 'raylib::bottom :raylib)
  (export 'raylib::set-sound-volume :raylib)
  (export 'raylib::acosl :raylib)
  (export 'raylib::update-camera-pro :raylib)
  (export 'raylib::pixel-format :raylib)
  (export 'raylib::get-working-directory :raylib)
  (export 'raylib::vector2-angle :raylib)
  (export 'raylib::direction :raylib)
  (export 'raylib::hide-cursor :raylib)
  (export 'raylib::image-alpha-mask :raylib)
  (export 'raylib::gen-mesh-sphere :raylib)
  (export 'raylib::draw-spline-linear :raylib)
  (export 'raylib::vector3-normalize :raylib)
  (export 'raylib::+brown+ :raylib)
  (export 'raylib::set-text-line-spacing :raylib)
  (export 'raylib::|C:@EA@N-PATCH-LAYOUT| :raylib)
  (export 'raylib::update-texture-rec :raylib)
  (export 'raylib::set-mouse-cursor :raylib)
  (export 'raylib::set-mouse-offset :raylib)
  (export 'raylib::load-music-stream-from-memory :raylib)
  (export 'raylib::draw-pixel-v :raylib)
  (export 'raylib::is-key-released :raylib)
  (export 'raylib::set-audio-stream-pan :raylib)
  (export 'raylib::upload-mesh :raylib)
  (export 'raylib::resume-sound :raylib)
  (export 'raylib::image-alpha-crop :raylib)
  (export 'raylib::fade :raylib)
  (export 'raylib::matrix-trace :raylib)
  (export 'raylib::materials :raylib)
  (export 'raylib::directory-exists :raylib)
  (export 'raylib::+gray+ :raylib)
  (export 'raylib::gen-image-gradient-square :raylib)
  (export 'raylib::update-sound :raylib)
  (export 'raylib::get-mesh-bounding-box :raylib)
  (export 'raylib::set-random-seed :raylib)
  (export 'raylib::quaternion-divide :raylib)
  (export 'raylib::hit :raylib)
  (export 'raylib::vector3-transform :raylib)
  (export 'raylib::unload-file-data :raylib)
  (export 'raylib::offset-y :raylib)
  (export 'raylib::+%sys-cdefs-h+ :raylib)
  (export 'raylib::load-random-sequence :raylib)
  (export 'raylib::is-model-animation-valid :raylib)
  (export 'raylib::truncf :raylib)
  (export 'raylib::powl :raylib)
  (export 'raylib::draw-billboard :raylib)
  (export 'raylib::n-patch-layout :raylib)
  (export 'raylib::+pink+ :raylib)
  (export 'raylib::vector2-length-sqr :raylib)
  (export 'raylib::+%math-h+ :raylib)
  (export 'raylib::image-compute-mipmaps :raylib)
  (export 'raylib::draw-circle-v :raylib)
  (export 'raylib::end-blend-mode :raylib)
  (export 'raylib::gen-mesh-knot :raylib)
  (export 'raylib::set-automation-event-base-frame :raylib)
  (export 'raylib::frexpl :raylib)
  (export 'raylib::mem-free :raylib)
  (export 'raylib::sqrt :raylib)
  (export 'raylib::quaternion-to-euler :raylib)
  (export 'raylib::get-ray-collision-box :raylib)
  (export 'raylib::sinh :raylib)
  (export 'raylib::+fp-normal+ :raylib)
  (export 'raylib::+orange+ :raylib)
  (export 'raylib::+rl-vector3-type+ :raylib)
  (export 'raylib::get-clipboard-text :raylib)
  (export 'raylib::image-resize-nn :raylib)
  (export 'raylib::fmaf :raylib)
  (export 'raylib::quaternion-to-axis-angle :raylib)
  (export 'raylib::coshl :raylib)
  (export 'raylib::draw-rectangle-pro :raylib)
  (export 'raylib::image-draw-pixel-v :raylib)
  (export 'raylib::wave :raylib)
  (export 'raylib::|C:@EA@TEXTURE-FILTER| :raylib)
  (export 'raylib::nextafterl :raylib)
  (export 'raylib::draw-line-ex :raylib)
  (export 'raylib::get-random-value :raylib)
  (export 'raylib::paths :raylib)
  (export 'raylib::ilogbl :raylib)
  (export 'raylib::lrintf :raylib)
  (export 'raylib::+deg2rad+ :raylib)
  (export 'raylib::cosl :raylib)
  (export 'raylib::draw-rectangle-v :raylib)
  (export 'raylib::gen-image-gradient-radial :raylib)
  (export 'raylib::draw-rectangle-rounded :raylib)
  (export 'raylib::draw-spline-segment-catmull-rom :raylib)
  (export 'raylib::init-audio-device :raylib)
  (export 'raylib::set-texture-wrap :raylib)
  (export 'raylib::text-replace :raylib)
  (export 'raylib::m10 :raylib)
  (export 'raylib::draw-texture-ex :raylib)
  (export 'raylib::+math-errno+ :raylib)
  (export 'raylib::get-touch-point-id :raylib)
  (export 'raylib::text-format :raylib)
  (export 'raylib::texture-2d :raylib)
  (export 'raylib::m14 :raylib)
  (export 'raylib::set-audio-stream-volume :raylib)
  (export 'raylib::x :raylib)
  (export 'raylib::is-music-ready :raylib)
  (export 'raylib::is-window-minimized :raylib)
  (export 'raylib::set-save-file-text-callback :raylib)
  (export 'raylib::get-camera-projection-matrix :raylib)
  (export 'raylib::hypot :raylib)
  (export 'raylib::+huge-vall+ :raylib)
  (export 'raylib::modfl :raylib)
  (export 'raylib::+mouse-right-button+ :raylib)
  (export 'raylib::|C:@EA@GAMEPAD-BUTTON| :raylib)
  (export 'raylib::model :raylib)
  (export 'raylib::mesh-count :raylib)
  (export 'raylib::vector3-invert :raylib)
  (export 'raylib::get-render-width :raylib)
  (export 'raylib::is-mouse-button-down :raylib)
  (export 'raylib::load-model-from-mesh :raylib)
  (export 'raylib::zoom :raylib)
  (export 'raylib::vector2-equals :raylib)
  (export 'raylib::anim-normals :raylib)
  (export 'raylib::is-cursor-on-screen :raylib)
  (export 'raylib::vector3-perpendicular :raylib)
  (export 'raylib::load-font :raylib)
  (export 'raylib::get-camera-up :raylib)
  (export 'raylib::vector3-rotate-by-quaternion :raylib)
  (export 'raylib::unload-font-data :raylib)
  (export 'raylib::+%bits-libm-simd-decl-stubs-h+ :raylib)
  (export 'raylib::get-color :raylib)
  (export 'raylib::check-collision-recs :raylib)
  (export 'raylib::fmaxl :raylib)
  (export 'raylib::+beige+ :raylib)
  (export 'raylib::copysignf :raylib)
  (export 'raylib::image-draw-rectangle-v :raylib)
  (export 'raylib::check-collision-lines :raylib)
  (export 'raylib::vector3-clamp :raylib)
  (export 'raylib::exp2f :raylib)
  (export 'raylib::vector3-cross-product :raylib)
  (export 'raylib::font :raylib)
  (export 'raylib::image-crop :raylib)
  (export 'raylib::vector3-length-sqr :raylib)
  (export 'raylib::check-collision-boxes :raylib)
  (export 'raylib::atanh :raylib)
  (export 'raylib::load-texture :raylib)
  (export 'raylib::load-image-from-texture :raylib)
  (export 'raylib::m3 :raylib)
  (export 'raylib::+%atfile-source+ :raylib)
  (export 'raylib::left-lens-center :raylib)
  (export 'raylib::sqrtf :raylib)
  (export 'raylib::gen-mesh-cubicmap :raylib)
  (export 'raylib::mouse-button :raylib)
  (export 'raylib::+camera-cull-distance-far+ :raylib)
  (export 'raylib::get-gamepad-axis-movement :raylib)
  (export 'raylib::normal :raylib)
  (export 'raylib::unload-codepoints :raylib)
  (export 'raylib::gen-mesh-poly :raylib)
  (export 'raylib::text-insert :raylib)
  (export 'raylib::image-color-grayscale :raylib)
  (export 'raylib::fdim :raylib)
  (export 'raylib::gamepad-axis :raylib)
  (export 'raylib::draw-cylinder :raylib)
  (export 'raylib::ldexpf :raylib)
  (export 'raylib::lround :raylib)
  (export 'raylib::is-window-resized :raylib)
  (export 'raylib::atanhf :raylib)
  (export 'raylib::atan :raylib)
  (export 'raylib::begin-drawing :raylib)
  (export 'raylib::vector2-subtract-value :raylib)
  (export 'raylib::get-monitor-physical-height :raylib)
  (export 'raylib::vector3-zero :raylib)
  (export 'raylib::+gold+ :raylib)
  (export 'raylib::+rl-rectangle-type+ :raylib)
  (export 'raylib::pause-sound :raylib)
  (export 'raylib::gen-image-font-atlas :raylib)
  (export 'raylib::sin :raylib)
  (export 'raylib::is-cursor-hidden :raylib)
  (export 'raylib::get-file-extension :raylib)
  (export 'raylib::unload-file-text :raylib)
  (export 'raylib::vector2-distance-sqr :raylib)
  (export 'raylib::image-color-tint :raylib)
  (export 'raylib::export-wave :raylib)
  (export 'raylib::is-music-stream-playing :raylib)
  (export 'raylib::+raylib-version-minor+ :raylib)
  (export 'raylib::audio-stream :raylib)
  (export 'raylib::sinl :raylib)
  (export 'raylib::get-world-to-screen-ex :raylib)
  (export 'raylib::set-save-file-data-callback :raylib)
  (export 'raylib::wrap :raylib)
  (export 'raylib::target :raylib)
  (export 'raylib::gen-mesh-cone :raylib)
  (export 'raylib::decode-data-base64 :raylib)
  (export 'raylib::start-automation-event-recording :raylib)
  (export 'raylib::get-shader-location-attrib :raylib)
  (export 'raylib::vector2-transform :raylib)
  (export 'raylib::vector3-clamp-value :raylib)
  (export 'raylib::v-screen-size :raylib)
  (export 'raylib::get-music-time-length :raylib)
  (export 'raylib::+bool+ :raylib)
  (export 'raylib::enable-event-waiting :raylib)
  (export 'raylib::export-wave-as-code :raylib)
  (export 'raylib::set-load-file-data-callback :raylib)
  (export 'raylib::texture-filter :raylib)
  (export 'raylib::bone-count :raylib)
  (export 'raylib::+epsilon+ :raylib)
  (export 'raylib::set-window-min-size :raylib)
  (export 'raylib::+fp-nan+ :raylib)
  (export 'raylib::remainderf :raylib)
  (export 'raylib::+fp-ilogbnan+ :raylib)
  (export 'raylib::chroma-ab-correction :raylib)
  (export 'raylib::set-sound-pan :raylib)
  (export 'raylib::get-gesture-drag-vector :raylib)
  (export 'raylib::+%posix-c-source+ :raylib)
  (export 'raylib::log10l :raylib)
  (export 'raylib::cos :raylib)
  (export 'raylib::right-lens-center :raylib)
  (export 'raylib::camera-yaw :raylib)
  (export 'raylib::vector3-multiply :raylib)
  (export 'raylib::automation-event-list :raylib)
  (export 'raylib::load-image-anim :raylib)
  (export 'raylib::is-gamepad-available :raylib)
  (export 'raylib::r-audio-processor :raylib)
  (export 'raylib::draw-spline-catmull-rom :raylib)
  (export 'raylib::recs :raylib)
  (export 'raylib::nextafterf :raylib)
  (export 'raylib::fmin :raylib)
  (export 'raylib::image-flip-horizontal :raylib)
  (export 'raylib::fovy :raylib)
  (export 'raylib::+green+ :raylib)
  (export 'raylib::text-to-lower :raylib)
  (export 'raylib::+rlapi+ :raylib)
  (export 'raylib::draw-circle-3d :raylib)
  (export 'raylib::asinhf :raylib)
  (export 'raylib::width :raylib)
  (export 'raylib::bind-pose :raylib)
  (export 'raylib::vao-id :raylib)
  (export 'raylib::m4 :raylib)
  (export 'raylib::matrix-identity :raylib)
  (export 'raylib::get-gamepad-axis-count :raylib)
  (export 'raylib::glyph-padding :raylib)
  (export 'raylib::is-key-up :raylib)
  (export 'raylib::vector2-clamp :raylib)
  (export 'raylib::update-music-stream :raylib)
  (export 'raylib::log1pl :raylib)
  (export 'raylib::fabsl :raylib)
  (export 'raylib::load-model-animations :raylib)
  (export 'raylib::material-map :raylib)
  (export 'raylib::load-image-svg :raylib)
  (export 'raylib::load-shader-from-memory :raylib)
  (export 'raylib::depth :raylib)
  (export 'raylib::load-model :raylib)
  (export 'raylib::exp2l :raylib)
  (export 'raylib::draw-text-pro :raylib)
  (export 'raylib::logb :raylib)
  (export 'raylib::+raylib-version-major+ :raylib)
  (export 'raylib::+%lp64+ :raylib)
  (export 'raylib::set-texture-filter :raylib)
  (export 'raylib::matrix-frustum :raylib)
  (export 'raylib::tanhl :raylib)
  (export 'raylib::a :raylib)
  (export 'raylib::type :raylib)
  (export 'raylib::export-image :raylib)
  (export 'raylib::camera-3d :raylib)
  (export 'raylib::set-load-file-text-callback :raylib)
  (export 'raylib::get-world-to-screen :raylib)
  (export 'raylib::vector2-normalize :raylib)
  (export 'raylib::color-to-hsv :raylib)
  (export 'raylib::vector3-ortho-normalize :raylib)
  (export 'raylib::draw-ellipse-lines :raylib)
  (export 'raylib::vector3-max :raylib)
  (export 'raylib::load-vr-stereo-config :raylib)
  (export 'raylib::get-monitor-physical-width :raylib)
  (export 'raylib::rintf :raylib)
  (export 'raylib::sound :raylib)
  (export 'raylib::set-config-flags :raylib)
  (export 'raylib::draw-rectangle-rounded-lines :raylib)
  (export 'raylib::vector2-divide :raylib)
  (export 'raylib::set-exit-key :raylib)
  (export 'raylib::vector3-to-float-v :raylib)
  (export 'raylib::draw-circle :raylib)
  (export 'raylib::frame-count :raylib)
  (export 'raylib::get-master-volume :raylib)
  (export 'raylib::%float32 :raylib)
  (export 'raylib::wave-format :raylib)
  (export 'raylib::image-to-pot :raylib)
  (export 'raylib::+m-2-sqrtpi+ :raylib)
  (export 'raylib::color-from-normalized :raylib)
  (export 'raylib::load-image-palette :raylib)
  (export 'raylib::scalbnl :raylib)
  (export 'raylib::cosf :raylib)
  (export 'raylib::draw-cylinder-wires :raylib)
  (export 'raylib::draw-sphere :raylib)
  (export 'raylib::scalbn :raylib)
  (export 'raylib::+black+ :raylib)
  (export 'raylib::tgammal :raylib)
  (export 'raylib::right :raylib)
  (export 'raylib::get-gesture-detected :raylib)
  (export 'raylib::get-codepoint-previous :raylib)
  (export 'raylib::+m-sqrt2+ :raylib)
  (export 'raylib::gen-texture-mipmaps :raylib)
  (export 'raylib::nextafter :raylib)
  (export 'raylib::draw-rectangle-gradient-v :raylib)
  (export 'raylib::toggle-borderless-windowed :raylib)
  (export 'raylib::+math-errhandling+ :raylib)
  (export 'raylib::show-cursor :raylib)
  (export 'raylib::left :raylib)
  (export 'raylib::matrix :raylib)
  (export 'raylib::set-gamepad-mappings :raylib)
  (export 'raylib::matrix-subtract :raylib)
  (export 'raylib::end-vr-stereo-mode :raylib)
  (export 'raylib::|C:@EA@SHADER-LOCATION-INDEX| :raylib)
  (export 'raylib::sample-size :raylib)
  (export 'raylib::expl :raylib)
  (export 'raylib::is-shader-ready :raylib)
  (export 'raylib::m5 :raylib)
  (export 'raylib::lrintl :raylib)
  (export 'raylib::stop-music-stream :raylib)
  (export 'raylib::+%bits-floatn-h+ :raylib)
  (export 'raylib::image-color-invert :raylib)
  (export 'raylib::+true+ :raylib)
  (export 'raylib::ilogbf :raylib)
  (export 'raylib::position :raylib)
  (export 'raylib::color-normalize :raylib)
  (export 'raylib::ceil :raylib)
  (export 'raylib::export-mesh :raylib)
  (export 'raylib::+magenta+ :raylib)
  (export 'raylib::load-image-colors :raylib)
  (export 'raylib::shader :raylib)
  (export 'raylib::draw-text-codepoint :raylib)
  (export 'raylib::set-window-max-size :raylib)
  (export 'raylib::get-touch-point-count :raylib)
  (export 'raylib::is-key-down :raylib)
  (export 'raylib::unload-wave :raylib)
  (export 'raylib::log2l :raylib)
  (export 'raylib::init-window :raylib)
  (export 'raylib::|C:@EA@SHADER-UNIFORM-DATA-TYPE| :raylib)
  (export 'raylib::draw-texture-n-patch :raylib)
  (export 'raylib::+darkbrown+ :raylib)
  (export 'raylib::get-monitor-height :raylib)
  (export 'raylib::check-collision-point-rec :raylib)
  (export 'raylib::bone-ids :raylib)
  (export 'raylib::is-window-fullscreen :raylib)
  (export 'raylib::begin-texture-mode :raylib)
  (export 'raylib::mouse-cursor :raylib)
  (export 'raylib::set-window-title :raylib)
  (export 'raylib::ray-collision :raylib)
  (export 'raylib::gen-mesh-torus :raylib)
  (export 'raylib::vector3-one :raylib)
  (export 'raylib::get-touch-x :raylib)
  (export 'raylib::%float64x :raylib)
  (export 'raylib::+m-2-pi+ :raylib)
  (export 'raylib::clear-background :raylib)
  (export 'raylib::+%default-source+ :raylib)
  (export 'raylib::vector3-add :raylib)
  (export 'raylib::vector2-distance :raylib)
  (export 'raylib::matrix-translate :raylib)
  (export 'raylib::trace-log-level :raylib)
  (export 'raylib::draw-cube :raylib)
  (export 'raylib::+raymath-h+ :raylib)
  (export 'raylib::erfl :raylib)
  (export 'raylib::|C:@EA@KEYBOARD-KEY| :raylib)
  (export 'raylib::gen-image-perlin-noise :raylib)
  (export 'raylib::+m-log2e+ :raylib)
  (export 'raylib::gen-mesh-hemi-sphere :raylib)
  (export 'raylib::acosh :raylib)
  (export 'raylib::|C:@EA@TEXTURE-WRAP| :raylib)
  (export 'raylib::floor :raylib)
  (export 'raylib::h-screen-size :raylib)
  (export 'raylib::unload-model-animation :raylib)
  (export 'raylib::check-collision-box-sphere :raylib)
  (export 'raylib::interpupillary-distance :raylib)
  (export 'raylib::vector3-subtract :raylib)
  (export 'raylib::color-contrast :raylib)
  (export 'raylib::draw-sphere-ex :raylib)
  (export 'raylib::rintl :raylib)
  (export 'raylib::erfcf :raylib)
  (export 'raylib::glyph-info :raylib)
  (export 'raylib::gen-image-checked :raylib)
  (export 'raylib::draw-spline-bezier-cubic :raylib)
  (export 'raylib::unload-automation-event-list :raylib)
  (export 'raylib::vr-device-info :raylib)
  (export 'raylib::end-mode-2d :raylib)
  (export 'raylib::automation-event :raylib)
  (export 'raylib::quaternion-lerp :raylib)
  (export 'raylib::load-render-texture :raylib)
  (export 'raylib::transform :raylib)
  (export 'raylib::draw-circle-lines :raylib)
  (export 'raylib::remap :raylib)
  (export 'raylib::get-touch-position :raylib)
  (export 'raylib::pow :raylib)
  (export 'raylib::atanf :raylib)
  (export 'raylib::vector3-dot-product :raylib)
  (export 'raylib::rotation :raylib)
  (export 'raylib::+material-map-specular+ :raylib)
  (export 'raylib::get-prev-directory-path :raylib)
  (export 'raylib::get-current-monitor :raylib)
  (export 'raylib::quaternion-scale :raylib)
  (export 'raylib::shader-attribute-data-type :raylib)
  (export 'raylib::draw-spline-segment-linear :raylib)
  (export 'raylib::draw-line-v :raylib)
  (export 'raylib::indices :raylib)
  (export 'raylib::nearbyint :raylib)
  (export 'raylib::detach-audio-mixed-processor :raylib)
  (export 'raylib::draw-ring :raylib)
  (export 'raylib::tanf :raylib)
  (export 'raylib::llrintf :raylib)
  (export 'raylib::get-ray-collision-mesh :raylib)
  (export 'raylib::expf :raylib)
  (export 'raylib::draw-spline-segment-bezier-cubic :raylib)
  (export 'raylib::get-model-bounding-box :raylib)
  (export 'raylib::get-spline-point-catmull-rom :raylib)
  (export 'raylib::set-target-fps :raylib)
  (export 'raylib::export-image-as-code :raylib)
  (export 'raylib::get-window-position :raylib)
  (export 'raylib::image-draw-rectangle-rec :raylib)
  (export 'raylib::is-key-pressed-repeat :raylib)
  (export 'raylib::r-audio-buffer :raylib)
  (export 'raylib::set-gestures-enabled :raylib)
  (export 'raylib::change-directory :raylib)
  (export 'raylib::exp2 :raylib)
  (export 'raylib::draw-point-3d :raylib)
  (export 'raylib::draw-pixel :raylib)
  (export 'raylib::draw-rectangle-lines :raylib)
  (export 'raylib::get-pixel-data-size :raylib)
  (export 'raylib::+lightgray+ :raylib)
  (export 'raylib::draw-sphere-wires :raylib)
  (export 'raylib::floorf :raylib)
  (export 'raylib::matrix-ortho :raylib)
  (export 'raylib::expm1 :raylib)
  (export 'raylib::%float64 :raylib)
  (export 'raylib::vector3-add-value :raylib)
  (export 'raylib::set-window-position :raylib)
  (export 'raylib::draw-capsule-wires :raylib)
  (export 'raylib::load-materials :raylib)
  (export 'raylib::fma :raylib)
  (export 'raylib::gen-mesh-heightmap :raylib)
  (export 'raylib::draw-spline-segment-basis :raylib)
  (export 'raylib::channels :raylib)
  (export 'raylib::get-spline-point-linear :raylib)
  (export 'raylib::base-size :raylib)
  (export 'raylib::check-collision-spheres :raylib)
  (export 'raylib::update-camera :raylib)
  (export 'raylib::wait-time :raylib)
  (export 'raylib::logbf :raylib)
  (export 'raylib::image-dither :raylib)
  (export 'raylib::vector2-move-towards :raylib)
  (export 'raylib::image-rotate-ccw :raylib)
  (export 'raylib::tan :raylib)
  (export 'raylib::image-alpha-clear :raylib)
  (export 'raylib::+fp-zero+ :raylib)
  (export 'raylib::load-file-text :raylib)
  (export 'raylib::log1pf :raylib)
  (export 'raylib::+material-map-diffuse+ :raylib)
  (export 'raylib::mesh :raylib)
  (export 'raylib::begin-scissor-mode :raylib)
  (export 'raylib::atanl :raylib)
  (export 'raylib::image-draw-text-ex :raylib)
  (export 'raylib::render-texture-2d :raylib)
  (export 'raylib::set-automation-event-list :raylib)
  (export 'raylib::get-music-time-played :raylib)
  (export 'raylib::hypotf :raylib)
  (export 'raylib::vector3-distance :raylib)
  (export 'raylib::+skyblue+ :raylib)
  (export 'raylib::export-data-as-code :raylib)
  (export 'raylib::unload-model-animations :raylib)
  (export 'raylib::acoshl :raylib)
  (export 'raylib::enable-cursor :raylib)
  (export 'raylib::top :raylib)
  (export 'raylib::unload-sound :raylib)
  (export 'raylib::ldexp :raylib)
  (export 'raylib::rint :raylib)
  (export 'raylib::play-sound :raylib)
  (export 'raylib::resume-music-stream :raylib)
  (export 'raylib::is-sound-playing :raylib)
  (export 'raylib::mem-alloc :raylib)
  (export 'raylib::vector2-lerp :raylib)
  (export 'raylib::+math-errexcept+ :raylib)
  (export 'raylib::id :raylib)
  (export 'raylib::get-ray-collision-quad :raylib)
  (export 'raylib::draw-billboard-rec :raylib)
  (export 'raylib::load-sound-from-wave :raylib)
  (export 'raylib::draw-triangle-3d :raylib)
  (export 'raylib::roundf :raylib)
  (export 'raylib::set-trace-log-level :raylib)
  (export 'raylib::erfcl :raylib)
  (export 'raylib::fminl :raylib)
  (export 'raylib::image-alpha-premultiply :raylib)
  (export 'raylib::load-dropped-files :raylib)
  (export 'raylib::set-window-monitor :raylib)
  (export 'raylib::fmod :raylib)
  (export 'raylib::draw-spline-bezier-quadratic :raylib)
  (export 'raylib::export-image-to-memory :raylib)
  (export 'raylib::+m-pi-2+ :raylib)
  (export 'raylib::export-font-as-code :raylib)
  (export 'raylib::maximize-window :raylib)
  (export 'raylib::log2f :raylib)
  (export 'raylib::get-spline-point-basis :raylib)
  (export 'raylib::material-map-index :raylib)
  (export 'raylib::float-equals :raylib)
  (export 'raylib::atan2f :raylib)
  (export 'raylib::get-spline-point-bezier-cubic :raylib)
  (export 'raylib::+darkpurple+ :raylib)
  (export 'raylib::load-font-from-image :raylib)
  (export 'raylib::nexttowardf :raylib)
  (export 'raylib::vector3-min :raylib)
  (export 'raylib::m11 :raylib)
  (export 'raylib::+mouse-middle-button+ :raylib)
  (export 'raylib::set-audio-stream-pitch :raylib)
  (export 'raylib::truncl :raylib)
  (export 'raylib::float16 :raylib)
  (export 'raylib::get-camera-forward :raylib)
  (export 'raylib::ceill :raylib)
  (export 'raylib::draw-cylinder-ex :raylib)
  (export 'raylib::+false+ :raylib)
  (export 'raylib::image-copy :raylib)
  (export 'raylib::get-monitor-refresh-rate :raylib)
  (export 'raylib::+m-e+ :raylib)
  (export 'raylib::check-collision-circles :raylib)
  (export 'raylib::camera-pitch :raylib)
  (export 'raylib::logf :raylib)
  (export 'raylib::load-font-ex :raylib)
  (export 'raylib::remquol :raylib)
  (export 'raylib::load-automation-event-list :raylib)
  (export 'raylib::draw-triangle-lines :raylib)
  (export 'raylib::n-patch-info :raylib)
  (export 'raylib::is-audio-stream-ready :raylib)
  (export 'raylib::load-sound :raylib)
  (export 'raylib::vector2-multiply :raylib)
  (export 'raylib::restore-window :raylib)
  (export 'raylib::image-rotate-cw :raylib)
  (export 'raylib::|C:@EA@MOUSE-CURSOR| :raylib)
  (export 'raylib::vector2-reflect :raylib)
  (export 'raylib::vector3-length :raylib)
  (export 'raylib::matrix-scale :raylib)
  (export 'raylib::scalblnl :raylib)
  (export 'raylib::+blue+ :raylib)
  (export 'raylib::get-time :raylib)
  (export 'raylib::offset :raylib)
  (export 'raylib::is-audio-stream-playing :raylib)
  (export 'raylib::set-audio-stream-buffer-size-default :raylib)
  (export 'raylib::load-music-stream :raylib)
  (export 'raylib::draw-cylinder-wires-ex :raylib)
  (export 'raylib::camera :raylib)
  (export 'raylib::color-from-hsv :raylib)
  (export 'raylib::atan2l :raylib)
  (export 'raylib::unload-directory-files :raylib)
  (export 'raylib::detach-audio-stream-processor :raylib)
  (export 'raylib::unload-wave-samples :raylib)
  (export 'raylib::|C:@EA@CUBEMAP-LAYOUT| :raylib)
  (export 'raylib::vector2-negate :raylib)
  (export 'raylib::is-gamepad-button-down :raylib)
  (export 'raylib::is-window-focused :raylib)
  (export 'raylib::set-mouse-position :raylib)
  (export 'raylib::hypotl :raylib)
  (export 'raylib::update-model-animation :raylib)
  (export 'raylib::draw-billboard-pro :raylib)
  (export 'raylib::draw-rectangle-gradient-h :raylib)
  (export 'raylib::camera-move-forward :raylib)
  (export 'raylib::get-screen-to-world-2d :raylib)
  (export 'raylib::vertices :raylib)
  (export 'raylib::bone-weights :raylib)
  (export 'raylib::|C:@EA@SHADER-ATTRIBUTE-DATA-TYPE| :raylib)
  (export 'raylib::load-sound-alias :raylib)
  (export 'raylib::gen-mesh-cube :raylib)
  (export 'raylib::check-collision-point-line :raylib)
  (export 'raylib::stop-automation-event-recording :raylib)
  (export 'raylib::update-texture :raylib)
  (export 'raylib::load-audio-stream :raylib)
  (export 'raylib::draw-ring-lines :raylib)
  (export 'raylib::texcoords2 :raylib)
  (export 'raylib::attach-audio-mixed-processor :raylib)
  (export 'raylib::anim-vertices :raylib)
  (export 'raylib::max :raylib)
  (export 'raylib::get-image-color :raylib)
  (export 'raylib::is-window-hidden :raylib)
  (export 'raylib::is-image-ready :raylib)
  (export 'raylib::%%val :raylib)
  (export 'raylib::image-draw-circle :raylib)
  (export 'raylib::camera-move-right :raylib)
  (export 'raylib::vector4 :raylib)
  (export 'raylib::atan2 :raylib)
  (export 'raylib::load-image-from-memory :raylib)
  (export 'raylib::get-world-to-screen-2d :raylib)
  (export 'raylib::texture :raylib)
  (export 'raylib::vector3-rotate-by-axis-angle :raylib)
  (export 'raylib::unload-image-colors :raylib)
  (export 'raylib::|C:@EA@GAMEPAD-AXIS| :raylib)
  (export 'raylib::camera-move-up :raylib)
  (export 'raylib::blend-mode :raylib)
  (export 'raylib::seek-music-stream :raylib)
  (export 'raylib::image-draw-circle-v :raylib)
  (export 'raylib::+fp-infinite+ :raylib)
  (export 'raylib::colors :raylib)
  (export 'raylib::cubemap-layout :raylib)
  (export 'raylib::file-exists :raylib)
  (export 'raylib::get-pixel-color :raylib)
  (export 'raylib::distance :raylib)
  (export 'raylib::get-camera-matrix :raylib)
  (export 'raylib::ceilf :raylib)
  (export 'raylib::draw-ray :raylib)
  (export 'raylib::is-path-file :raylib)
  (export 'raylib::+m-pi-4+ :raylib)
  (export 'raylib::image-draw-circle-lines :raylib)
  (export 'raylib::ctx-data :raylib)
  (export 'raylib::camera-projection :raylib)
  (export 'raylib::matrix-rotate-y :raylib)
  (export 'raylib::draw-texture-v :raylib)
  (export 'raylib::+pi+ :raylib)
  (export 'raylib::begin-blend-mode :raylib)
  (export 'raylib::camera-2d :raylib)
  (export 'raylib::draw-line-3d :raylib)
  (export 'raylib::unload-material :raylib)
  (export 'raylib::is-render-texture-ready :raylib)
  (export 'raylib::quaternion-invert :raylib)
  (export 'raylib::is-texture-ready :raylib)
  (export 'raylib::vector2-add :raylib)
  (export 'raylib::save-file-text-callback :raylib)
  (export 'raylib::get-monitor-width :raylib)
  (export 'raylib::unload-texture :raylib)
  (export 'raylib::is-gamepad-button-pressed :raylib)
  (export 'raylib::vector3-barycenter :raylib)
  (export 'raylib::set-shader-value :raylib)
  (export 'raylib::vector3-equals :raylib)
  (export 'raylib::y :raylib)
  (export 'raylib::parent :raylib)
  (export 'raylib::vector2-add-value :raylib)
  (export 'raylib::get-spline-point-bezier-quad :raylib)
  (export 'raylib::+raylib-h+ :raylib)
  (export 'raylib::quaternion-to-matrix :raylib)
  (export 'raylib::image-draw-line :raylib)
  (export 'raylib::locs :raylib)
  (export 'raylib::+m-pi+ :raylib)
  (export 'raylib::fmaxf :raylib)
  (export 'raylib::compress-data :raylib)
  (export 'raylib::nearbyintf :raylib)
  (export 'raylib::get-file-length :raylib)
  (export 'raylib::vector3-subtract-value :raylib)
  (export 'raylib::+yellow+ :raylib)
  (export 'raylib::+darkgray+ :raylib)
  (export 'raylib::log2 :raylib)
  (export 'raylib::get-monitor-position :raylib)
  (export 'raylib::triangle-count :raylib)
  (export 'raylib::vector3-project :raylib)
  (export 'raylib::unload-shader :raylib)
  (export 'raylib::play-music-stream :raylib)
  (export 'raylib::gamepad-button :raylib)
  (export 'raylib::draw-cube-wires :raylib)
  (export 'raylib::exp :raylib)
  (export 'raylib::ilogb :raylib)
  (export 'raylib::ldexpl :raylib)
  (export 'raylib::load-image :raylib)
  (export 'raylib::mem-realloc :raylib)
  (export 'raylib::view-offset :raylib)
  (export 'raylib::get-mouse-delta :raylib)
  (export 'raylib::image-draw-rectangle-lines :raylib)
  (export 'raylib::get-camera-right :raylib)
  (export 'raylib::|C:@EA@CONFIG-FLAGS| :raylib)
  (export 'raylib::w :raylib)
  (export 'raylib::unload-vr-stereo-config :raylib)
  (export 'raylib::matrix-look-at :raylib)
  (export 'raylib::+lime+ :raylib)
  (export 'raylib::image-color-brightness :raylib)
  (export 'raylib::quaternion-length :raylib)
  (export 'raylib::load-image-from-screen :raylib)
  (export 'raylib::draw-poly-lines :raylib)
  (export 'raylib::play-automation-event :raylib)
  (export 'raylib::text-subtext :raylib)
  (export 'raylib::quaternion-subtract :raylib)
  (export 'raylib::fabs :raylib)
  (export 'raylib::frame :raylib)
  (export 'raylib::disable-cursor :raylib)
  (export 'raylib::matrix-transpose :raylib)
  (export 'raylib::gen-mesh-tangents :raylib)
  (export 'raylib::unload-font :raylib)
  (export 'raylib::log10 :raylib)
  (export 'raylib::load-directory-files :raylib)
  (export 'raylib::image-from-image :raylib)
  (export 'raylib::is-window-ready :raylib)
  (export 'raylib::set-pixel-color :raylib)
  (export 'raylib::load-file-data-callback :raylib)
  (export 'raylib::vector2-line-angle :raylib)
  (export 'raylib::draw-model :raylib)
  (export 'raylib::draw-texture-pro :raylib)
  (export 'raylib::material-count :raylib)
  (export 'raylib::tgammaf :raylib)
  (export 'raylib::lens-separation-distance :raylib)
  (export 'raylib::offset-x :raylib)
  (export 'raylib::quaternion-add-value :raylib)
  (export 'raylib::vector3 :raylib)
  (export 'raylib::gen-image-text :raylib)
  (export 'raylib::+%va-list+ :raylib)
  (export 'raylib::draw-spline-segment-bezier-quadratic :raylib)
  (export 'raylib::is-mouse-button-up :raylib)
  (export 'raylib::tanhf :raylib)
  (export 'raylib::acos :raylib)
  (export 'raylib::m13 :raylib)
  (export 'raylib::get-mouse-x :raylib)
  (export 'raylib::asinf :raylib)
  (export 'raylib::eye-to-screen-distance :raylib)
  (export 'raylib::scalbnf :raylib)
  (export 'raylib::quaternion-from-axis-angle :raylib)
  (export 'raylib::set-window-focused :raylib)
  (export 'raylib::expm1l :raylib)
  (export 'raylib::get-glyph-info :raylib)
  (export 'raylib::v-resolution :raylib)
  (export 'raylib::maps :raylib)
  (export 'raylib::fmodf :raylib)
  (export 'raylib::cbrtf :raylib)
  (export 'raylib::left-screen-center :raylib)
  (export 'raylib::h-resolution :raylib)
  (export 'raylib::scale-in :raylib)
  (export 'raylib::projection :raylib)
  (export 'raylib::vector3-negate :raylib)
  (export 'raylib::get-codepoint-next :raylib)
  (export 'raylib::+huge-val+ :raylib)
  (export 'raylib::get-directory-path :raylib)
  (export 'raylib::is-key-pressed :raylib)
  (export 'raylib::quaternion-from-vector3-to-vector3 :raylib)
  (export 'raylib::stop-sound :raylib)
  (export 'raylib::model-animation :raylib)
  (export 'raylib::is-audio-device-ready :raylib)
  (export 'raylib::vector2-dot-product :raylib)
  (export 'raylib::camera-mode :raylib)
  (export 'raylib::decompress-data :raylib)
  (export 'raylib::mipmaps :raylib)
  (export 'raylib::quaternion-nlerp :raylib)
  (export 'raylib::color :raylib)
  (export 'raylib::draw-model-wires-ex :raylib)
  (export 'raylib::matrix-rotate :raylib)
  (export 'raylib::acosf :raylib)
  (export 'raylib::+%bits-types-h+ :raylib)
  (export 'raylib::glyph-count :raylib)
  (export 'raylib::quaternion :raylib)
  (export 'raylib::load-material-default :raylib)
  (export 'raylib::set-model-mesh-material :raylib)
  (export 'raylib::float3 :raylib)
  (export 'raylib::llroundl :raylib)
  (export 'raylib::matrix-perspective :raylib)
  (export 'raylib::draw-triangle :raylib)
  (export 'raylib::tangents :raylib)
  (export 'raylib::image :raylib)
  (export 'raylib::text-to-pascal :raylib)
  (export 'raylib::events :raylib)
  (export 'raylib::image-draw-circle-lines-v :raylib)
  (export 'raylib::|C:@SA@--FSID-T| :raylib)
  (export 'raylib::vector2-rotate :raylib)
  (export 'raylib::ray :raylib)
  (export 'raylib::+white+ :raylib)
  (export 'raylib::music :raylib)
  (export 'raylib::toggle-fullscreen :raylib)
  (export 'raylib::powf :raylib)
  (export 'raylib::lrint :raylib)
  (export 'raylib::image-draw-line-v :raylib)
  (export 'raylib::get-file-name-without-ext :raylib)
  (export 'raylib::vector2-zero :raylib)
  (export 'raylib::tgamma :raylib)
  (export 'raylib::rectangle :raylib)
  (export 'raylib::get-gesture-hold-duration :raylib)
  (export 'raylib::matrix-add :raylib)
  (export 'raylib::set-shader-value-texture :raylib)
  (export 'raylib::unload-sound-alias :raylib)
  (export 'raylib::bone-info :raylib)
  (export 'raylib::unload-utf8 :raylib)
  (export 'raylib::vector2-clamp-value :raylib)
  (export 'raylib::+mouse-left-button+ :raylib)
  (export 'raylib::draw-spline-basis :raylib)
  (export 'raylib::get-char-pressed :raylib)
  (export 'raylib::draw-rectangle-gradient-ex :raylib)
  (export 'raylib::draw-circle-gradient :raylib)
  (export 'raylib::floorl :raylib)
  (export 'raylib::update-mesh-buffer :raylib)
  (export 'raylib::quaternion-normalize :raylib)
  (export 'raylib::quaternion-multiply :raylib)
  (export 'raylib::scalbln :raylib)
  (export 'raylib::image-rotate :raylib)
  (export 'raylib::pause-music-stream :raylib)
  (export 'raylib::+%bits-typesizes-h+ :raylib)
  (export 'raylib::|C:@EA@CAMERA-PROJECTION| :raylib)
  (export 'raylib::draw-circle-sector :raylib)
  (export 'raylib::text-is-equal :raylib))

(defun raylib::initialize-claw-library-raylib ()
  (unless (zerop (cffi:foreign-funcall
                   "__claw_raylib_loader_BD962913A554D544B067BB2B648A3A00F347D772"
                   :int))
    (error "Failed to initialize adapater")))

