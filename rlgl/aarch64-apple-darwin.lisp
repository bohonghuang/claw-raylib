;; Generated by :claw at 2023-11-19T11:30:12.421528Z
(uiop:define-package :rlgl (:use))
(uiop:define-package :claw-raylib.rlgl~pristine (:use :cl))
(common-lisp:in-package :claw-raylib.rlgl~pristine)

(defparameter rlgl::+graphics-api-opengl-33+ nil)

(defparameter rlgl::+rlapi+ nil)

(defparameter rlgl::+rlgl-h+ nil)

(defparameter rlgl::+rlgl-render-textures-hint+ nil)

(defparameter rlgl::+rlgl-version+ "4.5")

(defparameter rlgl::+blend-color+ 32773)

(defparameter rlgl::+blend-dst-alpha+ 32970)

(defparameter rlgl::+blend-dst-rgb+ 32968)

(defparameter rlgl::+blend-equation+ 32777)

(defparameter rlgl::+blend-equation-alpha+ 34877)

(defparameter rlgl::+blend-equation-rgb+ 32777)

(defparameter rlgl::+blend-src-alpha+ 32971)

(defparameter rlgl::+blend-src-rgb+ 32969)

(defparameter rlgl::+compute-shader+ 37305)

(defparameter rlgl::+constant-alpha+ 32771)

(defparameter rlgl::+constant-color+ 32769)

(defparameter rlgl::+cull-distance-far+ 1000.0D0)

(defparameter rlgl::+cull-distance-near+ 0.01D0)

(defparameter rlgl::+default-batch-buffers+ 1)

(defparameter rlgl::+default-batch-buffer-elements+ 8192)

(defparameter rlgl::+default-batch-drawcalls+ 256)

(defparameter rlgl::+default-batch-max-texture-units+ 4)

(defparameter rlgl::+dst-alpha+ 772)

(defparameter rlgl::+dst-color+ 774)

(defparameter rlgl::+dynamic-copy+ 35050)

(defparameter rlgl::+dynamic-draw+ 35048)

(defparameter rlgl::+dynamic-read+ 35049)

(defparameter rlgl::+float+ 5126)

(defparameter rlgl::+fragment-shader+ 35632)

(defparameter rlgl::+func-add+ 32774)

(defparameter rlgl::+func-reverse-subtract+ 32779)

(defparameter rlgl::+func-subtract+ 32778)

(defparameter rlgl::+lines+ 1)

(defparameter rlgl::+matrix-type+ nil)

(defparameter rlgl::+max+ 32776)

(defparameter rlgl::+max-matrix-stack-size+ 32)

(defparameter rlgl::+max-shader-locations+ 32)

(defparameter rlgl::+min+ 32775)

(defparameter rlgl::+modelview+ 5888)

(defparameter rlgl::+one+ 1)

(defparameter rlgl::+one-minus-constant-alpha+ 32772)

(defparameter rlgl::+one-minus-constant-color+ 32770)

(defparameter rlgl::+one-minus-dst-alpha+ 773)

(defparameter rlgl::+one-minus-dst-color+ 775)

(defparameter rlgl::+one-minus-src-alpha+ 771)

(defparameter rlgl::+one-minus-src-color+ 769)

(defparameter rlgl::+projection+ 5889)

(defparameter rlgl::+quads+ 7)

(defparameter rlgl::+shader-loc-map-diffuse+ 15)

(defparameter rlgl::+shader-loc-map-specular+ 16)

(defparameter rlgl::+src-alpha+ 770)

(defparameter rlgl::+src-alpha-saturate+ 776)

(defparameter rlgl::+src-color+ 768)

(defparameter rlgl::+static-copy+ 35046)

(defparameter rlgl::+static-draw+ 35044)

(defparameter rlgl::+static-read+ 35045)

(defparameter rlgl::+stream-copy+ 35042)

(defparameter rlgl::+stream-draw+ 35040)

(defparameter rlgl::+stream-read+ 35041)

(defparameter rlgl::+texture+ 5890)

(defparameter rlgl::+texture-filter-anisotropic+ 12288)

(defparameter rlgl::+texture-filter-linear+ 9729)

(defparameter rlgl::+texture-filter-linear-mip-nearest+ 9985)

(defparameter rlgl::+texture-filter-mip-linear+ 9987)

(defparameter rlgl::+texture-filter-mip-nearest+ 9984)

(defparameter rlgl::+texture-filter-nearest+ 9728)

(defparameter rlgl::+texture-filter-nearest-mip-linear+ 9986)

(defparameter rlgl::+texture-mag-filter+ 10240)

(defparameter rlgl::+texture-min-filter+ 10241)

(defparameter rlgl::+texture-mipmap-bias-ratio+ 16384)

(defparameter rlgl::+texture-wrap-clamp+ 33071)

(defparameter rlgl::+texture-wrap-mirror-clamp+ 34626)

(defparameter rlgl::+texture-wrap-mirror-repeat+ 33648)

(defparameter rlgl::+texture-wrap-repeat+ 10497)

(defparameter rlgl::+texture-wrap-s+ 10242)

(defparameter rlgl::+texture-wrap-t+ 10243)

(defparameter rlgl::+triangles+ 4)

(defparameter rlgl::+unsigned-byte+ 5121)

(defparameter rlgl::+vertex-shader+ 35633)

(defparameter rlgl::+zero+ 0)

(defparameter rlgl::+%lp64+ 1)

(defparameter rlgl::+bool+ nil)

(defparameter rlgl::+false+ 0)

(defparameter rlgl::+true+ 1)

(cffi:defcenum (rlgl::|C:@EA@RL-BLEND-MODE| :unsigned-int)
               "/usr/include/rlgl.h:452:9"
               (:alpha 0)
               (:additive 1)
               (:multiplied 2)
               (:add-colors 3)
               (:subtract-colors 4)
               (:alpha-premultiply 5)
               (:custom 6)
               (:custom-separate 7))

(cffi:defcenum (rlgl::|C:@EA@RL-CULL-MODE| :unsigned-int)
               "/usr/include/rlgl.h:545:9"
               (:front 0)
               (:back 1))

(cffi:defcenum (rlgl::|C:@EA@RL-FRAMEBUFFER-ATTACH-TEXTURE-TYPE|
                :unsigned-int)
               "/usr/include/rlgl.h:533:9"
               (:cubemap-positive-x 0)
               (:cubemap-negative-x 1)
               (:cubemap-positive-y 2)
               (:cubemap-negative-y 3)
               (:cubemap-positive-z 4)
               (:cubemap-negative-z 5)
               (:texture2d 100)
               (:renderbuffer 200))

(cffi:defcenum (rlgl::|C:@EA@RL-FRAMEBUFFER-ATTACH-TYPE|
                :unsigned-int)
               "/usr/include/rlgl.h:519:9"
               (:color-channel0 0)
               (:color-channel1 1)
               (:color-channel2 2)
               (:color-channel3 3)
               (:color-channel4 4)
               (:color-channel5 5)
               (:color-channel6 6)
               (:color-channel7 7)
               (:depth 100)
               (:stencil 200))

(cffi:defcenum (rlgl::|C:@EA@RL-GL-VERSION| :unsigned-int)
               "/usr/include/rlgl.h:388:9"
               (:|11| 1)
               (:|21| 2)
               (:|33| 3)
               (:|43| 4)
               (:es-20 5)
               (:es-30 6))

(cffi:defcenum (rlgl::|C:@EA@RL-PIXEL-FORMAT| :unsigned-int)
               "/usr/include/rlgl.h:412:9"
               (:uncompressed-grayscale 1)
               (:uncompressed-gray-alpha 2)
               (:uncompressed-r5g6b5 3)
               (:uncompressed-r8g8b8 4)
               (:uncompressed-r5g5b5a1 5)
               (:uncompressed-r4g4b4a4 6)
               (:uncompressed-r8g8b8a8 7)
               (:uncompressed-r32 8)
               (:uncompressed-r32g32b32 9)
               (:uncompressed-r32g32b32a32 10)
               (:uncompressed-r16 11)
               (:uncompressed-r16g16b16 12)
               (:uncompressed-r16g16b16a16 13)
               (:compressed-dxt1-rgb 14)
               (:compressed-dxt1-rgba 15)
               (:compressed-dxt3-rgba 16)
               (:compressed-dxt5-rgba 17)
               (:compressed-etc1-rgb 18)
               (:compressed-etc2-rgb 19)
               (:compressed-etc2-eac-rgba 20)
               (:compressed-pvrt-rgb 21)
               (:compressed-pvrt-rgba 22)
               (:compressed-astc-4x4-rgba 23)
               (:compressed-astc-8x8-rgba 24))

(cffi:defcenum (rlgl::|C:@EA@RL-SHADER-ATTRIBUTE-DATA-TYPE|
                :unsigned-int)
               "/usr/include/rlgl.h:510:9"
               (:float 0)
               (:vec2 1)
               (:vec3 2)
               (:vec4 3))

(cffi:defcenum (rlgl::|C:@EA@RL-SHADER-LOCATION-INDEX| :unsigned-int)
               "/usr/include/rlgl.h:464:9"
               (:vertex-position 0)
               (:vertex-texcoord01 1)
               (:vertex-texcoord02 2)
               (:vertex-normal 3)
               (:vertex-tangent 4)
               (:vertex-color 5)
               (:matrix-mvp 6)
               (:matrix-view 7)
               (:matrix-projection 8)
               (:matrix-model 9)
               (:matrix-normal 10)
               (:vector-view 11)
               (:color-diffuse 12)
               (:color-specular 13)
               (:color-ambient 14)
               (:map-albedo 15)
               (:map-metalness 16)
               (:map-normal 17)
               (:map-roughness 18)
               (:map-occlusion 19)
               (:map-emission 20)
               (:map-height 21)
               (:map-cubemap 22)
               (:map-irradiance 23)
               (:map-prefilter 24)
               (:map-brdf 25))

(cffi:defcenum (rlgl::|C:@EA@RL-SHADER-UNIFORM-DATA-TYPE|
                :unsigned-int)
               "/usr/include/rlgl.h:497:9"
               (:float 0)
               (:vec2 1)
               (:vec3 2)
               (:vec4 3)
               (:int 4)
               (:ivec2 5)
               (:ivec3 6)
               (:ivec4 7)
               (:sampler2d 8))

(cffi:defcenum (rlgl::|C:@EA@RL-TEXTURE-FILTER| :unsigned-int)
               "/usr/include/rlgl.h:442:9"
               (:point 0)
               (:bilinear 1)
               (:trilinear 2)
               (:anisotropic-4x 3)
               (:anisotropic-8x 4)
               (:anisotropic-16x 5))

(cffi:defcenum (rlgl::|C:@EA@RL-TRACE-LOG-LEVEL| :unsigned-int)
               "/usr/include/rlgl.h:399:9"
               (:all 0)
               (:trace 1)
               (:debug 2)
               (:info 3)
               (:warning 4)
               (:error 5)
               (:fatal 6)
               (:none 7))

(declaim (inline rlgl::active-draw-buffers))

(cffi:defcfun ("rlActiveDrawBuffers" rlgl::active-draw-buffers)
              :void
              (rlgl::count :int))

(declaim (inline rlgl::active-texture-slot))

(cffi:defcfun ("rlActiveTextureSlot" rlgl::active-texture-slot)
              :void
              (rlgl::slot :int))

(declaim (inline rlgl::begin))

(cffi:defcfun ("rlBegin" rlgl::begin) :void (rlgl::mode :int))

(declaim (inline rlgl::bind-image-texture))

(cffi:defcfun ("rlBindImageTexture" rlgl::bind-image-texture)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::index :unsigned-int)
              (rlgl::format :int)
              (rlgl::readonly :bool))

(declaim (inline rlgl::bind-shader-buffer))

(cffi:defcfun ("rlBindShaderBuffer" rlgl::bind-shader-buffer)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::index :unsigned-int))

(declaim (inline rlgl::blit-framebuffer))

(cffi:defcfun ("rlBlitFramebuffer" rlgl::blit-framebuffer)
              :void
              (rlgl::src-x :int)
              (rlgl::src-y :int)
              (rlgl::src-width :int)
              (rlgl::src-height :int)
              (rlgl::dst-x :int)
              (rlgl::dst-y :int)
              (rlgl::dst-width :int)
              (rlgl::dst-height :int)
              (rlgl::buffer-mask :int))

(declaim (inline rlgl::check-errors))

(cffi:defcfun ("rlCheckErrors" rlgl::check-errors) :void)

(declaim (inline rlgl::check-render-batch-limit))

(cffi:defcfun ("rlCheckRenderBatchLimit"
               rlgl::check-render-batch-limit)
              :bool
              (rlgl::v-count :int))

(declaim (inline rlgl::clear-color))

(cffi:defcfun ("rlClearColor" rlgl::clear-color)
              :void
              (rlgl::r :unsigned-char)
              (rlgl::g :unsigned-char)
              (rlgl::b :unsigned-char)
              (rlgl::a :unsigned-char))

(declaim (inline rlgl::clear-screen-buffers))

(cffi:defcfun ("rlClearScreenBuffers" rlgl::clear-screen-buffers)
              :void)

(declaim (inline rlgl::color3f))

(cffi:defcfun ("rlColor3f" rlgl::color3f)
              :void
              (rlgl::x :float)
              (rlgl::y :float)
              (rlgl::z :float))

(declaim (inline rlgl::color4f))

(cffi:defcfun ("rlColor4f" rlgl::color4f)
              :void
              (rlgl::x :float)
              (rlgl::y :float)
              (rlgl::z :float)
              (rlgl::w :float))

(declaim (inline rlgl::color4ub))

(cffi:defcfun ("rlColor4ub" rlgl::color4ub)
              :void
              (rlgl::r :unsigned-char)
              (rlgl::g :unsigned-char)
              (rlgl::b :unsigned-char)
              (rlgl::a :unsigned-char))

(declaim (inline rlgl::compile-shader))

(cffi:defcfun ("rlCompileShader" rlgl::compile-shader)
              :unsigned-int
              (rlgl::shader-code :string)
              (rlgl::type :int))

(declaim (inline rlgl::compute-shader-dispatch))

(cffi:defcfun ("rlComputeShaderDispatch"
               rlgl::compute-shader-dispatch)
              :void
              (rlgl::group-x :unsigned-int)
              (rlgl::group-y :unsigned-int)
              (rlgl::group-z :unsigned-int))

(declaim (inline rlgl::copy-shader-buffer))

(cffi:defcfun ("rlCopyShaderBuffer" rlgl::copy-shader-buffer)
              :void
              (rlgl::dest-id :unsigned-int)
              (rlgl::src-id :unsigned-int)
              (rlgl::dest-offset :unsigned-int)
              (rlgl::src-offset :unsigned-int)
              (rlgl::count :unsigned-int))

(declaim (inline rlgl::cubemap-parameters))

(cffi:defcfun ("rlCubemapParameters" rlgl::cubemap-parameters)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::param :int)
              (rlgl::value :int))

(declaim (inline rlgl::disable-backface-culling))

(cffi:defcfun ("rlDisableBackfaceCulling"
               rlgl::disable-backface-culling)
              :void)

(declaim (inline rlgl::disable-color-blend))

(cffi:defcfun ("rlDisableColorBlend" rlgl::disable-color-blend) :void)

(declaim (inline rlgl::disable-depth-mask))

(cffi:defcfun ("rlDisableDepthMask" rlgl::disable-depth-mask) :void)

(declaim (inline rlgl::disable-depth-test))

(cffi:defcfun ("rlDisableDepthTest" rlgl::disable-depth-test) :void)

(declaim (inline rlgl::disable-framebuffer))

(cffi:defcfun ("rlDisableFramebuffer" rlgl::disable-framebuffer)
              :void)

(declaim (inline rlgl::disable-scissor-test))

(cffi:defcfun ("rlDisableScissorTest" rlgl::disable-scissor-test)
              :void)

(declaim (inline rlgl::disable-shader))

(cffi:defcfun ("rlDisableShader" rlgl::disable-shader) :void)

(declaim (inline rlgl::disable-smooth-lines))

(cffi:defcfun ("rlDisableSmoothLines" rlgl::disable-smooth-lines)
              :void)

(declaim (inline rlgl::disable-stereo-render))

(cffi:defcfun ("rlDisableStereoRender" rlgl::disable-stereo-render)
              :void)

(declaim (inline rlgl::disable-texture))

(cffi:defcfun ("rlDisableTexture" rlgl::disable-texture) :void)

(declaim (inline rlgl::disable-texture-cubemap))

(cffi:defcfun ("rlDisableTextureCubemap"
               rlgl::disable-texture-cubemap)
              :void)

(declaim (inline rlgl::disable-vertex-array))

(cffi:defcfun ("rlDisableVertexArray" rlgl::disable-vertex-array)
              :void)

(declaim (inline rlgl::disable-vertex-attribute))

(cffi:defcfun ("rlDisableVertexAttribute"
               rlgl::disable-vertex-attribute)
              :void
              (rlgl::index :unsigned-int))

(declaim (inline rlgl::disable-vertex-buffer))

(cffi:defcfun ("rlDisableVertexBuffer" rlgl::disable-vertex-buffer)
              :void)

(declaim (inline rlgl::disable-vertex-buffer-element))

(cffi:defcfun ("rlDisableVertexBufferElement"
               rlgl::disable-vertex-buffer-element)
              :void)

(declaim (inline rlgl::disable-wire-mode))

(cffi:defcfun ("rlDisableWireMode" rlgl::disable-wire-mode) :void)

(cffi:defcstruct (rlgl::vertex-buffer :size 64)
                 (rlgl::element-count :int :offset 0)
                 (rlgl::vertices (:pointer :float) :offset 8)
                 (rlgl::texcoords (:pointer :float) :offset 16)
                 (rlgl::colors (:pointer :unsigned-char) :offset 24)
                 (rlgl::indices (:pointer :unsigned-int) :offset 32)
                 (rlgl::vao-id :unsigned-int :offset 40)
                 (rlgl::vbo-id :unsigned-int :count 4 :offset 44))

(cffi:defctype rlgl::vertex-buffer (:struct rlgl::vertex-buffer))

(cffi:defcstruct (rlgl::draw-call :size 16)
                 (rlgl::mode :int :offset 0)
                 (rlgl::vertex-count :int :offset 4)
                 (rlgl::vertex-alignment :int :offset 8)
                 (rlgl::texture-id :unsigned-int :offset 12))

(cffi:defctype rlgl::draw-call (:struct rlgl::draw-call))

(cffi:defcstruct (rlgl::render-batch :size 32)
                 (rlgl::buffer-count :int :offset 0)
                 (rlgl::current-buffer :int :offset 4)
                 (rlgl::vertex-buffer (:pointer rlgl::vertex-buffer)
                  :offset 8)
                 (rlgl::draws (:pointer rlgl::draw-call) :offset 16)
                 (rlgl::draw-counter :int :offset 24)
                 (rlgl::current-depth :float :offset 28))

(cffi:defctype rlgl::render-batch (:struct rlgl::render-batch))

(declaim (inline rlgl::draw-render-batch))

(cffi:defcfun ("rlDrawRenderBatch" rlgl::draw-render-batch)
              :void
              (rlgl::batch (:pointer rlgl::render-batch)))

(declaim (inline rlgl::draw-render-batch-active))

(cffi:defcfun ("rlDrawRenderBatchActive"
               rlgl::draw-render-batch-active)
              :void)

(declaim (inline rlgl::draw-vertex-array))

(cffi:defcfun ("rlDrawVertexArray" rlgl::draw-vertex-array)
              :void
              (rlgl::offset :int)
              (rlgl::count :int))

(declaim (inline rlgl::draw-vertex-array-elements))

(cffi:defcfun ("rlDrawVertexArrayElements"
               rlgl::draw-vertex-array-elements)
              :void
              (rlgl::offset :int)
              (rlgl::count :int)
              (rlgl::buffer (:pointer :void)))

(declaim (inline rlgl::draw-vertex-array-elements-instanced))

(cffi:defcfun ("rlDrawVertexArrayElementsInstanced"
               rlgl::draw-vertex-array-elements-instanced)
              :void
              (rlgl::offset :int)
              (rlgl::count :int)
              (rlgl::buffer (:pointer :void))
              (rlgl::instances :int))

(declaim (inline rlgl::draw-vertex-array-instanced))

(cffi:defcfun ("rlDrawVertexArrayInstanced"
               rlgl::draw-vertex-array-instanced)
              :void
              (rlgl::offset :int)
              (rlgl::count :int)
              (rlgl::instances :int))

(declaim (inline rlgl::enable-backface-culling))

(cffi:defcfun ("rlEnableBackfaceCulling"
               rlgl::enable-backface-culling)
              :void)

(declaim (inline rlgl::enable-color-blend))

(cffi:defcfun ("rlEnableColorBlend" rlgl::enable-color-blend) :void)

(declaim (inline rlgl::enable-depth-mask))

(cffi:defcfun ("rlEnableDepthMask" rlgl::enable-depth-mask) :void)

(declaim (inline rlgl::enable-depth-test))

(cffi:defcfun ("rlEnableDepthTest" rlgl::enable-depth-test) :void)

(declaim (inline rlgl::enable-framebuffer))

(cffi:defcfun ("rlEnableFramebuffer" rlgl::enable-framebuffer)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::enable-point-mode))

(cffi:defcfun ("rlEnablePointMode" rlgl::enable-point-mode) :void)

(declaim (inline rlgl::enable-scissor-test))

(cffi:defcfun ("rlEnableScissorTest" rlgl::enable-scissor-test) :void)

(declaim (inline rlgl::enable-shader))

(cffi:defcfun ("rlEnableShader" rlgl::enable-shader)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::enable-smooth-lines))

(cffi:defcfun ("rlEnableSmoothLines" rlgl::enable-smooth-lines) :void)

(declaim (inline rlgl::enable-stereo-render))

(cffi:defcfun ("rlEnableStereoRender" rlgl::enable-stereo-render)
              :void)

(declaim (inline rlgl::enable-texture))

(cffi:defcfun ("rlEnableTexture" rlgl::enable-texture)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::enable-texture-cubemap))

(cffi:defcfun ("rlEnableTextureCubemap" rlgl::enable-texture-cubemap)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::enable-vertex-array))

(cffi:defcfun ("rlEnableVertexArray" rlgl::enable-vertex-array)
              :bool
              (rlgl::vao-id :unsigned-int))

(declaim (inline rlgl::enable-vertex-attribute))

(cffi:defcfun ("rlEnableVertexAttribute"
               rlgl::enable-vertex-attribute)
              :void
              (rlgl::index :unsigned-int))

(declaim (inline rlgl::enable-vertex-buffer))

(cffi:defcfun ("rlEnableVertexBuffer" rlgl::enable-vertex-buffer)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::enable-vertex-buffer-element))

(cffi:defcfun ("rlEnableVertexBufferElement"
               rlgl::enable-vertex-buffer-element)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::enable-wire-mode))

(cffi:defcfun ("rlEnableWireMode" rlgl::enable-wire-mode) :void)

(declaim (inline rlgl::end))

(cffi:defcfun ("rlEnd" rlgl::end) :void)

(declaim (inline rlgl::framebuffer-attach))

(cffi:defcfun ("rlFramebufferAttach" rlgl::framebuffer-attach)
              :void
              (rlgl::fbo-id :unsigned-int)
              (rlgl::tex-id :unsigned-int)
              (rlgl::attach-type :int)
              (rlgl::tex-type :int)
              (rlgl::mip-level :int))

(declaim (inline rlgl::framebuffer-complete))

(cffi:defcfun ("rlFramebufferComplete" rlgl::framebuffer-complete)
              :bool
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::frustum))

(cffi:defcfun ("rlFrustum" rlgl::frustum)
              :void
              (rlgl::left :double)
              (rlgl::right :double)
              (rlgl::bottom :double)
              (rlgl::top :double)
              (rlgl::znear :double)
              (rlgl::zfar :double))

(declaim (inline rlgl::gen-texture-mipmaps))

(cffi:defcfun ("rlGenTextureMipmaps" rlgl::gen-texture-mipmaps)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::width :int)
              (rlgl::height :int)
              (rlgl::format :int)
              (rlgl::mipmaps (:pointer :int)))

(declaim (inline rlgl::get-framebuffer-height))

(cffi:defcfun ("rlGetFramebufferHeight" rlgl::get-framebuffer-height)
              :int)

(declaim (inline rlgl::get-framebuffer-width))

(cffi:defcfun ("rlGetFramebufferWidth" rlgl::get-framebuffer-width)
              :int)

(declaim (inline rlgl::get-gl-texture-formats))

(cffi:defcfun ("rlGetGlTextureFormats" rlgl::get-gl-texture-formats)
              :void
              (rlgl::format :int)
              (rlgl::gl-internal-format (:pointer :unsigned-int))
              (rlgl::gl-format (:pointer :unsigned-int))
              (rlgl::gl-type (:pointer :unsigned-int)))

(declaim (inline rlgl::get-line-width))

(cffi:defcfun ("rlGetLineWidth" rlgl::get-line-width) :float)

(declaim (inline rlgl::get-location-attrib))

(cffi:defcfun ("rlGetLocationAttrib" rlgl::get-location-attrib)
              :int
              (rlgl::shader-id :unsigned-int)
              (rlgl::attrib-name :string))

(declaim (inline rlgl::get-location-uniform))

(cffi:defcfun ("rlGetLocationUniform" rlgl::get-location-uniform)
              :int
              (rlgl::shader-id :unsigned-int)
              (rlgl::uniform-name :string))

(cffi:defcstruct (rlgl::matrix :size 64)
                 (rlgl::m0 :float :offset 0)
                 (rlgl::m4 :float :offset 4)
                 (rlgl::m8 :float :offset 8)
                 (rlgl::m12 :float :offset 12)
                 (rlgl::m1 :float :offset 16)
                 (rlgl::m5 :float :offset 20)
                 (rlgl::m9 :float :offset 24)
                 (rlgl::m13 :float :offset 28)
                 (rlgl::m2 :float :offset 32)
                 (rlgl::m6 :float :offset 36)
                 (rlgl::m10 :float :offset 40)
                 (rlgl::m14 :float :offset 44)
                 (rlgl::m3 :float :offset 48)
                 (rlgl::m7 :float :offset 52)
                 (rlgl::m11 :float :offset 56)
                 (rlgl::m15 :float :offset 60))

(cffi:defctype rlgl::matrix (:struct rlgl::matrix))

(declaim (inline rlgl::get-matrix-modelview))

(cffi:defcfun ("__claw__rlGetMatrixModelview"
               rlgl::get-matrix-modelview)
              (:pointer rlgl::matrix)
              (rlgl::%%claw-result- (:pointer rlgl::matrix)))

(declaim (inline rlgl::get-matrix-projection))

(cffi:defcfun ("__claw__rlGetMatrixProjection"
               rlgl::get-matrix-projection)
              (:pointer rlgl::matrix)
              (rlgl::%%claw-result- (:pointer rlgl::matrix)))

(declaim (inline rlgl::get-matrix-projection-stereo))

(cffi:defcfun ("__claw__rlGetMatrixProjectionStereo"
               rlgl::get-matrix-projection-stereo)
              (:pointer rlgl::matrix)
              (rlgl::%%claw-result- (:pointer rlgl::matrix))
              (rlgl::eye :int))

(declaim (inline rlgl::get-matrix-transform))

(cffi:defcfun ("__claw__rlGetMatrixTransform"
               rlgl::get-matrix-transform)
              (:pointer rlgl::matrix)
              (rlgl::%%claw-result- (:pointer rlgl::matrix)))

(declaim (inline rlgl::get-matrix-view-offset-stereo))

(cffi:defcfun ("__claw__rlGetMatrixViewOffsetStereo"
               rlgl::get-matrix-view-offset-stereo)
              (:pointer rlgl::matrix)
              (rlgl::%%claw-result- (:pointer rlgl::matrix))
              (rlgl::eye :int))

(declaim (inline rlgl::get-pixel-format-name))

(cffi:defcfun ("rlGetPixelFormatName" rlgl::get-pixel-format-name)
              :string
              (rlgl::format :unsigned-int))

(declaim (inline rlgl::get-shader-buffer-size))

(cffi:defcfun ("rlGetShaderBufferSize" rlgl::get-shader-buffer-size)
              :unsigned-int
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::get-shader-id-default))

(cffi:defcfun ("rlGetShaderIdDefault" rlgl::get-shader-id-default)
              :unsigned-int)

(declaim (inline rlgl::get-shader-locs-default))

(cffi:defcfun ("rlGetShaderLocsDefault"
               rlgl::get-shader-locs-default)
              (:pointer :int))

(declaim (inline rlgl::get-texture-id-default))

(cffi:defcfun ("rlGetTextureIdDefault" rlgl::get-texture-id-default)
              :unsigned-int)

(declaim (inline rlgl::get-version))

(cffi:defcfun ("rlGetVersion" rlgl::get-version) :int)

(declaim (inline rlgl::is-stereo-render-enabled))

(cffi:defcfun ("rlIsStereoRenderEnabled"
               rlgl::is-stereo-render-enabled)
              :bool)

(declaim (inline rlgl::load-compute-shader-program))

(cffi:defcfun ("rlLoadComputeShaderProgram"
               rlgl::load-compute-shader-program)
              :unsigned-int
              (rlgl::shader-id :unsigned-int))

(declaim (inline rlgl::load-draw-cube))

(cffi:defcfun ("rlLoadDrawCube" rlgl::load-draw-cube) :void)

(declaim (inline rlgl::load-draw-quad))

(cffi:defcfun ("rlLoadDrawQuad" rlgl::load-draw-quad) :void)

(declaim (inline rlgl::load-extensions))

(cffi:defcfun ("rlLoadExtensions" rlgl::load-extensions)
              :void
              (rlgl::loader (:pointer :void)))

(declaim (inline rlgl::load-framebuffer))

(cffi:defcfun ("rlLoadFramebuffer" rlgl::load-framebuffer)
              :unsigned-int
              (rlgl::width :int)
              (rlgl::height :int))

(declaim (inline rlgl::load-identity))

(cffi:defcfun ("rlLoadIdentity" rlgl::load-identity) :void)

(declaim (inline rlgl::load-render-batch))

(cffi:defcfun ("__claw__rlLoadRenderBatch" rlgl::load-render-batch)
              (:pointer rlgl::render-batch)
              (rlgl::%%claw-result- (:pointer rlgl::render-batch))
              (rlgl::num-buffers :int)
              (rlgl::buffer-elements :int))

(declaim (inline rlgl::load-shader-buffer))

(cffi:defcfun ("rlLoadShaderBuffer" rlgl::load-shader-buffer)
              :unsigned-int
              (rlgl::size :unsigned-int)
              (rlgl::data (:pointer :void))
              (rlgl::usage-hint :int))

(declaim (inline rlgl::load-shader-code))

(cffi:defcfun ("rlLoadShaderCode" rlgl::load-shader-code)
              :unsigned-int
              (rlgl::vs-code :string)
              (rlgl::fs-code :string))

(declaim (inline rlgl::load-shader-program))

(cffi:defcfun ("rlLoadShaderProgram" rlgl::load-shader-program)
              :unsigned-int
              (rlgl::v-shader-id :unsigned-int)
              (rlgl::f-shader-id :unsigned-int))

(declaim (inline rlgl::load-texture))

(cffi:defcfun ("rlLoadTexture" rlgl::load-texture)
              :unsigned-int
              (rlgl::data (:pointer :void))
              (rlgl::width :int)
              (rlgl::height :int)
              (rlgl::format :int)
              (rlgl::mipmap-count :int))

(declaim (inline rlgl::load-texture-cubemap))

(cffi:defcfun ("rlLoadTextureCubemap" rlgl::load-texture-cubemap)
              :unsigned-int
              (rlgl::data (:pointer :void))
              (rlgl::size :int)
              (rlgl::format :int))

(declaim (inline rlgl::load-texture-depth))

(cffi:defcfun ("rlLoadTextureDepth" rlgl::load-texture-depth)
              :unsigned-int
              (rlgl::width :int)
              (rlgl::height :int)
              (rlgl::use-render-buffer :bool))

(declaim (inline rlgl::load-vertex-array))

(cffi:defcfun ("rlLoadVertexArray" rlgl::load-vertex-array)
              :unsigned-int)

(declaim (inline rlgl::load-vertex-buffer))

(cffi:defcfun ("rlLoadVertexBuffer" rlgl::load-vertex-buffer)
              :unsigned-int
              (rlgl::buffer (:pointer :void))
              (rlgl::size :int)
              (rlgl::dynamic :bool))

(declaim (inline rlgl::load-vertex-buffer-element))

(cffi:defcfun ("rlLoadVertexBufferElement"
               rlgl::load-vertex-buffer-element)
              :unsigned-int
              (rlgl::buffer (:pointer :void))
              (rlgl::size :int)
              (rlgl::dynamic :bool))

(declaim (inline rlgl::matrix-mode))

(cffi:defcfun ("rlMatrixMode" rlgl::matrix-mode)
              :void
              (rlgl::mode :int))

(declaim (inline rlgl::mult-matrixf))

(cffi:defcfun ("rlMultMatrixf" rlgl::mult-matrixf)
              :void
              (rlgl::matf (:pointer :float)))

(declaim (inline rlgl::normal3f))

(cffi:defcfun ("rlNormal3f" rlgl::normal3f)
              :void
              (rlgl::x :float)
              (rlgl::y :float)
              (rlgl::z :float))

(declaim (inline rlgl::ortho))

(cffi:defcfun ("rlOrtho" rlgl::ortho)
              :void
              (rlgl::left :double)
              (rlgl::right :double)
              (rlgl::bottom :double)
              (rlgl::top :double)
              (rlgl::znear :double)
              (rlgl::zfar :double))

(declaim (inline rlgl::pop-matrix))

(cffi:defcfun ("rlPopMatrix" rlgl::pop-matrix) :void)

(declaim (inline rlgl::push-matrix))

(cffi:defcfun ("rlPushMatrix" rlgl::push-matrix) :void)

(declaim (inline rlgl::read-screen-pixels))

(cffi:defcfun ("rlReadScreenPixels" rlgl::read-screen-pixels)
              (:pointer :unsigned-char)
              (rlgl::width :int)
              (rlgl::height :int))

(declaim (inline rlgl::read-shader-buffer))

(cffi:defcfun ("rlReadShaderBuffer" rlgl::read-shader-buffer)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::dest (:pointer :void))
              (rlgl::count :unsigned-int)
              (rlgl::offset :unsigned-int))

(declaim (inline rlgl::read-texture-pixels))

(cffi:defcfun ("rlReadTexturePixels" rlgl::read-texture-pixels)
              (:pointer :void)
              (rlgl::id :unsigned-int)
              (rlgl::width :int)
              (rlgl::height :int)
              (rlgl::format :int))

(declaim (inline rlgl::rotatef))

(cffi:defcfun ("rlRotatef" rlgl::rotatef)
              :void
              (rlgl::angle :float)
              (rlgl::x :float)
              (rlgl::y :float)
              (rlgl::z :float))

(declaim (inline rlgl::scalef))

(cffi:defcfun ("rlScalef" rlgl::scalef)
              :void
              (rlgl::x :float)
              (rlgl::y :float)
              (rlgl::z :float))

(declaim (inline rlgl::scissor))

(cffi:defcfun ("rlScissor" rlgl::scissor)
              :void
              (rlgl::x :int)
              (rlgl::y :int)
              (rlgl::width :int)
              (rlgl::height :int))

(declaim (inline rlgl::set-blend-factors))

(cffi:defcfun ("rlSetBlendFactors" rlgl::set-blend-factors)
              :void
              (rlgl::gl-src-factor :int)
              (rlgl::gl-dst-factor :int)
              (rlgl::gl-equation :int))

(declaim (inline rlgl::set-blend-factors-separate))

(cffi:defcfun ("rlSetBlendFactorsSeparate"
               rlgl::set-blend-factors-separate)
              :void
              (rlgl::gl-src-rgb :int)
              (rlgl::gl-dst-rgb :int)
              (rlgl::gl-src-alpha :int)
              (rlgl::gl-dst-alpha :int)
              (rlgl::gl-eq-rgb :int)
              (rlgl::gl-eq-alpha :int))

(declaim (inline rlgl::set-blend-mode))

(cffi:defcfun ("rlSetBlendMode" rlgl::set-blend-mode)
              :void
              (rlgl::mode :int))

(declaim (inline rlgl::set-cull-face))

(cffi:defcfun ("rlSetCullFace" rlgl::set-cull-face)
              :void
              (rlgl::mode :int))

(declaim (inline rlgl::set-framebuffer-height))

(cffi:defcfun ("rlSetFramebufferHeight" rlgl::set-framebuffer-height)
              :void
              (rlgl::height :int))

(declaim (inline rlgl::set-framebuffer-width))

(cffi:defcfun ("rlSetFramebufferWidth" rlgl::set-framebuffer-width)
              :void
              (rlgl::width :int))

(declaim (inline rlgl::set-line-width))

(cffi:defcfun ("rlSetLineWidth" rlgl::set-line-width)
              :void
              (rlgl::width :float))

(declaim (inline rlgl::set-matrix-modelview))

(cffi:defcfun ("__claw__rlSetMatrixModelview"
               rlgl::set-matrix-modelview)
              :void
              (rlgl::view (:pointer rlgl::matrix)))

(declaim (inline rlgl::set-matrix-projection))

(cffi:defcfun ("__claw__rlSetMatrixProjection"
               rlgl::set-matrix-projection)
              :void
              (rlgl::proj (:pointer rlgl::matrix)))

(declaim (inline rlgl::set-matrix-projection-stereo))

(cffi:defcfun ("__claw__rlSetMatrixProjectionStereo"
               rlgl::set-matrix-projection-stereo)
              :void
              (rlgl::right (:pointer rlgl::matrix))
              (rlgl::left (:pointer rlgl::matrix)))

(declaim (inline rlgl::set-matrix-view-offset-stereo))

(cffi:defcfun ("__claw__rlSetMatrixViewOffsetStereo"
               rlgl::set-matrix-view-offset-stereo)
              :void
              (rlgl::right (:pointer rlgl::matrix))
              (rlgl::left (:pointer rlgl::matrix)))

(declaim (inline rlgl::set-render-batch-active))

(cffi:defcfun ("rlSetRenderBatchActive"
               rlgl::set-render-batch-active)
              :void
              (rlgl::batch (:pointer rlgl::render-batch)))

(declaim (inline rlgl::set-shader))

(cffi:defcfun ("rlSetShader" rlgl::set-shader)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::locs (:pointer :int)))

(declaim (inline rlgl::set-texture))

(cffi:defcfun ("rlSetTexture" rlgl::set-texture)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::set-uniform))

(cffi:defcfun ("rlSetUniform" rlgl::set-uniform)
              :void
              (rlgl::loc-index :int)
              (rlgl::value (:pointer :void))
              (rlgl::uniform-type :int)
              (rlgl::count :int))

(declaim (inline rlgl::set-uniform-matrix))

(cffi:defcfun ("__claw__rlSetUniformMatrix" rlgl::set-uniform-matrix)
              :void
              (rlgl::loc-index :int)
              (rlgl::mat (:pointer rlgl::matrix)))

(declaim (inline rlgl::set-uniform-sampler))

(cffi:defcfun ("rlSetUniformSampler" rlgl::set-uniform-sampler)
              :void
              (rlgl::loc-index :int)
              (rlgl::texture-id :unsigned-int))

(declaim (inline rlgl::set-vertex-attribute))

(cffi:defcfun ("rlSetVertexAttribute" rlgl::set-vertex-attribute)
              :void
              (rlgl::index :unsigned-int)
              (rlgl::comp-size :int)
              (rlgl::type :int)
              (rlgl::normalized :bool)
              (rlgl::stride :int)
              (rlgl::pointer (:pointer :void)))

(declaim (inline rlgl::set-vertex-attribute-default))

(cffi:defcfun ("rlSetVertexAttributeDefault"
               rlgl::set-vertex-attribute-default)
              :void
              (rlgl::loc-index :int)
              (rlgl::value (:pointer :void))
              (rlgl::attrib-type :int)
              (rlgl::count :int))

(declaim (inline rlgl::set-vertex-attribute-divisor))

(cffi:defcfun ("rlSetVertexAttributeDivisor"
               rlgl::set-vertex-attribute-divisor)
              :void
              (rlgl::index :unsigned-int)
              (rlgl::divisor :int))

(declaim (inline rlgl::tex-coord2f))

(cffi:defcfun ("rlTexCoord2f" rlgl::tex-coord2f)
              :void
              (rlgl::x :float)
              (rlgl::y :float))

(declaim (inline rlgl::texture-parameters))

(cffi:defcfun ("rlTextureParameters" rlgl::texture-parameters)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::param :int)
              (rlgl::value :int))

(declaim (inline rlgl::translatef))

(cffi:defcfun ("rlTranslatef" rlgl::translatef)
              :void
              (rlgl::x :float)
              (rlgl::y :float)
              (rlgl::z :float))

(declaim (inline rlgl::unload-framebuffer))

(cffi:defcfun ("rlUnloadFramebuffer" rlgl::unload-framebuffer)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::unload-render-batch))

(cffi:defcfun ("__claw__rlUnloadRenderBatch"
               rlgl::unload-render-batch)
              :void
              (rlgl::batch (:pointer rlgl::render-batch)))

(declaim (inline rlgl::unload-shader-buffer))

(cffi:defcfun ("rlUnloadShaderBuffer" rlgl::unload-shader-buffer)
              :void
              (rlgl::ssbo-id :unsigned-int))

(declaim (inline rlgl::unload-shader-program))

(cffi:defcfun ("rlUnloadShaderProgram" rlgl::unload-shader-program)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::unload-texture))

(cffi:defcfun ("rlUnloadTexture" rlgl::unload-texture)
              :void
              (rlgl::id :unsigned-int))

(declaim (inline rlgl::unload-vertex-array))

(cffi:defcfun ("rlUnloadVertexArray" rlgl::unload-vertex-array)
              :void
              (rlgl::vao-id :unsigned-int))

(declaim (inline rlgl::unload-vertex-buffer))

(cffi:defcfun ("rlUnloadVertexBuffer" rlgl::unload-vertex-buffer)
              :void
              (rlgl::vbo-id :unsigned-int))

(declaim (inline rlgl::update-shader-buffer))

(cffi:defcfun ("rlUpdateShaderBuffer" rlgl::update-shader-buffer)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::data (:pointer :void))
              (rlgl::data-size :unsigned-int)
              (rlgl::offset :unsigned-int))

(declaim (inline rlgl::update-texture))

(cffi:defcfun ("rlUpdateTexture" rlgl::update-texture)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::offset-x :int)
              (rlgl::offset-y :int)
              (rlgl::width :int)
              (rlgl::height :int)
              (rlgl::format :int)
              (rlgl::data (:pointer :void)))

(declaim (inline rlgl::update-vertex-buffer))

(cffi:defcfun ("rlUpdateVertexBuffer" rlgl::update-vertex-buffer)
              :void
              (rlgl::buffer-id :unsigned-int)
              (rlgl::data (:pointer :void))
              (rlgl::data-size :int)
              (rlgl::offset :int))

(declaim (inline rlgl::update-vertex-buffer-elements))

(cffi:defcfun ("rlUpdateVertexBufferElements"
               rlgl::update-vertex-buffer-elements)
              :void
              (rlgl::id :unsigned-int)
              (rlgl::data (:pointer :void))
              (rlgl::data-size :int)
              (rlgl::offset :int))

(declaim (inline rlgl::vertex2f))

(cffi:defcfun ("rlVertex2f" rlgl::vertex2f)
              :void
              (rlgl::x :float)
              (rlgl::y :float))

(declaim (inline rlgl::vertex2i))

(cffi:defcfun ("rlVertex2i" rlgl::vertex2i)
              :void
              (rlgl::x :int)
              (rlgl::y :int))

(declaim (inline rlgl::vertex3f))

(cffi:defcfun ("rlVertex3f" rlgl::vertex3f)
              :void
              (rlgl::x :float)
              (rlgl::y :float)
              (rlgl::z :float))

(declaim (inline rlgl::viewport))

(cffi:defcfun ("rlViewport" rlgl::viewport)
              :void
              (rlgl::x :int)
              (rlgl::y :int)
              (rlgl::width :int)
              (rlgl::height :int))

(declaim (inline rlgl::gl-close))

(cffi:defcfun ("rlglClose" rlgl::gl-close) :void)

(declaim (inline rlgl::gl-init))

(cffi:defcfun ("rlglInit" rlgl::gl-init)
              :void
              (rlgl::width :int)
              (rlgl::height :int))

(cffi:defctype rlgl::blend-mode rlgl::|C:@EA@RL-BLEND-MODE|)

(cffi:defctype rlgl::cull-mode rlgl::|C:@EA@RL-CULL-MODE|)

(cffi:defctype rlgl::framebuffer-attach-texture-type
               rlgl::|C:@EA@RL-FRAMEBUFFER-ATTACH-TEXTURE-TYPE|)

(cffi:defctype rlgl::framebuffer-attach-type
               rlgl::|C:@EA@RL-FRAMEBUFFER-ATTACH-TYPE|)

(cffi:defctype rlgl::gl-version rlgl::|C:@EA@RL-GL-VERSION|)

(cffi:defctype rlgl::pixel-format rlgl::|C:@EA@RL-PIXEL-FORMAT|)

(cffi:defctype rlgl::shader-attribute-data-type
               rlgl::|C:@EA@RL-SHADER-ATTRIBUTE-DATA-TYPE|)

(cffi:defctype rlgl::shader-location-index
               rlgl::|C:@EA@RL-SHADER-LOCATION-INDEX|)

(cffi:defctype rlgl::shader-uniform-data-type
               rlgl::|C:@EA@RL-SHADER-UNIFORM-DATA-TYPE|)

(cffi:defctype rlgl::texture-filter rlgl::|C:@EA@RL-TEXTURE-FILTER|)

(cffi:defctype rlgl::trace-log-level rlgl::|C:@EA@RL-TRACE-LOG-LEVEL|)

(eval-when (:load-toplevel :compile-toplevel :execute)
  (export 'rlgl::disable-scissor-test :rlgl)
  (export 'rlgl::load-compute-shader-program :rlgl)
  (export 'rlgl::+texture-filter-nearest+ :rlgl)
  (export 'rlgl::set-blend-factors-separate :rlgl)
  (export 'rlgl::enable-stereo-render :rlgl)
  (export 'rlgl::vertex2f :rlgl)
  (export 'rlgl::cull-mode :rlgl)
  (export 'rlgl::+rlapi+ :rlgl)
  (export 'rlgl::+compute-shader+ :rlgl)
  (export 'rlgl::|C:@EA@RL-TRACE-LOG-LEVEL| :rlgl)
  (export 'rlgl::enable-smooth-lines :rlgl)
  (export 'rlgl::enable-vertex-buffer :rlgl)
  (export 'rlgl::+func-subtract+ :rlgl)
  (export 'rlgl::scissor :rlgl)
  (export 'rlgl::+dst-alpha+ :rlgl)
  (export 'rlgl::+default-batch-max-texture-units+ :rlgl)
  (export 'rlgl::load-render-batch :rlgl)
  (export 'rlgl::+texture-wrap-clamp+ :rlgl)
  (export 'rlgl::m8 :rlgl)
  (export 'rlgl::get-matrix-projection-stereo :rlgl)
  (export 'rlgl::framebuffer-attach-texture-type :rlgl)
  (export 'rlgl::+cull-distance-far+ :rlgl)
  (export 'rlgl::enable-scissor-test :rlgl)
  (export 'rlgl::set-matrix-modelview :rlgl)
  (export 'rlgl::framebuffer-attach :rlgl)
  (export 'rlgl::|C:@EA@RL-BLEND-MODE| :rlgl)
  (export 'rlgl::get-line-width :rlgl)
  (export 'rlgl::+texture-filter-linear-mip-nearest+ :rlgl)
  (export 'rlgl::translatef :rlgl)
  (export 'rlgl::disable-backface-culling :rlgl)
  (export 'rlgl::load-framebuffer :rlgl)
  (export 'rlgl::+%lp64+ :rlgl)
  (export 'rlgl::matrix :rlgl)
  (export 'rlgl::m4 :rlgl)
  (export 'rlgl::+static-read+ :rlgl)
  (export 'rlgl::m6 :rlgl)
  (export 'rlgl::+rlgl-render-textures-hint+ :rlgl)
  (export 'rlgl::color4ub :rlgl)
  (export 'rlgl::+texture-wrap-s+ :rlgl)
  (export 'rlgl::get-shader-buffer-size :rlgl)
  (export 'rlgl::push-matrix :rlgl)
  (export 'rlgl::+rlgl-h+ :rlgl)
  (export 'rlgl::+true+ :rlgl)
  (export 'rlgl::m1 :rlgl)
  (export 'rlgl::load-texture :rlgl)
  (export 'rlgl::color3f :rlgl)
  (export 'rlgl::current-buffer :rlgl)
  (export 'rlgl::begin :rlgl)
  (export 'rlgl::set-vertex-attribute :rlgl)
  (export 'rlgl::update-vertex-buffer-elements :rlgl)
  (export 'rlgl::+blend-dst-alpha+ :rlgl)
  (export 'rlgl::unload-render-batch :rlgl)
  (export 'rlgl::get-shader-id-default :rlgl)
  (export 'rlgl::end :rlgl)
  (export 'rlgl::m11 :rlgl)
  (export 'rlgl::check-errors :rlgl)
  (export 'rlgl::bind-image-texture :rlgl)
  (export 'rlgl::+triangles+ :rlgl)
  (export 'rlgl::rotatef :rlgl)
  (export 'rlgl::enable-texture :rlgl)
  (export 'rlgl::+modelview+ :rlgl)
  (export 'rlgl::m5 :rlgl)
  (export 'rlgl::m14 :rlgl)
  (export 'rlgl::+src-alpha+ :rlgl)
  (export 'rlgl::+dynamic-copy+ :rlgl)
  (export 'rlgl::+blend-equation-rgb+ :rlgl)
  (export 'rlgl::gl-version :rlgl)
  (export 'rlgl::+constant-alpha+ :rlgl)
  (export 'rlgl::enable-texture-cubemap :rlgl)
  (export 'rlgl::+texture-wrap-mirror-clamp+ :rlgl)
  (export 'rlgl::framebuffer-complete :rlgl)
  (export 'rlgl::get-matrix-modelview :rlgl)
  (export 'rlgl::enable-vertex-buffer-element :rlgl)
  (export 'rlgl::|C:@EA@RL-FRAMEBUFFER-ATTACH-TEXTURE-TYPE| :rlgl)
  (export 'rlgl::scalef :rlgl)
  (export 'rlgl::get-framebuffer-width :rlgl)
  (export 'rlgl::+dynamic-draw+ :rlgl)
  (export 'rlgl::|C:@EA@RL-CULL-MODE| :rlgl)
  (export 'rlgl::+cull-distance-near+ :rlgl)
  (export 'rlgl::disable-texture-cubemap :rlgl)
  (export 'rlgl::vao-id :rlgl)
  (export 'rlgl::+texture-wrap-t+ :rlgl)
  (export 'rlgl::load-extensions :rlgl)
  (export 'rlgl::get-matrix-view-offset-stereo :rlgl)
  (export 'rlgl::get-texture-id-default :rlgl)
  (export 'rlgl::vertex3f :rlgl)
  (export 'rlgl::colors :rlgl)
  (export 'rlgl::+src-alpha-saturate+ :rlgl)
  (export 'rlgl::viewport :rlgl)
  (export 'rlgl::+zero+ :rlgl)
  (export 'rlgl::blend-mode :rlgl)
  (export 'rlgl::mode :rlgl)
  (export 'rlgl::get-shader-locs-default :rlgl)
  (export 'rlgl::set-matrix-view-offset-stereo :rlgl)
  (export 'rlgl::+lines+ :rlgl)
  (export 'rlgl::trace-log-level :rlgl)
  (export 'rlgl::ortho :rlgl)
  (export 'rlgl::disable-vertex-buffer :rlgl)
  (export 'rlgl::+shader-loc-map-specular+ :rlgl)
  (export 'rlgl::load-draw-quad :rlgl)
  (export 'rlgl::set-cull-face :rlgl)
  (export 'rlgl::load-shader-program :rlgl)
  (export 'rlgl::+shader-loc-map-diffuse+ :rlgl)
  (export 'rlgl::+blend-equation+ :rlgl)
  (export 'rlgl::set-uniform-matrix :rlgl)
  (export 'rlgl::current-depth :rlgl)
  (export 'rlgl::+func-add+ :rlgl)
  (export 'rlgl::get-version :rlgl)
  (export 'rlgl::m2 :rlgl)
  (export 'rlgl::enable-framebuffer :rlgl)
  (export 'rlgl::load-texture-cubemap :rlgl)
  (export 'rlgl::load-draw-cube :rlgl)
  (export 'rlgl::set-vertex-attribute-default :rlgl)
  (export 'rlgl::render-batch :rlgl)
  (export 'rlgl::shader-attribute-data-type :rlgl)
  (export 'rlgl::+default-batch-drawcalls+ :rlgl)
  (export 'rlgl::enable-backface-culling :rlgl)
  (export 'rlgl::unload-texture :rlgl)
  (export 'rlgl::+func-reverse-subtract+ :rlgl)
  (export 'rlgl::read-screen-pixels :rlgl)
  (export 'rlgl::vertex-alignment :rlgl)
  (export 'rlgl::disable-color-blend :rlgl)
  (export 'rlgl::unload-shader-buffer :rlgl)
  (export 'rlgl::disable-stereo-render :rlgl)
  (export 'rlgl::set-matrix-projection :rlgl)
  (export 'rlgl::|C:@EA@RL-TEXTURE-FILTER| :rlgl)
  (export 'rlgl::load-vertex-buffer-element :rlgl)
  (export 'rlgl::update-texture :rlgl)
  (export 'rlgl::update-vertex-buffer :rlgl)
  (export 'rlgl::+max-matrix-stack-size+ :rlgl)
  (export 'rlgl::disable-framebuffer :rlgl)
  (export 'rlgl::unload-shader-program :rlgl)
  (export 'rlgl::+blend-src-rgb+ :rlgl)
  (export 'rlgl::+graphics-api-opengl-33+ :rlgl)
  (export 'rlgl::disable-vertex-array :rlgl)
  (export 'rlgl::unload-vertex-array :rlgl)
  (export 'rlgl::set-matrix-projection-stereo :rlgl)
  (export 'rlgl::get-location-attrib :rlgl)
  (export 'rlgl::draw-call :rlgl)
  (export 'rlgl::gl-close :rlgl)
  (export 'rlgl::m0 :rlgl)
  (export 'rlgl::vbo-id :rlgl)
  (export 'rlgl::+dst-color+ :rlgl)
  (export 'rlgl::texture-id :rlgl)
  (export 'rlgl::unload-vertex-buffer :rlgl)
  (export 'rlgl::get-pixel-format-name :rlgl)
  (export 'rlgl::load-shader-code :rlgl)
  (export 'rlgl::disable-vertex-buffer-element :rlgl)
  (export 'rlgl::+texture-mipmap-bias-ratio+ :rlgl)
  (export 'rlgl::matrix-mode :rlgl)
  (export 'rlgl::compile-shader :rlgl)
  (export 'rlgl::m10 :rlgl)
  (export 'rlgl::+blend-dst-rgb+ :rlgl)
  (export 'rlgl::+unsigned-byte+ :rlgl)
  (export 'rlgl::normal3f :rlgl)
  (export 'rlgl::+stream-read+ :rlgl)
  (export 'rlgl::set-uniform :rlgl)
  (export 'rlgl::+default-batch-buffers+ :rlgl)
  (export 'rlgl::blit-framebuffer :rlgl)
  (export 'rlgl::set-texture :rlgl)
  (export 'rlgl::+fragment-shader+ :rlgl)
  (export 'rlgl::+rlgl-version+ :rlgl)
  (export 'rlgl::+max+ :rlgl)
  (export 'rlgl::+src-color+ :rlgl)
  (export 'rlgl::m3 :rlgl)
  (export 'rlgl::+dynamic-read+ :rlgl)
  (export 'rlgl::load-texture-depth :rlgl)
  (export 'rlgl::+blend-src-alpha+ :rlgl)
  (export 'rlgl::load-identity :rlgl)
  (export 'rlgl::copy-shader-buffer :rlgl)
  (export 'rlgl::+float+ :rlgl)
  (export 'rlgl::read-shader-buffer :rlgl)
  (export 'rlgl::compute-shader-dispatch :rlgl)
  (export 'rlgl::load-vertex-array :rlgl)
  (export 'rlgl::+texture-mag-filter+ :rlgl)
  (export 'rlgl::pixel-format :rlgl)
  (export 'rlgl::disable-depth-mask :rlgl)
  (export 'rlgl::active-draw-buffers :rlgl)
  (export 'rlgl::buffer-count :rlgl)
  (export 'rlgl::+static-copy+ :rlgl)
  (export 'rlgl::is-stereo-render-enabled :rlgl)
  (export 'rlgl::+texture-min-filter+ :rlgl)
  (export 'rlgl::set-blend-factors :rlgl)
  (export 'rlgl::draw-render-batch-active :rlgl)
  (export 'rlgl::+one-minus-dst-alpha+ :rlgl)
  (export 'rlgl::element-count :rlgl)
  (export 'rlgl::enable-depth-mask :rlgl)
  (export 'rlgl::disable-wire-mode :rlgl)
  (export 'rlgl::+texture-filter-mip-linear+ :rlgl)
  (export 'rlgl::vertex-buffer :rlgl)
  (export 'rlgl::shader-location-index :rlgl)
  (export 'rlgl::cubemap-parameters :rlgl)
  (export 'rlgl::tex-coord2f :rlgl)
  (export 'rlgl::set-line-width :rlgl)
  (export 'rlgl::unload-framebuffer :rlgl)
  (export 'rlgl::+matrix-type+ :rlgl)
  (export 'rlgl::draw-vertex-array-instanced :rlgl)
  (export 'rlgl::disable-depth-test :rlgl)
  (export 'rlgl::texture-parameters :rlgl)
  (export 'rlgl::vertex2i :rlgl)
  (export 'rlgl::enable-shader :rlgl)
  (export 'rlgl::set-blend-mode :rlgl)
  (export 'rlgl::|C:@EA@RL-PIXEL-FORMAT| :rlgl)
  (export 'rlgl::disable-shader :rlgl)
  (export 'rlgl::draws :rlgl)
  (export 'rlgl::|C:@EA@RL-FRAMEBUFFER-ATTACH-TYPE| :rlgl)
  (export 'rlgl::texcoords :rlgl)
  (export 'rlgl::color4f :rlgl)
  (export 'rlgl::disable-smooth-lines :rlgl)
  (export 'rlgl::m13 :rlgl)
  (export 'rlgl::+texture-filter-mip-nearest+ :rlgl)
  (export 'rlgl::draw-vertex-array-elements-instanced :rlgl)
  (export 'rlgl::+min+ :rlgl)
  (export 'rlgl::+vertex-shader+ :rlgl)
  (export 'rlgl::set-shader :rlgl)
  (export 'rlgl::+bool+ :rlgl)
  (export 'rlgl::texture-filter :rlgl)
  (export 'rlgl::update-shader-buffer :rlgl)
  (export 'rlgl::get-gl-texture-formats :rlgl)
  (export 'rlgl::draw-vertex-array :rlgl)
  (export 'rlgl::+texture-wrap-repeat+ :rlgl)
  (export 'rlgl::get-matrix-transform :rlgl)
  (export 'rlgl::vertices :rlgl)
  (export 'rlgl::+default-batch-buffer-elements+ :rlgl)
  (export 'rlgl::|C:@EA@RL-SHADER-UNIFORM-DATA-TYPE| :rlgl)
  (export 'rlgl::+projection+ :rlgl)
  (export 'rlgl::+max-shader-locations+ :rlgl)
  (export 'rlgl::set-uniform-sampler :rlgl)
  (export 'rlgl::m7 :rlgl)
  (export 'rlgl::draw-render-batch :rlgl)
  (export 'rlgl::enable-depth-test :rlgl)
  (export 'rlgl::enable-point-mode :rlgl)
  (export 'rlgl::get-framebuffer-height :rlgl)
  (export 'rlgl::indices :rlgl)
  (export 'rlgl::+one-minus-constant-color+ :rlgl)
  (export 'rlgl::set-vertex-attribute-divisor :rlgl)
  (export 'rlgl::draw-counter :rlgl)
  (export 'rlgl::vertex-count :rlgl)
  (export 'rlgl::disable-texture :rlgl)
  (export 'rlgl::clear-color :rlgl)
  (export 'rlgl::|C:@EA@RL-SHADER-ATTRIBUTE-DATA-TYPE| :rlgl)
  (export 'rlgl::set-render-batch-active :rlgl)
  (export 'rlgl::+texture-wrap-mirror-repeat+ :rlgl)
  (export 'rlgl::mult-matrixf :rlgl)
  (export 'rlgl::+false+ :rlgl)
  (export 'rlgl::disable-vertex-attribute :rlgl)
  (export 'rlgl::+texture-filter-linear+ :rlgl)
  (export 'rlgl::+constant-color+ :rlgl)
  (export 'rlgl::+one-minus-constant-alpha+ :rlgl)
  (export 'rlgl::enable-vertex-attribute :rlgl)
  (export 'rlgl::+blend-color+ :rlgl)
  (export 'rlgl::set-framebuffer-width :rlgl)
  (export 'rlgl::enable-color-blend :rlgl)
  (export 'rlgl::enable-wire-mode :rlgl)
  (export 'rlgl::read-texture-pixels :rlgl)
  (export 'rlgl::m12 :rlgl)
  (export 'rlgl::enable-vertex-array :rlgl)
  (export 'rlgl::pop-matrix :rlgl)
  (export 'rlgl::m15 :rlgl)
  (export 'rlgl::frustum :rlgl)
  (export 'rlgl::+one+ :rlgl)
  (export 'rlgl::set-framebuffer-height :rlgl)
  (export 'rlgl::bind-shader-buffer :rlgl)
  (export 'rlgl::load-shader-buffer :rlgl)
  (export 'rlgl::|C:@EA@RL-GL-VERSION| :rlgl)
  (export 'rlgl::load-vertex-buffer :rlgl)
  (export 'rlgl::shader-uniform-data-type :rlgl)
  (export 'rlgl::+stream-draw+ :rlgl)
  (export 'rlgl::|C:@EA@RL-SHADER-LOCATION-INDEX| :rlgl)
  (export 'rlgl::+blend-equation-alpha+ :rlgl)
  (export 'rlgl::framebuffer-attach-type :rlgl)
  (export 'rlgl::+texture-filter-anisotropic+ :rlgl)
  (export 'rlgl::m9 :rlgl)
  (export 'rlgl::gen-texture-mipmaps :rlgl)
  (export 'rlgl::+one-minus-src-color+ :rlgl)
  (export 'rlgl::+texture-filter-nearest-mip-linear+ :rlgl)
  (export 'rlgl::check-render-batch-limit :rlgl)
  (export 'rlgl::get-matrix-projection :rlgl)
  (export 'rlgl::gl-init :rlgl)
  (export 'rlgl::draw-vertex-array-elements :rlgl)
  (export 'rlgl::+one-minus-src-alpha+ :rlgl)
  (export 'rlgl::+quads+ :rlgl)
  (export 'rlgl::clear-screen-buffers :rlgl)
  (export 'rlgl::+texture+ :rlgl)
  (export 'rlgl::+stream-copy+ :rlgl)
  (export 'rlgl::+one-minus-dst-color+ :rlgl)
  (export 'rlgl::get-location-uniform :rlgl)
  (export 'rlgl::+static-draw+ :rlgl)
  (export 'rlgl::active-texture-slot :rlgl))

(defun rlgl::initialize-claw-library-rlgl ()
  (unless (zerop (cffi:foreign-funcall
                   "__claw_rlgl_loader_902CC49AE25A3145BB68EA4CEC0D8B023FFA53AA"
                   :int))
    (error "Failed to initialize adapater")))

